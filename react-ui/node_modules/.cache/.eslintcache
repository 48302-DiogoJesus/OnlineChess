[{"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\index.tsx":"1","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\GamePage.tsx":"2","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\state\\reducers\\root.ts":"3","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\domain\\board.ts":"4","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\domain\\piece.ts":"5","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\domain\\position.ts":"6","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\domain\\errors.ts":"7","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\server\\config.ts":"8","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\state\\actions\\action.ts":"9","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\Authentication\\Login\\Login.tsx":"10","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\Authentication\\Signup\\Signup.tsx":"11","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\MainPage.tsx":"12","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\server\\server.ts":"13","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\state\\State.ts":"14","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\utils\\utils.ts":"15","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\NotFound\\NotFound.tsx":"16","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\utils.ts":"17","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\GameState\\MultiplayerGS.ts":"18","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\GameState\\Singleplayer.ts":"19","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\GameState\\GameState.ts":"20","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\ChessBoard\\Board\\Board.tsx":"21","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\ChessBoard\\Tile\\Tile.tsx":"22","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\ChessBoard\\Piece\\Piece.tsx":"23","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\GameCountdown\\GameCountdown.tsx":"24","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\GameChat\\GameChat.tsx":"25","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\GameInfo\\GameInfo.tsx":"26","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\GameButtons\\GameButtons.tsx":"27","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\GameVS\\GameVS.tsx":"28","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\GameHeader\\GameHeader.tsx":"29","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\utils\\Alerts\\sa-alerts.ts":"30","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\components\\Navbar\\Navbar.tsx":"31","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\components\\Navbar\\AuthButtons\\AuthButtons.tsx":"32","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\components\\Navbar\\AuthButtons\\PlayerMenu\\PlayerMenu.tsx":"33","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\components\\OpenMPGame\\OpenMPGame.tsx":"34","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\components\\OpenSPGame\\OpenSPGame.tsx":"35","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\utils.ts":"36","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\index.tsx":"37","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\state\\reducers\\root.ts":"38","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\MainPage.tsx":"39","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\GamePage.tsx":"40","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\NotFound\\NotFound.tsx":"41","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\Authentication\\Login\\Login.tsx":"42","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\Authentication\\Signup\\Signup.tsx":"43","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\state\\State.ts":"44","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\utils.ts":"45","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\server\\server.ts":"46","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\GameState\\GameState.ts":"47","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\GameState\\MultiplayerGS.ts":"48","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\GameState\\Singleplayer.ts":"49","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\utils\\Alerts\\sa-alerts.ts":"50","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\components\\OpenMPGame\\OpenMPGame.tsx":"51","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\components\\Navbar\\Navbar.tsx":"52","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\components\\OpenSPGame\\OpenSPGame.tsx":"53","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\GameVS\\GameVS.tsx":"54","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\GameCountdown\\GameCountdown.tsx":"55","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\GameInfo\\GameInfo.tsx":"56","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\GameChat\\GameChat.tsx":"57","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\GameButtons\\GameButtons.tsx":"58","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\GameHeader\\GameHeader.tsx":"59","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\ChessBoard\\Board\\Board.tsx":"60","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\state\\actions\\action.ts":"61","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\domain\\piece.ts":"62","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\server\\config.ts":"63","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\domain\\board.ts":"64","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\utils.ts":"65","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\components\\Navbar\\AuthButtons\\AuthButtons.tsx":"66","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\domain\\position.ts":"67","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\ChessBoard\\Tile\\Tile.tsx":"68","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\domain\\errors.ts":"69","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\components\\Navbar\\AuthButtons\\PlayerMenu\\PlayerMenu.tsx":"70","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\ChessBoard\\Piece\\Piece.tsx":"71"},{"size":1820,"mtime":1657635510315,"results":"72","hashOfConfig":"73"},{"size":10663,"mtime":1657638280921,"results":"74","hashOfConfig":"73"},{"size":1102,"mtime":1657634886869,"results":"75","hashOfConfig":"73"},{"size":12948,"mtime":1657574465444,"results":"76","hashOfConfig":"73"},{"size":7815,"mtime":1657452430464,"results":"77","hashOfConfig":"73"},{"size":2329,"mtime":1657451171601,"results":"78","hashOfConfig":"73"},{"size":1077,"mtime":1657308407231,"results":"79","hashOfConfig":"73"},{"size":555,"mtime":1657638088703,"results":"80","hashOfConfig":"73"},{"size":607,"mtime":1657634920301,"results":"81","hashOfConfig":"73"},{"size":1863,"mtime":1657636733461,"results":"82","hashOfConfig":"73"},{"size":1731,"mtime":1657497127451,"results":"83","hashOfConfig":"73"},{"size":1055,"mtime":1657498943768,"results":"84","hashOfConfig":"73"},{"size":4421,"mtime":1657638581626,"results":"85","hashOfConfig":"73"},{"size":1365,"mtime":1657635003964,"results":"86","hashOfConfig":"73"},{"size":167,"mtime":1656866924109,"results":"87","hashOfConfig":"73"},{"size":118,"mtime":1656874600913,"results":"88","hashOfConfig":"73"},{"size":2718,"mtime":1657575515217,"results":"89","hashOfConfig":"73"},{"size":4499,"mtime":1657542794868,"results":"90","hashOfConfig":"73"},{"size":879,"mtime":1657496762173,"results":"91","hashOfConfig":"73"},{"size":840,"mtime":1657498557176,"results":"92","hashOfConfig":"73"},{"size":4077,"mtime":1657546366655,"results":"93","hashOfConfig":"73"},{"size":984,"mtime":1657497014954,"results":"94","hashOfConfig":"73"},{"size":29287,"mtime":1657574530021,"results":"95","hashOfConfig":"73"},{"size":459,"mtime":1657490910345,"results":"96","hashOfConfig":"73"},{"size":615,"mtime":1657579980389,"results":"97","hashOfConfig":"73"},{"size":2414,"mtime":1657636392672,"results":"98","hashOfConfig":"73"},{"size":261,"mtime":1657408027832,"results":"99","hashOfConfig":"73"},{"size":972,"mtime":1657497091658,"results":"100","hashOfConfig":"73"},{"size":1003,"mtime":1657496023546,"results":"101","hashOfConfig":"73"},{"size":1043,"mtime":1657574714028,"results":"102","hashOfConfig":"73"},{"size":302,"mtime":1657497242107,"results":"103","hashOfConfig":"73"},{"size":1086,"mtime":1657497243114,"results":"104","hashOfConfig":"73"},{"size":953,"mtime":1657497242650,"results":"105","hashOfConfig":"73"},{"size":4009,"mtime":1657548794278,"results":"106","hashOfConfig":"73"},{"size":612,"mtime":1657548555782,"results":"107","hashOfConfig":"73"},{"size":853,"mtime":1657573645853,"results":"108","hashOfConfig":"73"},{"size":1820,"mtime":1657635510315,"results":"109","hashOfConfig":"110"},{"size":1102,"mtime":1657634886869,"results":"111","hashOfConfig":"110"},{"size":1055,"mtime":1657498943768,"results":"112","hashOfConfig":"110"},{"size":10661,"mtime":1657642842794,"results":"113","hashOfConfig":"110"},{"size":118,"mtime":1656874600913,"results":"114","hashOfConfig":"110"},{"size":1863,"mtime":1657636733461,"results":"115","hashOfConfig":"110"},{"size":1731,"mtime":1657497127451,"results":"116","hashOfConfig":"110"},{"size":1365,"mtime":1657635003964,"results":"117","hashOfConfig":"110"},{"size":2718,"mtime":1657575515217,"results":"118","hashOfConfig":"110"},{"size":4421,"mtime":1657638581626,"results":"119","hashOfConfig":"110"},{"size":840,"mtime":1657498557176,"results":"120","hashOfConfig":"110"},{"size":4499,"mtime":1657542794868,"results":"121","hashOfConfig":"110"},{"size":879,"mtime":1657496762173,"results":"122","hashOfConfig":"110"},{"size":1043,"mtime":1657574714028,"results":"123","hashOfConfig":"110"},{"size":4009,"mtime":1657548794278,"results":"124","hashOfConfig":"110"},{"size":302,"mtime":1657497242107,"results":"125","hashOfConfig":"110"},{"size":612,"mtime":1657548555782,"results":"126","hashOfConfig":"110"},{"size":972,"mtime":1657497091658,"results":"127","hashOfConfig":"110"},{"size":459,"mtime":1657490910345,"results":"128","hashOfConfig":"110"},{"size":2414,"mtime":1657636392672,"results":"129","hashOfConfig":"110"},{"size":564,"mtime":1657653491339,"results":"130","hashOfConfig":"110"},{"size":269,"mtime":1657653522680,"results":"131","hashOfConfig":"110"},{"size":1003,"mtime":1657496023546,"results":"132","hashOfConfig":"110"},{"size":4077,"mtime":1657642666782,"results":"133","hashOfConfig":"110"},{"size":607,"mtime":1657634920301,"results":"134","hashOfConfig":"110"},{"size":7992,"mtime":1657645297230,"results":"135","hashOfConfig":"110"},{"size":585,"mtime":1657652851075,"results":"136","hashOfConfig":"110"},{"size":11446,"mtime":1657651712970,"results":"137","hashOfConfig":"110"},{"size":853,"mtime":1657573645853,"results":"138","hashOfConfig":"110"},{"size":1086,"mtime":1657497243114,"results":"139","hashOfConfig":"110"},{"size":2329,"mtime":1657451171601,"results":"140","hashOfConfig":"110"},{"size":984,"mtime":1657497014954,"results":"141","hashOfConfig":"110"},{"size":1077,"mtime":1657308407231,"results":"142","hashOfConfig":"110"},{"size":953,"mtime":1657497242650,"results":"143","hashOfConfig":"110"},{"size":29287,"mtime":1657642544188,"results":"144","hashOfConfig":"110"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},"l95sh2",{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"160"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"160"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"160"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"160"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"160"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"160"},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"160"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"160"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"160"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"160"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"160"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"160"},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"160"},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"160"},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"160"},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},"1isz1j0",{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285"},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"301","messages":"302","suppressedMessages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"310","messages":"311","suppressedMessages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"313","messages":"314","suppressedMessages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"319","messages":"320","suppressedMessages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"322","messages":"323","suppressedMessages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","suppressedMessages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245"},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","suppressedMessages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","suppressedMessages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","suppressedMessages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","suppressedMessages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","suppressedMessages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"346","messages":"347","suppressedMessages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","suppressedMessages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352"},{"filePath":"353","messages":"354","suppressedMessages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"356","messages":"357","suppressedMessages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359"},{"filePath":"360","messages":"361","suppressedMessages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},{"filePath":"363","messages":"364","suppressedMessages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258"},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","suppressedMessages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","suppressedMessages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","suppressedMessages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\index.tsx",["381","382"],[],"// Import Pages\r\nimport MainPage from './pages/MainPage/MainPage'\r\nimport GamePage from './pages/GamePage/GamePage'\r\nimport LoginPage from './pages/Authentication/Login/Login'\r\nimport SignupPage from './pages/Authentication/Signup/Signup'\r\n\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Route Handling Imports\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './state/reducers/root';\r\n\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk'\r\nimport NotFound from './pages/NotFound/NotFound';\r\nimport config from './server/config';\r\nimport State from './state/State';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\n// Redux Store\r\nexport const store = createStore(persistedReducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nconst persistor = persistStore(store)\r\n\r\nconst rootElement = document.getElementById('root')\r\n\r\nReactDOM.render(\r\n  // Redux Provider\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <BrowserRouter>\r\n        <Routes>\r\n          <Route path=\"/\" element={<MainPage />} />\r\n          <Route path=\"/login\" element={<LoginPage />} />\r\n          <Route path=\"/signup\" element={<SignupPage />} />\r\n          <Route path=\"/games/:game_id\" element={<GamePage />} />\r\n          <Route path=\"*\" element={<NotFound />} />\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </PersistGate>\r\n  </Provider>\r\n  ,\r\n  rootElement\r\n);\r\n","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\GamePage.tsx",["383","384","385","386","387","388","389","390"],[],"import './GamePage.css'\r\n\r\nimport GameVS from './components/GameVS/GameVS'\r\nimport GameInfo from './components/GameInfo/GameInfo'\r\nimport GameCountdown from './components/GameCountdown/GameCountdown'\r\nimport GameChat from './components/GameChat/GameChat'\r\nimport GameButtons from './components/GameButtons/GameButtons'\r\nimport Board from './components/ChessBoard/Board/Board'\r\nimport GameHeader from './components/GameHeader/GameHeader'\r\n\r\nimport State from '../../state/State'\r\n\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport Alerts from '../../utils/Alerts/sa-alerts'\r\nimport Server, { RemoteGame, ServerError } from '../../server/server'\r\n\r\nimport GamePageUtils from './utils'\r\nimport { BoardError } from '../../domain/errors'\r\nimport Multiplayer, { ClientType, IMultiplayerGS } from './GameState/MultiplayerGS'\r\nimport GameState from './GameState/GameState'\r\nimport Singleplayer from './GameState/Singleplayer'\r\n\r\n// LOW TIME BECAUSE ON DEVELOPMENT\r\nconst UPDATE_GAME_TIMEOUT = 1000\r\n\r\nexport default function GamePage(props: any) {\r\n  const navigate = useNavigate()\r\n\r\n  // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \r\n  const game_id = useParams().game_id!!\r\n  // Am i waiting for the game info to be retreived from the server ?\r\n  const [waiting, setWaiting] = useState(true)\r\n  const [gameState, setGameState] = useState(GameState.defaultGameState)\r\n  const singleplayer = game_id == \"sp\"\r\n  const multiplayerGS = gameState as IMultiplayerGS\r\n\r\n  const local_username = State.getAppState().authentication.username\r\n\r\n  // FIRST RENDER\r\n  useEffect(() => {\r\n    new Promise((resolve, reject) => {\r\n      if (singleplayer) {\r\n        startSingleplayerGame()\r\n        resolve(null)\r\n      } else {\r\n        joinMultiplayerGame().then(() => resolve(null))\r\n      }\r\n    }).then(() => setWaiting(false))\r\n    return () => { }\r\n  }, [])\r\n\r\n  // AUTO-REFRESH CALLS\r\n  const [rr, setrr] = useState(true)\r\n  const forceRR = () => { setrr(!rr) }\r\n  useEffect(() => {\r\n\r\n    while (true) {\r\n      if (singleplayer)\r\n        return\r\n\r\n      // It is Multiplayer Game\r\n      // Dont try update while i dont have the game\r\n      if (waiting)\r\n        return\r\n\r\n      // I'm not a viewer\r\n      // If game is Over\r\n      if (gameState.winner != null)\r\n        return\r\n\r\n      // Always Update if i'm a viewer\r\n      if (multiplayerGS.client_type == ClientType.VIEWER)\r\n        break\r\n\r\n      // Opponent has not been defined yet\r\n      if (multiplayerGS.opponent_username == null)\r\n        break\r\n\r\n      // Game has started + I am a player\r\n      // It's my turn AND \r\n      if (multiplayerGS.board.turn == multiplayerGS.local_pieces)\r\n        return\r\n\r\n      break\r\n    }\r\n    const timer = setTimeout(() => updateMultiplayerGame(), UPDATE_GAME_TIMEOUT)\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [gameState.board, waiting, rr])\r\n\r\n\r\n  function startSingleplayerGame() {\r\n    setGameState(Singleplayer.buildSingleplayerGS())\r\n  }\r\n\r\n  /**\r\n   * Join Multiplayer Game\r\n   * Attempts to get the game identified by the ID passed as URI param\r\n   * Based of of the [local_username] + the remote game it knows who we are: WHITE_PIECES, BLACK_PIECES or VIEWER\r\n   * If we are supposed to be the black player and there is no black player yet we tell the server it's us\r\n   * We update the local [gameState] based of of the remote Game we get from the server \r\n   */\r\n  async function joinMultiplayerGame() {\r\n    // const response = await State.joinGame(game_id)\r\n    const response = await Server.getGame(game_id)\r\n\r\n    if (!response.success) {\r\n      await launchCriticalError(response.data)\r\n      return\r\n    }\r\n\r\n    const remoteGame = response.data as RemoteGame\r\n    const clientType = Multiplayer.calcClientType(remoteGame, local_username)\r\n\r\n    if (clientType == ClientType.PLAYER_BLACK && remoteGame.player_b == null) {\r\n      // JOIN AS BLACK\r\n      const joinResponse = await Server.joinAsPlayerB(game_id)\r\n\r\n      if (joinResponse.success) {\r\n        const remoteGameJoin = joinResponse.data as RemoteGame\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGameJoin, clientType))\r\n      } else {\r\n        await launchCriticalError(joinResponse.data)\r\n        return\r\n      }\r\n    } else {\r\n      if (clientType == ClientType.VIEWER) {\r\n        // Increment viewer count\r\n        setGameState(Multiplayer.buildMultiplayerGS(remoteGame.player_w, remoteGame, clientType))\r\n        Server.incrementViewers(game_id)\r\n      } else {\r\n        // WHITE_PIECES PLAYER\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGame, clientType))\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update Multiplayer Game\r\n   * Updates the local game state if the remote game board is different\r\n   */\r\n  async function updateMultiplayerGame() {\r\n    const state = (gameState as IMultiplayerGS)\r\n\r\n    const response = await Server.getGame(state.game_id)\r\n\r\n    forceRR()\r\n\r\n    if (response.success) {\r\n      const remoteGame = response.data as RemoteGame\r\n      const newMultiplayerGS = Multiplayer.updateFromRemote(state, remoteGame)\r\n      if (!GameState.areGameStatesEqual(state, newMultiplayerGS)) {\r\n        setGameState(newMultiplayerGS)\r\n        return\r\n      }\r\n    } else {\r\n      // On error ignore it and gamestate won't be updated.\r\n      return\r\n    }\r\n    // On error ignore it and gamestate won't be updated.\r\n    return\r\n  }\r\n\r\n  /**\r\n   * Handle Make Move\r\n   * Performs a move on the local board and if it succeeds AND we are !singlePlayer validate with the server(updates remote game on success)\r\n   * If on singleplayer just swap the [local_pieces] to play as the opponent\r\n   */\r\n  async function handleMakeMove(move: string) {\r\n    if (gameState.board.turn != gameState.local_pieces) {\r\n      Alerts.showNotification(\"Not your turn!\")\r\n      return\r\n    }\r\n    // Validate move Locally (should never fail)\r\n    try {\r\n      const promotion: boolean = gameState.board.isPromotionMove(move)\r\n      if (promotion) {\r\n        const pieceAsString = await GamePageUtils.askPromotionPiece(gameState.local_pieces)\r\n        const promotionMove = pieceAsString + move.substring(1)\r\n        gameState.board.makeMove(promotionMove)\r\n        // MODIFY CHAR OF THE MOVE TO THE PROMOTION PIECE CHOOSEN\r\n      } else {\r\n        gameState.board.makeMove(move)\r\n      }\r\n    } catch (err) {\r\n      Alerts.showNotification((err as BoardError).message)\r\n      return\r\n    }\r\n    // SINGLEPLAYER\r\n    if (singleplayer) {\r\n      setGameState(Singleplayer.switchTurn(gameState))\r\n      return\r\n    }\r\n    // MULTIPLAYER\r\n    else {\r\n      // Validate with server\r\n      const response = await Server.makeMove(game_id, move)\r\n      if (!response.success) {\r\n        Alerts.showNotification(`Invalid Move: ${(response.data as ServerError).message}`)\r\n        return\r\n      }\r\n      const remoteGame = response.data as RemoteGame\r\n      // Change local state from server game response\r\n      const newGameState = Multiplayer.updateFromRemote(gameState as IMultiplayerGS, remoteGame)\r\n      setGameState(newGameState)\r\n    }\r\n  }\r\n\r\n  function launchCriticalError(err: BoardError | ServerError) {\r\n    return GamePageUtils.showGameError(game_id, navigate, err.message)\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      {\r\n        !waiting ?\r\n          (\r\n            <div className=\"game-container\">\r\n\r\n              <div className=\"game-container-row\">\r\n                <GameHeader singleplayer={singleplayer} game_id={game_id} game_over={gameState.board.winner != null} />\r\n              </div>\r\n\r\n              <hr className=\"separator\" />\r\n\r\n              {\r\n                singleplayer ?\r\n                  <div className=\"singleplayer-piece-turn\">\r\n                    {\r\n                      gameState.board.winner === null ?\r\n                        <>Turn : {gameState.board.turn === 'w' ? 'WHITE' : 'BLACK'}</>\r\n                        :\r\n                        <>\r\n                          {gameState.board.winner === 'w' ? 'WHITE' : 'BLACK'} pieces won!\r\n                          <button onClick={startSingleplayerGame} className=\"green-btn restart\">RESTART</button>\r\n                        </>\r\n                    }\r\n                  </div>\r\n                  : null\r\n              }\r\n\r\n              <div className=\"game-container-row\">\r\n                {\r\n                  !singleplayer ?\r\n                    <>\r\n                      <GameVS\r\n                        singleplayer={singleplayer}\r\n                        local_player_username={multiplayerGS.local_username} local_player_pieces={multiplayerGS.local_pieces}\r\n                        opponent_username={multiplayerGS.opponent_username} opponent_pieces={multiplayerGS.opponent_pieces}\r\n                      />\r\n                      <GameCountdown game_over={gameState.board.winner != null} initalTime={60} />\r\n                    </>\r\n                    : null\r\n                }\r\n              </div>\r\n\r\n              <div className=\"game-container-row\">\r\n                <Board\r\n                  singleplayer={singleplayer}\r\n                  board={gameState.board}\r\n                  local_player_pieces={multiplayerGS.local_pieces}\r\n                  isViewer={multiplayerGS.client_type === ClientType.VIEWER}\r\n                  turn={gameState.board.turn}\r\n                  game_over={gameState.board.winner != null}\r\n                  onMakeMove={handleMakeMove}\r\n                  onError={launchCriticalError}\r\n                />\r\n                {\r\n                  !singleplayer ?\r\n                    <GameChat game_id={game_id} local_player_username={multiplayerGS.local_username} opponent_username={multiplayerGS.opponent_username} />\r\n                    : null\r\n                }\r\n              </div>\r\n\r\n              <div className=\"game-container-row\">\r\n                <GameInfo\r\n                  singleplayer={singleplayer}\r\n                  game_over={multiplayerGS.winner_username != null}\r\n                  turn_username={multiplayerGS.turn_username}\r\n                  winner_username={multiplayerGS.winner_username}\r\n                  winner_pieces={multiplayerGS.winner}\r\n                  opponent_username={multiplayerGS.opponent_username}\r\n                  views={multiplayerGS.views}\r\n                />\r\n\r\n                {\r\n                  !singleplayer ?\r\n                    <GameButtons gameOver={multiplayerGS.winner_username != null} />\r\n                    : null\r\n                }\r\n              </div>\r\n            </div>\r\n          )\r\n          : null\r\n      }\r\n    </div >\r\n  )\r\n}\r\n","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\state\\reducers\\root.ts",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\domain\\board.ts",["391","392","393","394","395","396","397","398","399","400","401","402"],[],"import {\r\n  Piece,\r\n  charToPiece,\r\n  selectByPieceColor,\r\n  PieceColor,\r\n  King,\r\n  Pawn,\r\n  Knight,\r\n  Queen,\r\n  Rook,\r\n  Bishop,\r\n  getOpponent,\r\n  pieceToChar,\r\n  MoveState\r\n} from './piece'\r\nimport { PositionObject, Position, stringToMove, Move, MoveObject, moveToString } from './position'\r\nimport ERROR from './errors'\r\n\r\nexport const BOARD_WIDTH = 8;\r\nexport const BOARD_HEIGHT = 8;\r\n\r\n\r\n/**\r\n * Board Object\r\n * Representation of a board and all it's permitted operations\r\n */\r\nexport class BoardObject {\r\n\r\n  board: Array<Array<Piece | null>> = Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(null));\r\n  winner: PieceColor | null = null\r\n  turn: PieceColor = PieceColor.WHITE\r\n  moves: MoveObject[] = []\r\n\r\n  /**\r\n   * BoardObject Class contructor\r\n   * @param {initBoard} If true it will initialize this.board with pieces at default positions (true by default)\r\n   * @returns A new instance of BoardObject\r\n   */\r\n  constructor(initTurn: PieceColor | null = null, initBoard: boolean = true) {\r\n    if (initBoard) {\r\n      this.initBoard()\r\n    }\r\n    if (initTurn != null) {\r\n      this.turn = initTurn\r\n    }\r\n  }\r\n\r\n  stringMoves() {\r\n    return this.moves.map(move => moveToString(move))\r\n  }\r\n\r\n  /**\r\n   * Initialize Board\r\n   * Set the default rows with the default chess pieces in the current board\r\n   */\r\n  initBoard() {\r\n    // Set White pieces\r\n    this.setRow(\"rnbqkbnr\", 0)\r\n    this.setRow(\"pppppppp\", 1)\r\n    // Set Black pieces\r\n    this.setRow(\"PPPPPPPP\", BOARD_HEIGHT - 2)\r\n    this.setRow(\"RNBQKBNR\", BOARD_HEIGHT - 1)\r\n  }\r\n\r\n  static fromMoves(moves: string[]) {\r\n    const baseBoard = new BoardObject()\r\n    for (const move of moves) {\r\n      baseBoard.makeMove(move)\r\n    }\r\n    return baseBoard\r\n  }\r\n\r\n  /**\r\n   * Set Piece At\r\n   * Set a piece at a certain board position\r\n   * @param {position} Position in the board to put the new piece. Has a row and a column\r\n   * @param {piece} Piece to place at [position] in the board\r\n   * @returns A Piece if there is a piece at [position], null if not\r\n   */\r\n  setPieceAt = (position: PositionObject, piece: Piece | null) => this.board[position.row][position.column] = piece\r\n\r\n  /**\r\n   * Get Piece At\r\n   * Get the piece at a certain board position\r\n   * @param {position} Position in the board. Has a row and a column\r\n   * @returns A Piece if there is a piece at [position], null if not\r\n   */\r\n  getPieceAt = (position: PositionObject): Piece | null => this.board[position.row][position.column]\r\n\r\n  findKingPosition = (): PositionObject | null => {\r\n    for (let row = 0; row < BOARD_HEIGHT; row++) {\r\n      for (let col = 0; col < BOARD_WIDTH; col++) {\r\n        const currentPosition = Position(col, row)\r\n        const currentPiece = this.getPieceAt(currentPosition)\r\n\r\n        if (currentPiece instanceof King && this.turn == currentPiece.color)\r\n          return currentPosition\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  generateAllPossibleTargets = (piecePosition: PositionObject): Set<PositionObject> => {\r\n    const possibleEndPositions = new Set<PositionObject>()\r\n    const piece = this.getPieceAt(piecePosition)\r\n    if (piece === null)\r\n      return possibleEndPositions\r\n\r\n    for (let row = 0; row < BOARD_HEIGHT; row++) {\r\n      for (let col = 0; col < BOARD_WIDTH; col++) {\r\n        const currentPosition = Position(col, row)\r\n        const pieceAtEndPos = this.getPieceAt(Position(col, row))\r\n\r\n        // If piece is from the same player trying to make the move don't try it\r\n        if (pieceAtEndPos != null && pieceAtEndPos.color == piece.color)\r\n          continue\r\n\r\n        const moveState = piece.checkMove(Move(pieceToChar(piece), piecePosition, currentPosition), this)\r\n\r\n        if (moveState == MoveState.OK) {\r\n          possibleEndPositions.add(currentPosition)\r\n        }\r\n      }\r\n    }\r\n    return possibleEndPositions\r\n  }\r\n\r\n  generateSafeKingTargets(): Set<PositionObject> {\r\n    const kingPosition = this.findKingPosition()\r\n\r\n    if (kingPosition == null)\r\n      return new Set<PositionObject>()\r\n\r\n    // Initial King Targets (Mutable set to remove in the end)\r\n    // Could also return a new Set with the exclusion of both Sets\r\n    const possibleKingTargets = this.generateAllPossibleTargets(kingPosition)\r\n\r\n    // Set that will store the suicide positions for the King\r\n    const collisions = new Set<PositionObject>()\r\n\r\n    this.setPieceAt(kingPosition, null)\r\n\r\n    possibleKingTargets.forEach((target) => {\r\n      // Remove King from the board to corretly make the predictions\r\n      // For all the board pieces\r\n      for (let row = 0; row < BOARD_HEIGHT; row++) {\r\n        for (let col = 0; col < BOARD_WIDTH; col++) {\r\n          const enemyPosition = Position(col, row)\r\n          const enemyPiece = this.getPieceAt(enemyPosition)\r\n\r\n          const targetPiece = this.getPieceAt(target)\r\n          this.setPieceAt(target, null)\r\n          /*\r\n           If Enemy Piece Generate it's possible moves and those that match the\r\n           king targets are added to the \"collisions\" Set\r\n           */\r\n          if (enemyPiece != null && enemyPiece.color != this.turn) {\r\n            const possibleEnemyTargets = this.generateAllPossibleTargets(enemyPosition)\r\n            /*\r\n             If piece is a pawn it can only eat in diagonal so moving forward is not a threat to King\r\n             */\r\n            if (enemyPiece instanceof Pawn) {\r\n              const direction = selectByPieceColor(this.turn, -1, 1)\r\n              // Add diagonals as Pawn targets\r\n              if (enemyPosition.column < BOARD_WIDTH - 1)\r\n                possibleEnemyTargets.add(Position(enemyPosition.column + 1, enemyPosition.row - direction))\r\n              if (enemyPosition.column > 0)\r\n                possibleEnemyTargets.add(Position(enemyPosition.column - 1, enemyPosition.row - direction))\r\n\r\n              // Remove targets in which pawn moves vertically\r\n              possibleEnemyTargets.forEach((enemyTarget: PositionObject) => {\r\n                if (enemyTarget.column == enemyPosition.column)\r\n                  possibleEnemyTargets.delete(enemyTarget)\r\n              })\r\n            }\r\n            // Remove suicide targets\r\n            possibleEnemyTargets.forEach((enemyTarget) => {\r\n              possibleKingTargets.forEach(target => {\r\n                if (enemyTarget.column === target.column && enemyTarget.row === target.row)\r\n                  collisions.add(enemyTarget)\r\n              })\r\n            })\r\n          }\r\n          // Put target piece back again\r\n          this.setPieceAt(target, targetPiece)\r\n        }\r\n      }\r\n    })\r\n\r\n    // Put King back to the board after predicting enemy targets\r\n    this.setPieceAt(kingPosition, new King(this.turn))\r\n    /*\r\n     Remove from the King targets the suicide positions\r\n     */\r\n    possibleKingTargets.forEach((kingPos: PositionObject) => {\r\n      collisions.forEach(collision => {\r\n        if (collision.column === kingPos.column && collision.row === kingPos.row)\r\n          possibleKingTargets.delete(kingPos)\r\n      })\r\n    })\r\n    return possibleKingTargets\r\n  }\r\n\r\n  isInCheckMate = () => this.isInCheck() && (this.generateSafeKingTargets().size === 0)\r\n\r\n  isInCheck = (): boolean => {\r\n    const kingPosition = this.findKingPosition()\r\n    if (kingPosition === null) return false\r\n\r\n    for (let row = 0; row < BOARD_HEIGHT; row++) {\r\n      for (let col = 0; col < BOARD_WIDTH; col++) {\r\n        const piecePosition = Position(col, row)\r\n        const piece = this.getPieceAt(piecePosition)\r\n        if (piece != null && piece.color == getOpponent(this.turn)) {\r\n          const possibleMovesForPiece = this.generateAllPossibleTargets(piecePosition)\r\n          possibleMovesForPiece.forEach(move => {\r\n            if (move.column === kingPosition.column && move.row === kingPosition.row)\r\n              return true\r\n          })\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  isPromotionMove = (moveAsString: string) => {\r\n    const move = stringToMove(moveAsString)\r\n    const piece = this.getPieceAt(move.start)\r\n    if (!(piece instanceof Pawn)) {\r\n      return false\r\n    }\r\n    if (this.turn == PieceColor.WHITE && move.end.row == 0) {\r\n      return true\r\n    }\r\n    if (this.turn == PieceColor.BLACK && move.end.row == 7) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  makeMove = (moveAsString: string) => {\r\n    const move = stringToMove(moveAsString)\r\n    const maybePromotionPiece = charToPiece(selectByPieceColor(this.turn, move.pieceChar.toUpperCase(), move.pieceChar.toLowerCase()))!!\r\n    const piece = this.getPieceAt(move.start)\r\n    const capturePiece = this.getPieceAt(move.end)\r\n\r\n    if (this.winner != null) {\r\n      throw ERROR.ALREADY_OVER\r\n    }\r\n\r\n    if (piece === null) throw ERROR.NO_PIECE_AT_START_POSITION\r\n\r\n    /*\r\n    if (!(piece instanceof King) && this.isInCheck()) {\r\n      throw ERROR.KING_IN_CHECK\r\n    }\r\n    */\r\n\r\n    const isPromotion = maybePromotionPiece.toString().toUpperCase() != piece.toString().toUpperCase()\r\n\r\n    if (\r\n      // When true means Promotion\r\n      isPromotion &&\r\n      // Check if it is a Pawn and if it's not a game winning move\r\n      (piece instanceof Pawn) && !(capturePiece instanceof King) &&\r\n      // Check if it's valid promotion piece\r\n      (maybePromotionPiece instanceof Knight || maybePromotionPiece instanceof Queen || maybePromotionPiece instanceof Bishop || maybePromotionPiece instanceof Rook)\r\n    ) {\r\n      // Transform pawn\r\n      this.setPieceAt(move.end, maybePromotionPiece)\r\n      this.setPieceAt(move.start, null)\r\n    } else {\r\n      this.setPieceAt(move.end, piece)\r\n      this.setPieceAt(move.start, null)\r\n    }\r\n\r\n    if (piece instanceof Pawn)\r\n      piece.hasMoved = true\r\n\r\n    // If this move makes the other player's King be in check and with nowhere to go tell board he won\r\n    if (this.isInCheck() && this.generateSafeKingTargets().size === 0)\r\n      this.winner = getOpponent(this.turn)\r\n\r\n    this.turn = getOpponent(this.turn)\r\n\r\n    this.updateWinner()\r\n    this.moves.push(move)\r\n  }\r\n\r\n  updateWinner() {\r\n    if (this.findKingPosition() == null) {\r\n      this.winner = getOpponent(this.turn)\r\n    }\r\n    const backupTurn = this.turn\r\n    this.turn = getOpponent(this.turn)\r\n\r\n    if (this.findKingPosition() == null) {\r\n      this.winner = getOpponent(this.turn)\r\n    }\r\n    this.turn = backupTurn\r\n  }\r\n\r\n  /**\r\n   * Board to String\r\n   * Convert the current board to a string\r\n   * @returns a string representation of this.board\r\n   */\r\n  toString() {\r\n    var boardAsString: string = \"\"\r\n    this.board.map((row, rowIdx) => row.map((col, colIdx) => {\r\n      const piece = this.getPieceAt(Position(colIdx, rowIdx))\r\n      if (piece == null) {\r\n        boardAsString += \" \"\r\n      } else {\r\n        boardAsString += selectByPieceColor(piece.color, piece.toString().toUpperCase(), piece.toString())\r\n      }\r\n    }))\r\n    return boardAsString\r\n  }\r\n\r\n  /**\r\n   * Set Board Row\r\n   * Sets the pieces for a specific row on the board\r\n   * @param {rowStr} Representation of the row as a string of [BOARD_WIDTH] characters\r\n   * @param {rowNum} Row number to identify the row. From 0 to [BOARD_HEIGHT]\r\n   */\r\n  setRow = (rowStr: string, rowNum: number) => {\r\n    for (let colNum = 0; colNum < BOARD_WIDTH; colNum++) {\r\n      const pieceChar = rowStr[colNum]\r\n      if (pieceChar !== undefined) {\r\n        this.setPieceAt(Position(colNum, rowNum), charToPiece(rowStr[colNum])!!)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * String to Board\r\n * Convert a string to a board\r\n * If a char corresponds to a valid piece set that piece in the {newBoard}, if not set an empty Tile in the {newBoard}\r\n * @param {boardAsString} Example of a default board: \"rnbqkbnrpppppppp                                PPPPPPPPRNBQKBNR\"\r\n * @returns A new BoardObject if {boardAsString} is convertible to a board, null if not\r\n */\r\n/* export function stringToBoard(boardAsString: string, initTurn: PieceColor | null = null): BoardObject {\r\n  if (boardAsString.length != BOARD_WIDTH * BOARD_HEIGHT)\r\n    throw ERROR.BAD_BOARD_STRING\r\n\r\n  var blackHasKing = false\r\n  var whiteHasKing = false\r\n\r\n  const newBoard = new BoardObject(initTurn, false)\r\n  for (let row = 0, currChar = 0; row < BOARD_HEIGHT; row++) {\r\n    for (let col = 0; col < BOARD_WIDTH; col++, currChar++) {\r\n      const pieceChar = boardAsString[currChar]\r\n      const piece: Piece | null = charToPiece(pieceChar)\r\n      if (piece instanceof King) {\r\n        if (piece.color == PieceColor.WHITE) {\r\n          whiteHasKing = true\r\n        } else if (piece.color == PieceColor.BLACK) {\r\n          blackHasKing = true\r\n        }\r\n      }\r\n      // [piece] will be null if char does not correspond to a piece. Case of the \" \" representing an empty Tile\r\n      newBoard.setPieceAt(Position(col, row), piece)\r\n    }\r\n  }\r\n  if (!blackHasKing)\r\n    newBoard.winner = PieceColor.WHITE\r\n  if (!whiteHasKing)\r\n    newBoard.winner = PieceColor.BLACK\r\n  return newBoard\r\n}\r\n */",["403","404"],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\domain\\piece.ts",["405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427"],[],"import { BoardObject } from \"./board\"\r\nimport { MoveObject, Position } from \"./position\"\r\n\r\n/**\r\n * Piece Object\r\n * Schema of a PieceObject\r\n * @property {color} Color of the piece: Black or White\r\n * @property {type} Piece type: Pawn, Rook, Knight, King, Queen, Bishop\r\n\r\n export interface PieceObject {\r\n    color: PieceColor,\r\n    type: PieceType\r\n}\r\n */\r\n/**\r\n * Piece Color\r\n */\r\n\r\nexport enum PieceColor {\r\n    BLACK = 'b',\r\n    WHITE = 'w',\r\n}\r\n\r\nexport function getOpponent(pieceColor: PieceColor) {\r\n    return pieceColor === PieceColor.BLACK ? PieceColor.WHITE : PieceColor.BLACK;\r\n}\r\n\r\n/**\r\n * Select by PieceColor\r\n * @param {piece} PieceObject to evaluate the color from\r\n * @param {ifWhite} Return this value if [piece] is white\r\n * @param {ifBlack} Return this value if [piece] is black\r\n * @returns {ifWhite} if {piece} is white, {ifBlack} if {ifWhite} is black\r\n */\r\nexport function selectByPieceColor<T>(pieceColor: PieceColor, ifWhite: T, ifBlack: T): T {\r\n    return pieceColor === PieceColor.WHITE ? ifWhite : ifBlack\r\n}\r\n\r\n/**\r\n * Piece Type\r\n */\r\nexport enum PieceType {\r\n    PAWN = 'p',\r\n    KING = 'k',\r\n    QUEEN = 'q',\r\n    ROOK = 'r',\r\n    KNIGHT = 'n',\r\n    BISHOP = 'b'\r\n}\r\n\r\nenum Direction { UP, DOWN, LEFT, RIGHT }\r\n\r\nexport enum MoveState { OK, NO_CHANGE, PATH_INVALID, PATH_BLOCKED, DEST_BLOCKED }\r\n\r\nfunction calculateDirection(move: MoveObject) {\r\n    const result = new Set()\r\n\r\n    if (move.end.row < move.start.row)\r\n        result.add(Direction.UP)\r\n    else if (move.end.row > move.start.row)\r\n        result.add(Direction.DOWN)\r\n\r\n    if (move.end.column < move.start.column)\r\n        result.add(Direction.LEFT)\r\n    else if (move.end.column > move.start.column)\r\n        result.add(Direction.RIGHT)\r\n\r\n    return result\r\n}\r\n\r\nexport abstract class Piece {\r\n    abstract color: PieceColor;\r\n    abstract validPath: (move: MoveObject, board: BoardObject) => boolean;\r\n    pathBlocked = (move: MoveObject, board: BoardObject): boolean => {\r\n        const direction = calculateDirection(move)\r\n        const current = Position(move.start.column, move.start.row)\r\n\r\n        while (true) {\r\n            if (direction.has(Direction.UP))\r\n                current.row--\r\n            if (direction.has(Direction.DOWN))\r\n                current.row++\r\n            if (direction.has(Direction.LEFT))\r\n                current.column--\r\n            if (direction.has(Direction.RIGHT))\r\n                current.column++\r\n\r\n            if (current.column == move.end.column && current.row == move.end.row) {\r\n                return false\r\n            }\r\n\r\n            if (board.getPieceAt(current) !== null)\r\n                return true\r\n        }\r\n    };\r\n    destinationBlocked = (move: MoveObject, board: BoardObject): boolean => {\r\n        const other = board.getPieceAt(move.end)\r\n        if (other == null || other == undefined)\r\n            return false\r\n        return other.color == this.color\r\n    };\r\n    checkMove(move: MoveObject, board: BoardObject): MoveState {\r\n        if (move.start == move.end)\r\n            return MoveState.NO_CHANGE\r\n        if (!this.validPath(move, board))\r\n            return MoveState.PATH_INVALID\r\n        if (!(board.getPieceAt(move.start) instanceof Knight) && this.pathBlocked(move, board))\r\n            return MoveState.PATH_BLOCKED\r\n        if (this.destinationBlocked(move, board))\r\n            return MoveState.DEST_BLOCKED\r\n\r\n        return MoveState.OK\r\n    };\r\n    abstract toString(): string;\r\n}\r\n\r\nexport class King extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        const absoluteRow = Math.abs(move.start.row - move.end.row)\r\n        const absoluteColumn = Math.abs(move.start.column - move.end.column)\r\n        return absoluteRow <= 1 && absoluteColumn <= 1\r\n    }\r\n    toString = (): string => pieceToChar(this)\r\n}\r\n\r\nexport class Rook extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        return move.start.column == move.end.column || move.start.row == move.end.row\r\n    }\r\n    toString = (): string => pieceToChar(this)\r\n}\r\n\r\nexport class Bishop extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        return Math.abs(move.start.column - move.end.column) == Math.abs(move.start.row - move.end.row)\r\n    }\r\n    toString = (): string => pieceToChar(this)\r\n}\r\n\r\nexport class Queen extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        return move.start.row == move.end.row\r\n            || move.start.column == move.end.column\r\n            || Math.abs(move.start.row - move.end.row) == Math.abs(move.start.column - move.end.column)\r\n    }\r\n    toString = (): string => pieceToChar(this)\r\n}\r\n\r\nexport class Knight extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        return Math.abs(move.end.column - move.start.column) == 2 && Math.abs(move.end.row - move.start.row) == 1\r\n            || Math.abs(move.end.column - move.start.column) == 1 && Math.abs(move.end.row - move.start.row) == 2\r\n    }\r\n    toString = (): string => pieceToChar(this)\r\n}\r\n\r\nexport class Pawn extends Piece {\r\n\r\n    hasMoved = false\r\n    color: PieceColor\r\n\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        const steps = this.hasMoved ? 1 : 2\r\n        const direction = selectByPieceColor(this.color, -1, 1)\r\n\r\n        return (\r\n            // Vertical movement\r\n            move.start.column == move.end.column\r\n            && (direction == -1 ?\r\n                (board.getPieceAt(move.end) == null && move.start.row > move.end.row && move.start.row - move.end.row <= steps)\r\n                :\r\n                (board.getPieceAt(move.end) == null && move.end.row > move.start.row && move.end.row - move.start.row <= steps)\r\n            )\r\n        )\r\n            ||\r\n            (\r\n                // Horizontal movement\r\n                Math.abs(move.start.column - move.end.column) == 1\r\n                && move.end.row - move.start.row == direction\r\n                && board.getPieceAt(move.end) != null\r\n            )\r\n    }\r\n    toString = (): string => pieceToChar(this)\r\n}\r\n\r\nconst charPieceMap = {\r\n    'K': King,\r\n    'R': Rook,\r\n    'B': Bishop,\r\n    'Q': Queen,\r\n    'N': Knight,\r\n    'P': Pawn,\r\n}\r\n\r\nexport const charToPiece = (char: string) => {\r\n    for (const entry of Object.entries(charPieceMap)) {\r\n        const pieceChar = entry[0]\r\n        const pieceClass = entry[1]\r\n        if (pieceChar === char.toUpperCase()) {\r\n            const color = char === char.toUpperCase() ? PieceColor.WHITE : PieceColor.BLACK\r\n            const newPiece = new pieceClass(color)\r\n            return newPiece\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport const pieceToChar = (piece: Piece) => {\r\n    let pieceChar\r\n    if (piece instanceof Knight) {\r\n        pieceChar = 'N'\r\n    }\r\n    else {\r\n        pieceChar = piece.constructor.name[0]\r\n    }\r\n    return selectByPieceColor(piece.color, pieceChar.toUpperCase(), pieceChar.toLowerCase())\r\n}","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\domain\\position.ts",["428","429"],[],"import ERRORS from './errors'\r\nimport { charToPiece } from './piece';\r\n\r\nconst BOARD_HEIGHT = 8\r\nconst BOARD_WIDTH = 8\r\n\r\nexport function range(x: number, min: number, max: number) {\r\n    return x >= min && x <= max;\r\n}\r\n\r\n/**\r\n * Position Object\r\n * Represents a position in a 2D environment such as a matrix\r\n * @property {column}\r\n * @property {row}\r\n */\r\nexport interface PositionObject {\r\n    column: number,\r\n    row: number\r\n}\r\n\r\nexport function positionToString(position: PositionObject): string {\r\n    return `${String.fromCharCode('a'.charCodeAt(0) + position.column)}${BOARD_HEIGHT - position.row}`\r\n}\r\n\r\nexport function stringToPosition(string: string): PositionObject {\r\n    if (string.length != 2)\r\n        throw ERRORS.INVALID_POSITION_CONVERSION\r\n\r\n    const column = string.charCodeAt(0) - 'a'.charCodeAt(0)\r\n    const row = ('0'.charCodeAt(0) + BOARD_HEIGHT) - string.charCodeAt(1)\r\n\r\n    if (!range(column, 0, BOARD_WIDTH - 1) || !range(row, 0, BOARD_HEIGHT - 1))\r\n        throw ERRORS.INVALID_POSITION_CONVERSION\r\n\r\n    return Position(column, row)\r\n}\r\n\r\n/**\r\n * Position\r\n * Build a position object\r\n * @param {column}\r\n * @param {row}\r\n * @returns a new PositionObject with the given {column} and {row}\r\n */\r\nexport const Position = (column: number, row: number): PositionObject => {\r\n    return { column, row }\r\n}\r\n\r\nexport interface MoveObject {\r\n    pieceChar: string,\r\n    start: PositionObject,\r\n    end: PositionObject\r\n}\r\n\r\n/**\r\n * Move\r\n * Build a move object\r\n * @param {pieceChar}\r\n * @param {start} position\r\n * @param {end} position\r\n * @returns a new move object\r\n*/\r\nexport const Move = (pieceChar: string, start: PositionObject, end: PositionObject): MoveObject => {\r\n    return { pieceChar, start, end }\r\n}\r\n\r\nexport function stringToMove(string: string) {\r\n    if (string.length != 5)\r\n        throw ERRORS.INVALID_MOVE_CONVERSION\r\n\r\n    const piece = string[0]\r\n    const start = stringToPosition(string.substring(1, 3))\r\n    const end = stringToPosition(string.substring(3, 5))\r\n\r\n    if (start === null || end === null || charToPiece(piece) === null)\r\n        throw ERRORS.INVALID_MOVE_CONVERSION\r\n\r\n    return Move(piece, start, end)\r\n}\r\n\r\nexport function moveToString(move: MoveObject): string {\r\n    return move.pieceChar + positionToString(move.start) + positionToString(move.end)\r\n}","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\domain\\errors.ts",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\server\\config.ts",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\state\\actions\\action.ts",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\Authentication\\Login\\Login.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\Authentication\\Signup\\Signup.tsx",["430"],[],"import './Signup.css'\r\nimport '../Authentication.css'\r\n\r\nimport { useRef } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\nimport State from '../../../state/State'\r\nimport Server from '../../../server/server'\r\n\r\nimport Alerts from '../../../utils/Alerts/sa-alerts'\r\n\r\nexport default function Signup(props: any) {\r\n    const username: any = useRef()\r\n    const password: any = useRef()\r\n    // const navigate = useNavigate()\r\n\r\n    const handleSignup = async () => {\r\n        const usernameValue = username.current.value\r\n        const passwordValue = password.current.value\r\n        if (usernameValue.length === 0 || passwordValue.length === 0)\r\n            return\r\n        const response = await Server.trySignup(usernameValue, passwordValue)\r\n        if (response.success) {\r\n            Alerts.showNotification('Account Created. You can login now.')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"global-container\">\r\n            <div className=\"auth-container\">\r\n                <form>\r\n                    <label htmlFor=\"auth-username\">USERNAME</label>\r\n                    <input ref={username} type=\"text\" className=\"auth-input\" id=\"auth-username\" name=\"username\" /><br />\r\n\r\n                    <label htmlFor=\"auth-password\">PASSWORD</label>\r\n                    <input ref={password} type=\"password\" className=\"auth-input\" id=\"auth-password\" name=\"password\" onKeyDown={e => { if (e.key === \"Enter\") handleSignup() }} /><br />\r\n\r\n                    <input id=\"auth-button\" value=\"SIGNUP\" onClick={handleSignup} />\r\n                    <a className=\"login-link\" href=\"/login\">Already have an account? Click here.</a>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\MainPage.tsx",["431"],[],"import './MainPage.css';\r\nimport { useSelector } from 'react-redux'\r\nimport { AppState } from '../../state/reducers/root'\r\n\r\nimport Navbar from './components/Navbar/Navbar'\r\nimport OpenMPGame from './components/OpenMPGame/OpenMPGame'\r\nimport OpenSPGame from './components/OpenSPGame/OpenSPGame';\r\n\r\nexport default function MainPage(props: any) {\r\n\r\n  const username: string | null = useSelector((state: AppState) => state).authentication.username\r\n\r\n  /*\r\n  function renderLoginIfNotLogged() {\r\n    if (username == null)\r\n      return <Navigate to=\"/login\" replace />\r\n  }\r\n\r\n  Inside Return Div Container: {renderLoginIfNotLogged()}\r\n  */\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <div className=\"container main-page-contents\" >\r\n        <div className=\"row justify-content-md-center\">\r\n          <div className=\"col open-game-outer-container\">\r\n            <OpenMPGame />\r\n          </div>\r\n          <div className=\"col open-game-outer-container\">\r\n            <OpenSPGame />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\server\\server.ts",["432","433","434"],[],"import { AxiosInstance, AxiosRequestHeaders, AxiosResponse } from 'axios'\r\nimport CONFIG from './config'\r\n\r\nimport Alerts from '../utils/Alerts/sa-alerts'\r\nimport State from '../state/State'\r\nimport { PieceColor } from '../domain/piece'\r\n\r\nconst AXIOSI = CONFIG.AXIOSINSTANCE\r\n\r\nfunction getHeaders(): AxiosRequestHeaders {\r\n    const token = State.getAppState().authentication.token\r\n    if (token != null)\r\n        return { 'Authorization': 'Bearer ' + State.getAppState().authentication.token }\r\n    else\r\n        return {}\r\n}\r\n\r\n// Private\r\nexport interface ServerError {\r\n    http_code: number,\r\n    message: string\r\n}\r\n\r\nexport interface ServerResponse {\r\n    success: boolean,\r\n    data: any | ServerError\r\n}\r\n\r\nexport interface RemoteGame {\r\n    _id: string,\r\n    player_w: string,   // username of player1\r\n    player_b: string | null,  // username of player2\r\n\r\n    moves: string[],\r\n    winner: PieceColor | null,\r\n    views: number\r\n}\r\n\r\n\r\nfunction responseIntercept(response: AxiosResponse, showPopupOnError: boolean = true): ServerResponse {\r\n    if (response.status < 200 || response.status >= 400) {\r\n        // If not authorized logout to avoid visual bugs\r\n        if (response.status == 401) {\r\n            State.logout()\r\n        }\r\n        const responseAsError = response.data.error as ServerError\r\n        if (showPopupOnError)\r\n            Alerts.showNotification(responseAsError.message)\r\n        return { success: false, data: responseAsError }\r\n    }\r\n    return { success: true, data: response.data.data }\r\n}\r\n\r\nfunction handleRequestError(err: any): ServerResponse {\r\n    return {\r\n        success: false,\r\n        data: {\r\n            http_code: 503,\r\n            message: err.message == \"Network Error\"\r\n                ? \"Server is Offline\"\r\n                : err.message,\r\n        }\r\n    }\r\n}\r\n\r\n// PUBLIC FUNCTIONS\r\nconst logout = (): Promise<ServerResponse> =>\r\n    AXIOSI.get('/auth/logout', {\r\n        headers: getHeaders()\r\n    })\r\n        .then((res: AxiosResponse) => responseIntercept(res, false))\r\n        .catch(err => handleRequestError(err))\r\n\r\n\r\nconst getGame = (game_id: string): Promise<ServerResponse> =>\r\n    AXIOSI.get(`/games?id=${game_id}`, {\r\n        headers: getHeaders()\r\n    })\r\n        .then((res: AxiosResponse) => responseIntercept(res, false))\r\n        .catch(err => handleRequestError(err))\r\n\r\n\r\nconst tryLogin = (username: string, password: string): Promise<ServerResponse> =>\r\n    AXIOSI.post('/auth', {\r\n        username: username,\r\n        password: password\r\n    }, { headers: getHeaders() })\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n        .catch(err => handleRequestError(err))\r\n\r\n\r\nconst trySignup = (username: string, password: string): Promise<ServerResponse> =>\r\n    AXIOSI.post('/users', {\r\n        username: username,\r\n        password: password\r\n    }, { headers: getHeaders() })\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n        .catch(err => handleRequestError(err))\r\n\r\n\r\nconst createGame = (game_id: string, is_public: boolean = true, opponent: string | null = null): Promise<ServerResponse> =>\r\n    AXIOSI.post(`/games`, {\r\n        id: game_id,\r\n        public: is_public,\r\n        player2: opponent,\r\n    }, { headers: getHeaders() })\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n        .catch(err => handleRequestError(err))\r\n\r\n\r\nconst joinAsPlayerB = (game_id: string): Promise<ServerResponse> =>\r\n    AXIOSI.get(`/games/connect?id=${game_id}`, {\r\n        headers: getHeaders(),\r\n    })\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n        .catch(err => handleRequestError(err))\r\n\r\nconst makeMove = (game_id: string, move: string): Promise<ServerResponse> =>\r\n    AXIOSI.get(`/games/makemove?id=${game_id}&move=${move}`, {\r\n        headers: getHeaders(),\r\n    })\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n        .catch(err => handleRequestError(err))\r\n\r\nconst incrementViewers = (game_id: string) =>\r\n    AXIOSI.post('/games/incrementviewers', {\r\n        id: game_id\r\n    }, { headers: getHeaders() })\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n        .catch(err => handleRequestError(err))\r\n\r\nconst Server = {\r\n    // Game\r\n    createGame,\r\n    getGame,\r\n    joinAsPlayerB,\r\n    makeMove,\r\n    incrementViewers,\r\n\r\n    // Authentication\r\n    logout,\r\n    tryLogin,\r\n    trySignup\r\n}\r\n\r\nexport default Server","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\state\\State.ts",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\utils\\utils.ts",[],[],["435","436"],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\NotFound\\NotFound.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\utils.ts",["437","438","439","440"],[],"// Utilitary functions for the GamePage component\r\n\r\nimport { NavigateFunction } from \"react-router-dom\"\r\nimport { PieceColor, PieceType } from \"../../domain/piece\"\r\nimport Alerts from \"../../utils/Alerts/sa-alerts\"\r\n\r\nexport function showGameError(game_id: string, navigate: NavigateFunction, message: string) {\r\n    return Alerts.showMessage(`Game Error: \"${game_id}\"`, message,\r\n        {\r\n            goBackBtn: {\r\n                text: 'Go Back',\r\n                className: 'go-back-btn',\r\n                visible: true\r\n            }\r\n        }, [\r\n        {\r\n            className: \"go-back-btn\",\r\n            eventName: \"click\",\r\n            execute: () => { navigate('../') }\r\n        }\r\n    ])\r\n}\r\n\r\nexport function askPromotionPiece(turn: PieceColor): Promise<string> {\r\n    return new Promise<string>((resolve, _) => {\r\n        Alerts.showMessage(\"Promotion\", \"Choose a piece\",\r\n            {\r\n                promotionQueen: {\r\n                    text: 'Queen',\r\n                    className: 'promotion-queen',\r\n                    visible: true\r\n                },\r\n                promotionRook: {\r\n                    text: 'Rook',\r\n                    className: 'promotion-rook',\r\n                    visible: true\r\n                },\r\n                promotionBishop: {\r\n                    text: 'Bishop',\r\n                    className: 'promotion-bishop',\r\n                    visible: true\r\n                },\r\n                promotionKnight: {\r\n                    text: 'Knight',\r\n                    className: 'promotion-knight',\r\n                    visible: true\r\n                }\r\n            }, [\r\n            {\r\n                className: \"promotion-queen\",\r\n                eventName: \"click\",\r\n                execute: () => { resolve(turn == PieceColor.WHITE ? PieceType.QUEEN.toUpperCase() : PieceType.QUEEN) }\r\n            },\r\n            {\r\n                className: \"promotion-rook\",\r\n                eventName: \"click\",\r\n                execute: () => { resolve(turn == PieceColor.WHITE ? PieceType.ROOK.toUpperCase() : PieceType.ROOK) }\r\n            },\r\n            {\r\n                className: \"promotion-bishop\",\r\n                eventName: \"click\",\r\n                execute: () => { resolve(turn == PieceColor.WHITE ? PieceType.BISHOP.toUpperCase() : PieceType.BISHOP) }\r\n            },\r\n            {\r\n                className: \"promotion-knight\",\r\n                eventName: \"click\",\r\n                execute: () => { resolve(turn == PieceColor.WHITE ? PieceType.KNIGHT.toUpperCase() : PieceType.KNIGHT) }\r\n            },\r\n        ]\r\n        )\r\n    })\r\n}\r\n\r\n\r\nconst GamePageUtils = {\r\n    showGameError,\r\n    askPromotionPiece\r\n}\r\n\r\nexport default GamePageUtils\r\n","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\GameState\\MultiplayerGS.ts",["441","442","443","444","445","446","447"],[],"import { BoardObject } from \"../../../domain/board\";\r\nimport { getOpponent, PieceColor } from \"../../../domain/piece\";\r\nimport { RemoteGame } from \"../../../server/server\";\r\nimport GameState, { IGameState } from \"./GameState\";\r\n\r\nexport enum ClientType {\r\n    PLAYER_WHITE,\r\n    PLAYER_BLACK,\r\n    VIEWER,\r\n    UNKNOWN\r\n}\r\n\r\nexport interface IMultiplayerGS extends IGameState {\r\n    /* Has all the GameState properties + opponent_pieces */\r\n    game_id: string\r\n    opponent_pieces: PieceColor,\r\n    client_type: ClientType,\r\n\r\n    local_username: string\r\n    opponent_username: string | null\r\n    turn_username: string\r\n    winner_username: string | null\r\n\r\n    views: number\r\n}\r\n\r\nfunction buildMultiplayerGS(\r\n    local_username: string,\r\n    remoteGame: RemoteGame,\r\n    clientType: ClientType\r\n): IMultiplayerGS {\r\n    const local_pieces = clientType === ClientType.PLAYER_BLACK\r\n        ? PieceColor.BLACK\r\n        : PieceColor.WHITE\r\n\r\n    const opponent_pieces = getOpponent(local_pieces)\r\n\r\n    const opponent_username = remoteGame.player_w == local_username\r\n        ? remoteGame.player_b\r\n        : remoteGame.player_w\r\n\r\n    const curr_turn = BoardObject.fromMoves(remoteGame.moves).turn\r\n\r\n    const turn_username = curr_turn == local_pieces\r\n        ? local_username\r\n        : opponent_username!!\r\n\r\n    var winner_username = null\r\n    if (remoteGame.winner != null) {\r\n        if (remoteGame.winner == local_pieces) {\r\n            winner_username = local_username\r\n        } else {\r\n            winner_username = opponent_username\r\n        }\r\n    }\r\n\r\n    return {\r\n        board: BoardObject.fromMoves(remoteGame.moves),\r\n        winner: remoteGame.winner,\r\n        local_pieces: local_pieces,\r\n\r\n        game_id: remoteGame._id,\r\n        opponent_pieces: opponent_pieces,\r\n        client_type: clientType,\r\n\r\n        local_username,\r\n        opponent_username,\r\n        turn_username,\r\n        winner_username,\r\n\r\n        views: remoteGame.views\r\n    }\r\n}\r\n\r\nfunction updateFromRemote(\r\n    prevState: IMultiplayerGS,\r\n    remoteGame: RemoteGame\r\n): IMultiplayerGS {\r\n\r\n    const board: BoardObject = BoardObject.fromMoves(remoteGame.moves)\r\n    const winner: PieceColor | null = board.winner\r\n    const local_pieces: PieceColor = prevState.local_pieces\r\n\r\n    const game_id = prevState.game_id\r\n    const opponent_pieces: PieceColor = getOpponent(prevState.local_pieces)\r\n    const client_type: ClientType = prevState.client_type\r\n\r\n    const local_username = prevState.local_username\r\n    const opponent_username = remoteGame.player_w == local_username ? remoteGame.player_b : remoteGame.player_w\r\n    const turn_username = board.turn === local_pieces\r\n        ? local_username\r\n        : opponent_username!!\r\n\r\n    var winner_username = null\r\n    if (remoteGame.winner != null) {\r\n        if (remoteGame.winner == local_pieces) {\r\n            winner_username = local_username\r\n        } else {\r\n            winner_username = opponent_username\r\n        }\r\n    }\r\n\r\n    const views = remoteGame.views\r\n\r\n    return {\r\n        board,\r\n        winner,\r\n        local_pieces,\r\n\r\n        game_id,\r\n        opponent_pieces,\r\n        client_type,\r\n\r\n        local_username,\r\n        opponent_username,\r\n        turn_username,\r\n        winner_username,\r\n\r\n        views\r\n    }\r\n}\r\n\r\nfunction calcClientType(gameState: RemoteGame, username: string | null): ClientType {\r\n    if (username == null) {\r\n        return ClientType.VIEWER\r\n    }\r\n    if (username == gameState.player_w) {\r\n        return ClientType.PLAYER_WHITE\r\n    } else if (gameState.player_b == username || gameState.player_b == null) {\r\n        // If im player2 join like that. If no one is player2 and i am not player1 join\r\n        return ClientType.PLAYER_BLACK\r\n    } else {\r\n        return ClientType.VIEWER\r\n    }\r\n}\r\n\r\nfunction isMultiplayerGS(gs: object) {\r\n    return (Object.keys(gs).length === (Object.keys(defaultGameState).length))\r\n}\r\n\r\n// Private. Just useful to isMultiplayerGS function\r\nfunction defaultGameState(): IMultiplayerGS {\r\n    return {\r\n        ...GameState.defaultGameState(),\r\n        game_id: \"\",\r\n        opponent_pieces: PieceColor.BLACK,\r\n        client_type: ClientType.PLAYER_WHITE,\r\n\r\n        local_username: \"\",\r\n        opponent_username: \"\",\r\n        turn_username: \"\",\r\n        winner_username: \"\",\r\n\r\n        views: 0\r\n    }\r\n}\r\nconst Multiplayer = {\r\n    buildMultiplayerGS,\r\n    updateFromRemote,\r\n\r\n    calcClientType,\r\n    isMultiplayerGS\r\n}\r\n\r\nexport default Multiplayer\r\n\r\n","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\GameState\\Singleplayer.ts",["448"],[],"import { getOpponent } from \"../../../domain/piece\";\r\nimport GameState, { IGameState } from \"./GameState\";\r\n\r\nexport interface ISingleplayerGS extends IGameState {\r\n    /* Has all the GameState properties */\r\n}\r\n\r\nfunction buildSingleplayerGS(): ISingleplayerGS {\r\n    return defaultGameState()\r\n}\r\n\r\nfunction switchTurn(state: ISingleplayerGS): ISingleplayerGS {\r\n    return {\r\n        ...state,\r\n        local_pieces: getOpponent(state.local_pieces)\r\n    }\r\n}\r\n\r\nfunction isSingleplayerGS(gs: object) {\r\n    return (Object.keys(gs).length === Object.keys(GameState.defaultGameState).length)\r\n}\r\n\r\nfunction defaultGameState(): IGameState {\r\n    return {\r\n        ...GameState.defaultGameState()\r\n        // + PROPS ONLY FROM ISingleplayerGS \r\n    }\r\n}\r\n\r\nconst Singleplayer = {\r\n    buildSingleplayerGS,\r\n    defaultGameState,\r\n    switchTurn\r\n}\r\n\r\nexport default Singleplayer\r\n","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\GameState\\GameState.ts",["449"],[],"import { BoardObject } from \"../../../domain/board\";\r\nimport { PieceColor } from \"../../../domain/piece\";\r\nimport { IMultiplayerGS } from \"./MultiplayerGS\";\r\n\r\nexport interface IGameState {\r\n    board: BoardObject,\r\n    winner: PieceColor | null,\r\n    local_pieces: PieceColor,\r\n}\r\n\r\n/** Only compares the 2 boards and opponents*/\r\nexport const areGameStatesEqual = (game1: IGameState, game2: IGameState): boolean =>\r\n    game1.board.toString() === game2.board.toString() &&\r\n    (game1 as IMultiplayerGS).opponent_username == (game2 as IMultiplayerGS).opponent_username\r\n\r\n\r\nfunction defaultGameState(): IGameState {\r\n    return {\r\n        board: new BoardObject(),\r\n        winner: null,\r\n        local_pieces: PieceColor.WHITE\r\n    }\r\n}\r\n\r\nconst GameState = {\r\n    areGameStatesEqual,\r\n    defaultGameState\r\n}\r\n\r\nexport default GameState","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\ChessBoard\\Board\\Board.tsx",["450","451","452","453","454","455"],[],"import './board.css'\r\n\r\nimport Tile, { TileColor } from '../Tile/Tile';\r\nimport { BoardObject } from '../../../../../domain/board'\r\nimport { Move, moveToString, Position, PositionObject } from '../../../../../domain/position'\r\nimport { BoardError } from '../../../../../domain/errors';\r\nimport { Piece, PieceColor } from '../../../../../domain/piece';\r\nimport { useState } from 'react';\r\nimport Alerts from '../../../../../utils/Alerts/sa-alerts';\r\n\r\ninterface TileWrapper { tile: PositionObject | null }\r\n\r\nconst initSelectedTile: TileWrapper = { tile: null }\r\nconst initTargetTiles: PositionObject[] = []\r\n\r\nexport default function Board(\r\n  props: {\r\n    singleplayer: boolean\r\n\r\n    board: BoardObject,\r\n    local_player_pieces: PieceColor\r\n\r\n    isViewer: boolean\r\n    game_over: boolean\r\n\r\n    turn: PieceColor\r\n\r\n    onMakeMove: (move: string) => void\r\n    onError: (error: BoardError) => void\r\n  }\r\n) {\r\n\r\n  const [selectedTile, setSelectedTile] = useState(initSelectedTile)\r\n  const [targetTiles, setTargetTiles] = useState(initTargetTiles)\r\n  const board = props.board\r\n\r\n  function buildTile(row: number, column: number, piece: Piece | null) {\r\n    return (\r\n      <Tile\r\n        piece={board.getPieceAt(Position(column, row))}\r\n\r\n        // Tile state\r\n        selected={isSelected(row, column)}\r\n        target={isTarget(row, column)}\r\n\r\n        // DARK or LIGHT \r\n        color={calcTileColor(row, column)}\r\n\r\n        // Position\r\n        position={Position(column, row)}\r\n\r\n        // Events\r\n        onTileClick={() => handleTileClick(row, column, piece)}\r\n      />\r\n    )\r\n  }\r\n\r\n  const calcTileColor = (row: number, col: number) =>\r\n    (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK\r\n\r\n  const isTarget = (row: number, col: number) =>\r\n    !props.game_over && targetTiles.find((pos) => pos.row === row && pos.column === col) != undefined\r\n\r\n  const isSelected = (row: number, col: number) =>\r\n    !props.game_over && (row == selectedTile.tile?.row && col == selectedTile.tile?.column)\r\n\r\n  const handleTileClick = (row: number, col: number, pieceClicked: Piece | null) => {\r\n    setSelectedTile({ tile: null })\r\n    setTargetTiles([])\r\n\r\n    if (props.game_over || props.isViewer)\r\n      return\r\n\r\n    if (!props.singleplayer && board.turn != props.local_player_pieces) {\r\n      Alerts.showNotification(\"Not your turn\")\r\n      return\r\n    }\r\n\r\n    const positionClicked = Position(col, row)\r\n\r\n    // 1. TILE IS SELECTED\r\n    if (selectedTile?.tile != null) {\r\n\r\n      // CLICKED SELECTED TILE AGAIN. JUST UNSELECT\r\n      if (isSelected(positionClicked.row, positionClicked.column)) {\r\n        return\r\n      }\r\n      // CLICKED A TARGET - MAKE MOVE\r\n      if (isTarget(positionClicked.row, positionClicked.column)) {\r\n        const selectedPiece = board.getPieceAt(selectedTile.tile)\r\n        // board.makeMove(moveToString(Move(selectedPiece!!.toString(), selectedTile.tile, positionClicked)))\r\n        props.onMakeMove(moveToString(Move(selectedPiece!!.toString(), selectedTile.tile, positionClicked)))\r\n        return\r\n      }\r\n\r\n      // Select a tile + Show Possible Targets\r\n      if (pieceClicked?.color == props.local_player_pieces) {\r\n        setSelectedTile({ tile: positionClicked })\r\n        const targets = Array.from(board.generateAllPossibleTargets(positionClicked))\r\n        setTargetTiles(targets)\r\n      }\r\n    }\r\n    // 2. TILE IS NOT SELECTED\r\n    else {\r\n      // Select a tile + Show Possible Targets\r\n      if (pieceClicked?.color == props.local_player_pieces) {\r\n        setSelectedTile({ tile: positionClicked })\r\n        const targets = Array.from(board.generateAllPossibleTargets(positionClicked))\r\n        setTargetTiles(targets)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div>\r\n        {\r\n          board.board.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"board-row\">\r\n                {row.map((piece, colIdx) => buildTile(rowIdx, colIdx, piece))}\r\n              </div>\r\n            )\r\n          }\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\ChessBoard\\Tile\\Tile.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\ChessBoard\\Piece\\Piece.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\GameCountdown\\GameCountdown.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\GameChat\\GameChat.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\GameInfo\\GameInfo.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\GameButtons\\GameButtons.tsx",["456"],[],"import './GameButtons.css'\r\n\r\nexport default function GameButtons(\r\n  props: {\r\n    gameOver: boolean\r\n  }\r\n) {\r\n  return (\r\n    <div className=\"game-buttons\">\r\n      {!props.gameOver ? <a className=\"game-buttons-forfeit\">Forfeit</a> : null}\r\n    </div>\r\n  )\r\n}","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\GameVS\\GameVS.tsx",["457","458"],[],"import { PieceColor } from '../../../../domain/piece'\r\nimport './GameVS.css'\r\n\r\nexport default function GameVS(\r\n  props: {\r\n    singleplayer: boolean\r\n    local_player_username: string\r\n    local_player_pieces: PieceColor\r\n    opponent_username: string | null\r\n    opponent_pieces: PieceColor | null\r\n  }\r\n) {\r\n\r\n  const local_player_pieces_color = props.local_player_pieces == PieceColor.BLACK\r\n    ? \"BLACK\"\r\n    : \"WHITE\"\r\n\r\n  const opponent_pieces_color = props.opponent_pieces == PieceColor.BLACK\r\n    ? \"BLACK\"\r\n    : \"WHITE\"\r\n\r\n  return (\r\n    <div className=\"game-vs\">\r\n      <div className=\"game-vs-username\">\r\n        {props.local_player_username}\r\n        <h5> [{local_player_pieces_color}] </h5>\r\n      </div>\r\n\r\n      <div className=\"game-vs-vs\">VS</div>\r\n\r\n      <div className=\"game-vs-username\">\r\n        {props.opponent_username !== null ? props.opponent_username : \"N/A\"}\r\n        <h5> [{opponent_pieces_color}] </h5>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\GamePage\\components\\GameHeader\\GameHeader.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\utils\\Alerts\\sa-alerts.ts",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\components\\Navbar\\Navbar.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\components\\Navbar\\AuthButtons\\AuthButtons.tsx",["459","460"],[],"import './AuthButtons.css';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { AppState } from '../../../../../state/reducers/root'\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport PlayerMenu from './PlayerMenu/PlayerMenu';\r\nimport State from '../../../../../state/State';\r\n\r\nfunction AuthButtons() {\r\n    const navigate = useNavigate()\r\n\r\n    const username = useSelector((state: AppState) => state).authentication.username\r\n\r\n    function handleLogin() {\r\n        navigate(\"/login\")\r\n    }\r\n\r\n    function handleLogout() {\r\n        State.logout()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                username !== null ?\r\n                    <>\r\n                        <PlayerMenu username={username} />\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <button className=\"auth-button auth-login-button\" onClick={handleLogin}>\r\n                            Log In\r\n                        </button>\r\n                    </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AuthButtons","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\components\\Navbar\\AuthButtons\\PlayerMenu\\PlayerMenu.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\components\\OpenMPGame\\OpenMPGame.tsx",["461","462","463","464"],[],"import './OpenMPGame.css'\r\nimport '../../../../global-css/switches.css'\r\n\r\nimport { useRef, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nimport Server, { ServerResponse } from '../../../../server/server'\r\nimport Alerts from '../../../../utils/Alerts/sa-alerts'\r\nimport { showGameJoinMessage } from '../../utils'\r\nimport MainPageUtils from '../../utils'\r\n\r\nexport default function OpenMPGame() {\r\n    const navigate = useNavigate()\r\n\r\n    const gameId_input: any = useRef()\r\n    const opponent_input: any = useRef()\r\n\r\n    const [publicGame, setPublicGame] = useState(true)\r\n\r\n    async function handleCreateGame() {\r\n        const gameIdValue = validateGameID(true)\r\n        if (gameIdValue == false) {\r\n            return\r\n        }\r\n\r\n        const opponent_name: string | null =\r\n            publicGame\r\n                ? null\r\n                : opponent_input.current.value\r\n\r\n        if (opponent_name != null && opponent_name.length == 0) {\r\n            Alerts.showNotification(\"Since you chose a private game you need to define an opponent\")\r\n            return\r\n        }\r\n\r\n        const result: ServerResponse = await Server.createGame(gameIdValue, publicGame, opponent_name)\r\n\r\n        if (result.success)\r\n            MainPageUtils.showGameJoinMessage(gameIdValue, navigate)\r\n    }\r\n\r\n    function handleJoinGame() {\r\n        const gameIdValue = validateGameID(true)\r\n        if (gameIdValue == false)\r\n            return\r\n        navigate(`/games/${gameIdValue}`)\r\n    }\r\n\r\n    function validateGameID(showError: boolean = false): false | string {\r\n        const gameIdValue = gameId_input.current.value\r\n        if (!(gameIdValue.length >= 5 && gameIdValue.length <= 20)) {\r\n            if (showError)\r\n                Alerts.showNotification(\"Invalid Game ID. It must have between 5 and 20 characters\")\r\n            return false\r\n        }\r\n        return gameIdValue\r\n    }\r\n\r\n    function handleInputChange() {\r\n        validateGameID()\r\n    }\r\n\r\n    function togglePublic() {\r\n        setPublicGame(!publicGame)\r\n    }\r\n\r\n    return (\r\n        <div className=\"open-game-inner-container\">\r\n            <h3 className=\"header\">Create / Join a Game</h3>\r\n\r\n            <div className=\"entry\">\r\n                <span className=\"key\">Game ID</span>\r\n                <span className=\"value\">\r\n                    <input onChange={handleInputChange} ref={gameId_input} className=\"game-id form-control\" placeholder=\"Game ID\" aria-label=\"Game ID\" aria-describedby=\"basic-addon1\" />\r\n                </span>\r\n            </div>\r\n\r\n            <div className=\"entry\">\r\n                <span className=\"key\">Private</span>\r\n                <span className=\"value\">\r\n                    <label className=\"switch\">\r\n                        <input onClick={togglePublic} type=\"checkbox\" />\r\n                        <span className=\"slider round\"></span>\r\n                    </label>\r\n                </span>\r\n            </div>\r\n            {\r\n                !publicGame ?\r\n                    <div className=\"entry\">\r\n                        <span className=\"key\">\r\n                            Opponent\r\n                        </span>\r\n                        <span className=\"value\">\r\n                            <input onChange={handleInputChange} ref={opponent_input} className=\"game-id form-control\" placeholder=\"Opponent Username\" aria-label=\"Game ID\" aria-describedby=\"basic-addon1\" />\r\n                        </span>\r\n                    </div>\r\n                    : null\r\n            }\r\n\r\n            <div className=\"entry\">\r\n                <button className=\"open-game-btn\" onClick={handleCreateGame}>\r\n                    CREATE\r\n                </button>\r\n                {\r\n                    publicGame ?\r\n                        <button className=\"open-game-btn\" onClick={handleJoinGame}>\r\n                            JOIN\r\n                        </button>\r\n                        : null\r\n                }\r\n            </div>\r\n        </div >\r\n    )\r\n}","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\components\\OpenSPGame\\OpenSPGame.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\onlinechess\\src\\pages\\MainPage\\utils.ts",["465","466"],[],"// Utilitary functions for the MainPage component and inner components\r\n\r\nimport { NavigateFunction } from \"react-router-dom\"\r\nimport { PieceColor, PieceType } from \"../../domain/piece\"\r\nimport Alerts from \"../../utils/Alerts/sa-alerts\"\r\n\r\nexport function showGameJoinMessage(game_id: string, navigate: NavigateFunction) {\r\n    return Alerts.showMessage(\"Game Created\", \"You can now join by clicking on the button below\",\r\n        {\r\n            joinGame: {\r\n                text: 'Join',\r\n                className: 'join-game-btn',\r\n                visible: true\r\n            }\r\n        }, [\r\n        {\r\n            className: \"join-game-btn\",\r\n            eventName: \"click\",\r\n            execute: () => { navigate(`/games/${game_id}`) }\r\n        }\r\n    ])\r\n}\r\n\r\n\r\nconst MainPageUtils = {\r\n    showGameJoinMessage\r\n}\r\n\r\nexport default MainPageUtils\r\n","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\index.tsx",["467","468"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\state\\reducers\\root.ts",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\MainPage.tsx",["469"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\GamePage.tsx",["470","471","472","473","474","475","476","477"],[],"import './GamePage.css'\r\n\r\nimport GameVS from './components/GameVS/GameVS'\r\nimport GameInfo from './components/GameInfo/GameInfo'\r\nimport GameCountdown from './components/GameCountdown/GameCountdown'\r\nimport GameChat from './components/GameChat/GameChat'\r\nimport GameButtons from './components/GameButtons/GameButtons'\r\nimport Board from './components/ChessBoard/Board/Board'\r\nimport GameHeader from './components/GameHeader/GameHeader'\r\n\r\nimport State from '../../state/State'\r\n\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport Alerts from '../../utils/Alerts/sa-alerts'\r\nimport Server, { RemoteGame, ServerError } from '../../server/server'\r\n\r\nimport GamePageUtils from './utils'\r\nimport { BoardError } from '../../domain/errors'\r\nimport Multiplayer, { ClientType, IMultiplayerGS } from './GameState/MultiplayerGS'\r\nimport GameState from './GameState/GameState'\r\nimport Singleplayer from './GameState/Singleplayer'\r\n\r\n// LOW TIME BECAUSE ON DEVELOPMENT\r\nconst UPDATE_GAME_TIMEOUT = 1000\r\n\r\nexport default function GamePage(props: any) {\r\n  const navigate = useNavigate()\r\n\r\n  // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \r\n  const game_id = useParams().game_id!!\r\n  // Am i waiting for the game info to be retreived from the server ?\r\n  const [waiting, setWaiting] = useState(true)\r\n  const [gameState, setGameState] = useState(GameState.defaultGameState)\r\n  const singleplayer = game_id == \"sp\"\r\n  const multiplayerGS = gameState as IMultiplayerGS\r\n\r\n  const local_username = State.getAppState().authentication.username\r\n\r\n  // FIRST RENDER\r\n  useEffect(() => {\r\n    new Promise((resolve, reject) => {\r\n      if (singleplayer) {\r\n        startSingleplayerGame()\r\n        resolve(null)\r\n      } else {\r\n        joinMultiplayerGame().then(() => resolve(null))\r\n      }\r\n    }).then(() => setWaiting(false))\r\n    return () => { }\r\n  }, [])\r\n\r\n  // AUTO-REFRESH CALLS\r\n  const [rr, setrr] = useState(true)\r\n  const forceRR = () => { setrr(!rr) }\r\n  useEffect(() => {\r\n\r\n    while (true) {\r\n      if (singleplayer)\r\n        return\r\n\r\n      // It is Multiplayer Game\r\n      // Dont try update while i dont have the game\r\n      if (waiting)\r\n        return\r\n\r\n      // I'm not a viewer\r\n      // If game is Over\r\n      if (gameState.winner != null)\r\n        return\r\n\r\n      // Always Update if i'm a viewer\r\n      if (multiplayerGS.client_type == ClientType.VIEWER)\r\n        break\r\n\r\n      // Opponent has not been defined yet\r\n      if (multiplayerGS.opponent_username == null)\r\n        break\r\n\r\n      // Game has started + I am a player\r\n      // It's my turn AND \r\n      if (multiplayerGS.board.turn == multiplayerGS.local_pieces)\r\n        return\r\n\r\n      break\r\n    }\r\n    const timer = setTimeout(() => updateMultiplayerGame(), UPDATE_GAME_TIMEOUT)\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [gameState.board, waiting, rr])\r\n\r\n  function startSingleplayerGame() {\r\n    setGameState(Singleplayer.buildSingleplayerGS())\r\n  }\r\n\r\n  /**\r\n   * Join Multiplayer Game\r\n   * Attempts to get the game identified by the ID passed as URI param\r\n   * Based of of the [local_username] + the remote game it knows who we are: WHITE_PIECES, BLACK_PIECES or VIEWER\r\n   * If we are supposed to be the black player and there is no black player yet we tell the server it's us\r\n   * We update the local [gameState] based of of the remote Game we get from the server \r\n   */\r\n  async function joinMultiplayerGame() {\r\n    // const response = await State.joinGame(game_id)\r\n    const response = await Server.getGame(game_id)\r\n\r\n    if (!response.success) {\r\n      await launchCriticalError(response.data)\r\n      return\r\n    }\r\n\r\n    const remoteGame = response.data as RemoteGame\r\n    const clientType = Multiplayer.calcClientType(remoteGame, local_username)\r\n\r\n    if (clientType == ClientType.PLAYER_BLACK && remoteGame.player_b == null) {\r\n      // JOIN AS BLACK\r\n      const joinResponse = await Server.joinAsPlayerB(game_id)\r\n\r\n      if (joinResponse.success) {\r\n        const remoteGameJoin = joinResponse.data as RemoteGame\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGameJoin, clientType))\r\n      } else {\r\n        await launchCriticalError(joinResponse.data)\r\n        return\r\n      }\r\n    } else {\r\n      if (clientType == ClientType.VIEWER) {\r\n        // Increment viewer count\r\n        setGameState(Multiplayer.buildMultiplayerGS(remoteGame.player_w, remoteGame, clientType))\r\n        Server.incrementViewers(game_id)\r\n      } else {\r\n        // WHITE_PIECES PLAYER\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGame, clientType))\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update Multiplayer Game\r\n   * Updates the local game state if the remote game board is different\r\n   */\r\n  async function updateMultiplayerGame() {\r\n    const state = (gameState as IMultiplayerGS)\r\n\r\n    const response = await Server.getGame(state.game_id)\r\n\r\n    forceRR()\r\n\r\n    if (response.success) {\r\n      const remoteGame = response.data as RemoteGame\r\n      const newMultiplayerGS = Multiplayer.updateFromRemote(state, remoteGame)\r\n      if (!GameState.areGameStatesEqual(state, newMultiplayerGS)) {\r\n        setGameState(newMultiplayerGS)\r\n        return\r\n      }\r\n    } else {\r\n      // On error ignore it and gamestate won't be updated.\r\n      return\r\n    }\r\n    // On error ignore it and gamestate won't be updated.\r\n    return\r\n  }\r\n\r\n  /**\r\n   * Handle Make Move\r\n   * Performs a move on the local board and if it succeeds AND we are !singlePlayer validate with the server(updates remote game on success)\r\n   * If on singleplayer just swap the [local_pieces] to play as the opponent\r\n   */\r\n  async function handleMakeMove(move: string) {\r\n    if (gameState.board.turn != gameState.local_pieces) {\r\n      Alerts.showNotification(\"Not your turn!\")\r\n      return\r\n    }\r\n    // Validate move Locally (should never fail)\r\n    try {\r\n      const promotion: boolean = gameState.board.isPromotionMove(move)\r\n      if (promotion) {\r\n        const pieceAsString = await GamePageUtils.askPromotionPiece(gameState.local_pieces)\r\n        const promotionMove = pieceAsString + move.substring(1)\r\n        gameState.board.makeMove(promotionMove)\r\n        // MODIFY CHAR OF THE MOVE TO THE PROMOTION PIECE CHOOSEN\r\n      } else {\r\n        gameState.board.makeMove(move)\r\n      }\r\n    } catch (err) {\r\n      Alerts.showNotification((err as BoardError).message)\r\n      return\r\n    }\r\n    // SINGLEPLAYER\r\n    if (singleplayer) {\r\n      setGameState(Singleplayer.switchTurn(gameState))\r\n      return\r\n    }\r\n    // MULTIPLAYER\r\n    else {\r\n      // Validate with server\r\n      const response = await Server.makeMove(game_id, move)\r\n      if (!response.success) {\r\n        Alerts.showNotification(`Invalid Move: ${(response.data as ServerError).message}`)\r\n        return\r\n      }\r\n      const remoteGame = response.data as RemoteGame\r\n      // Change local state from server game response\r\n      const newGameState = Multiplayer.updateFromRemote(gameState as IMultiplayerGS, remoteGame)\r\n      setGameState(newGameState)\r\n    }\r\n  }\r\n\r\n  function launchCriticalError(err: BoardError | ServerError) {\r\n    return GamePageUtils.showGameError(game_id, navigate, err.message)\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      {\r\n        !waiting ?\r\n          (\r\n            <div className=\"game-container\">\r\n\r\n              <div className=\"game-container-row\">\r\n                <GameHeader singleplayer={singleplayer} game_id={game_id} game_over={gameState.board.winner != null} />\r\n              </div>\r\n\r\n              <hr className=\"separator\" />\r\n\r\n              {\r\n                singleplayer ?\r\n                  <div className=\"singleplayer-piece-turn\">\r\n                    {\r\n                      gameState.board.winner === null ?\r\n                        <>Turn : {gameState.board.turn === 'w' ? 'WHITE' : 'BLACK'}</>\r\n                        :\r\n                        <>\r\n                          {gameState.board.winner === 'w' ? 'WHITE' : 'BLACK'} pieces won!\r\n                          <button onClick={startSingleplayerGame} className=\"green-btn restart\">RESTART</button>\r\n                        </>\r\n                    }\r\n                  </div>\r\n                  : null\r\n              }\r\n\r\n              <div className=\"game-container-row\">\r\n                {\r\n                  !singleplayer ?\r\n                    <>\r\n                      <GameVS\r\n                        singleplayer={singleplayer}\r\n                        local_player_username={multiplayerGS.local_username} local_player_pieces={multiplayerGS.local_pieces}\r\n                        opponent_username={multiplayerGS.opponent_username} opponent_pieces={multiplayerGS.opponent_pieces}\r\n                      />\r\n                      <GameCountdown game_over={gameState.board.winner != null} initalTime={60} />\r\n                    </>\r\n                    : null\r\n                }\r\n              </div>\r\n\r\n              <div className=\"game-container-row\">\r\n                <Board\r\n                  singleplayer={singleplayer}\r\n                  board={gameState.board}\r\n                  local_player_pieces={multiplayerGS.local_pieces}\r\n                  isViewer={multiplayerGS.client_type === ClientType.VIEWER}\r\n                  turn={gameState.board.turn}\r\n                  game_over={gameState.board.winner != null}\r\n                  onMakeMove={handleMakeMove}\r\n                  onError={launchCriticalError}\r\n                />\r\n                {\r\n                  !singleplayer ?\r\n                    <GameChat game_id={game_id} local_player_username={multiplayerGS.local_username} opponent_username={multiplayerGS.opponent_username} />\r\n                    : null\r\n                }\r\n              </div>\r\n\r\n              <div className=\"game-container-row\">\r\n                <GameInfo\r\n                  singleplayer={singleplayer}\r\n                  game_over={multiplayerGS.winner_username != null}\r\n                  turn_username={multiplayerGS.turn_username}\r\n                  winner_username={multiplayerGS.winner_username}\r\n                  winner_pieces={multiplayerGS.winner}\r\n                  opponent_username={multiplayerGS.opponent_username}\r\n                  views={multiplayerGS.views}\r\n                />\r\n\r\n                {\r\n                  !singleplayer ?\r\n                    <GameButtons gameOver={multiplayerGS.winner_username != null} />\r\n                    : null\r\n                }\r\n              </div>\r\n            </div>\r\n          )\r\n          : null\r\n      }\r\n    </div >\r\n  )\r\n}\r\n","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\NotFound\\NotFound.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\Authentication\\Login\\Login.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\Authentication\\Signup\\Signup.tsx",["478"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\state\\State.ts",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\utils.ts",["479","480","481","482"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\server\\server.ts",["483","484","485"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\GameState\\GameState.ts",["486"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\GameState\\MultiplayerGS.ts",["487","488","489","490","491","492","493"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\GameState\\Singleplayer.ts",["494"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\utils\\Alerts\\sa-alerts.ts",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\components\\OpenMPGame\\OpenMPGame.tsx",["495","496","497","498"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\components\\Navbar\\Navbar.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\components\\OpenSPGame\\OpenSPGame.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\GameVS\\GameVS.tsx",["499","500"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\GameCountdown\\GameCountdown.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\GameInfo\\GameInfo.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\GameChat\\GameChat.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\GameButtons\\GameButtons.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\GameHeader\\GameHeader.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\ChessBoard\\Board\\Board.tsx",["501","502","503","504","505","506"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\state\\actions\\action.ts",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\domain\\piece.ts",["507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535"],[],"import { BoardObject } from \"./board\"\r\nimport { MoveObject, Position } from \"./position\"\r\n\r\n/**\r\n * Piece Object\r\n * Schema of a PieceObject\r\n * @property {color} Color of the piece: Black or White\r\n * @property {type} Piece type: Pawn, Rook, Knight, King, Queen, Bishop\r\n\r\n export interface PieceObject {\r\n    color: PieceColor,\r\n    type: PieceType\r\n}\r\n */\r\n/**\r\n * Piece Color\r\n */\r\n\r\nexport enum PieceColor {\r\n    BLACK = 'b',\r\n    WHITE = 'w',\r\n}\r\n\r\nexport function getOpponent(pieceColor: PieceColor) {\r\n    return pieceColor === PieceColor.BLACK ? PieceColor.WHITE : PieceColor.BLACK;\r\n}\r\n\r\n/**\r\n * Select by PieceColor\r\n * @param {piece} PieceObject to evaluate the color from\r\n * @param {ifWhite} Return this value if [piece] is white\r\n * @param {ifBlack} Return this value if [piece] is black\r\n * @returns {ifWhite} if {piece} is white, {ifBlack} if {ifWhite} is black\r\n */\r\nexport function selectByPieceColor<T>(pieceColor: PieceColor, ifWhite: T, ifBlack: T): T {\r\n    return pieceColor === PieceColor.WHITE ? ifWhite : ifBlack\r\n}\r\n\r\n/**\r\n * Piece Type\r\n */\r\nexport enum PieceType {\r\n    PAWN = 'p',\r\n    KING = 'k',\r\n    QUEEN = 'q',\r\n    ROOK = 'r',\r\n    KNIGHT = 'n',\r\n    BISHOP = 'b'\r\n}\r\n\r\nenum Direction { UP, DOWN, LEFT, RIGHT }\r\n\r\nexport enum MoveState { OK, NO_CHANGE, PATH_INVALID, PATH_BLOCKED, DEST_BLOCKED }\r\n\r\nfunction calculateDirection(move: MoveObject) {\r\n    const result = new Set()\r\n\r\n    if (move.end.row < move.start.row)\r\n        result.add(Direction.UP)\r\n    else if (move.end.row > move.start.row)\r\n        result.add(Direction.DOWN)\r\n\r\n    if (move.end.column < move.start.column)\r\n        result.add(Direction.LEFT)\r\n    else if (move.end.column > move.start.column)\r\n        result.add(Direction.RIGHT)\r\n\r\n    return result\r\n}\r\n\r\nexport abstract class Piece {\r\n    abstract color: PieceColor;\r\n    abstract validPath: (move: MoveObject, board: BoardObject) => boolean;\r\n    pathBlocked = (move: MoveObject, board: BoardObject): boolean => {\r\n        const direction = calculateDirection(move)\r\n        const current = Position(move.start.column, move.start.row)\r\n\r\n        while (true) {\r\n            if (direction.has(Direction.UP))\r\n                current.row--\r\n            if (direction.has(Direction.DOWN))\r\n                current.row++\r\n            if (direction.has(Direction.LEFT))\r\n                current.column--\r\n            if (direction.has(Direction.RIGHT))\r\n                current.column++\r\n\r\n            if (current.column == move.end.column && current.row == move.end.row) {\r\n                return false\r\n            }\r\n\r\n            if (board.getPieceAt(current) !== null)\r\n                return true\r\n        }\r\n    };\r\n    destinationBlocked = (move: MoveObject, board: BoardObject): boolean => {\r\n        const other = board.getPieceAt(move.end)\r\n        if (other == null || other == undefined)\r\n            return false\r\n        return other.color == this.color\r\n    };\r\n    checkMove(move: MoveObject, board: BoardObject): MoveState {\r\n        if (move.start == move.end)\r\n            return MoveState.NO_CHANGE\r\n        if (!this.validPath(move, board))\r\n            return MoveState.PATH_INVALID\r\n        if (!(board.getPieceAt(move.start) instanceof Knight) && this.pathBlocked(move, board))\r\n            return MoveState.PATH_BLOCKED\r\n        if (this.destinationBlocked(move, board))\r\n            return MoveState.DEST_BLOCKED\r\n\r\n        return MoveState.OK\r\n    };\r\n    abstract toString(): string;\r\n}\r\n\r\nexport class King extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        const absoluteRow = Math.abs(move.start.row - move.end.row)\r\n        const absoluteColumn = Math.abs(move.start.column - move.end.column)\r\n        return absoluteRow <= 1 && absoluteColumn <= 1\r\n    }\r\n    toString = (): string => this.color == PieceColor.WHITE ? 'K' : 'k'\r\n}\r\n\r\nexport class Rook extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        return move.start.column == move.end.column || move.start.row == move.end.row\r\n    }\r\n    toString = (): string => this.color == PieceColor.WHITE ? 'R' : 'r'\r\n}\r\n\r\nexport class Bishop extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        return Math.abs(move.start.column - move.end.column) == Math.abs(move.start.row - move.end.row)\r\n    }\r\n    toString = (): string => this.color == PieceColor.WHITE ? 'B' : 'b'\r\n}\r\n\r\nexport class Queen extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        return move.start.row == move.end.row\r\n            || move.start.column == move.end.column\r\n            || Math.abs(move.start.row - move.end.row) == Math.abs(move.start.column - move.end.column)\r\n    }\r\n    toString = (): string => this.color == PieceColor.WHITE ? 'Q' : 'q'\r\n}\r\n\r\nexport class Knight extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        return Math.abs(move.end.column - move.start.column) == 2 && Math.abs(move.end.row - move.start.row) == 1\r\n            || Math.abs(move.end.column - move.start.column) == 1 && Math.abs(move.end.row - move.start.row) == 2\r\n    }\r\n    toString = (): string => this.color == PieceColor.WHITE ? 'N' : 'n'\r\n}\r\n\r\nexport class Pawn extends Piece {\r\n\r\n    hasMoved = false\r\n    color: PieceColor\r\n\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        const steps = this.hasMoved ? 1 : 2\r\n        const direction = selectByPieceColor(this.color, -1, 1)\r\n\r\n        return (\r\n            // Vertical movement\r\n            move.start.column == move.end.column\r\n            && (direction == -1 ?\r\n                (board.getPieceAt(move.end) == null && move.start.row > move.end.row && move.start.row - move.end.row <= steps)\r\n                :\r\n                (board.getPieceAt(move.end) == null && move.end.row > move.start.row && move.end.row - move.start.row <= steps)\r\n            )\r\n        )\r\n            ||\r\n            (\r\n                // Horizontal movement\r\n                Math.abs(move.start.column - move.end.column) == 1\r\n                && move.end.row - move.start.row == direction\r\n                && board.getPieceAt(move.end) != null\r\n            )\r\n    }\r\n    toString = (): string => this.color == PieceColor.WHITE ? 'P' : 'p'\r\n}\r\n\r\nconst charPieceMap = {\r\n    'K': King,\r\n    'R': Rook,\r\n    'B': Bishop,\r\n    'Q': Queen,\r\n    'N': Knight,\r\n    'P': Pawn,\r\n}\r\n\r\nexport const charToPiece = (char: string) => {\r\n    const charUpper = char.toUpperCase()\r\n    const color = char === char.toUpperCase() ? PieceColor.WHITE : PieceColor.BLACK\r\n\r\n    for (const entry of Object.entries(charPieceMap)) {\r\n        const pieceChar = entry[0]\r\n        const pieceClass = entry[1]\r\n        if (pieceChar === charUpper) {\r\n            const newPiece = new pieceClass(color)\r\n            return newPiece\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport const pieceToChar = (piece: Piece) => {\r\n    let pieceChar\r\n    if (piece instanceof Knight) {\r\n        pieceChar = 'N'\r\n    }\r\n    else {\r\n        pieceChar = piece.constructor.name[0]\r\n    }\r\n    return selectByPieceColor(piece.color, pieceChar.toUpperCase(), pieceChar.toLowerCase())\r\n}","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\server\\config.ts",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\domain\\board.ts",["536","537","538","539","540","541","542","543","544","545","546","547"],[],"import {\r\n  Piece,\r\n  charToPiece,\r\n  selectByPieceColor,\r\n  PieceColor,\r\n  King,\r\n  Pawn,\r\n  Knight,\r\n  Queen,\r\n  Rook,\r\n  Bishop,\r\n  getOpponent,\r\n  pieceToChar,\r\n  MoveState\r\n} from './piece'\r\nimport { PositionObject, Position, stringToMove, Move, MoveObject, moveToString } from './position'\r\nimport ERROR from './errors'\r\n\r\nexport const BOARD_WIDTH = 8;\r\nexport const BOARD_HEIGHT = 8;\r\n\r\n\r\n/**\r\n * Board Object\r\n * Representation of a board and all it's permitted operations\r\n */\r\nexport class BoardObject {\r\n\r\n  board: Array<Array<Piece | null>> = Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(null));\r\n  winner: PieceColor | null = null\r\n  turn: PieceColor = PieceColor.WHITE\r\n  moves: MoveObject[] = []\r\n\r\n  /**\r\n   * BoardObject Class contructor\r\n   * @param {initBoard} If true it will initialize this.board with pieces at default positions (true by default)\r\n   * @returns A new instance of BoardObject\r\n   */\r\n  constructor(initTurn: PieceColor | null = null, initBoard: boolean = true) {\r\n    if (initBoard) {\r\n      this.initBoard()\r\n    }\r\n    if (initTurn != null) {\r\n      this.turn = initTurn\r\n    }\r\n  }\r\n\r\n  stringMoves() {\r\n    return this.moves.map(move => moveToString(move))\r\n  }\r\n\r\n  /**\r\n   * Initialize Board\r\n   * Set the default rows with the default chess pieces in the current board\r\n   */\r\n  initBoard() {\r\n    // Set White pieces\r\n    this.setRow(\"rnbqkbnr\", 0)\r\n    this.setRow(\"pppppppp\", 1)\r\n    // Set Black pieces\r\n    this.setRow(\"PPPPPPPP\", BOARD_HEIGHT - 2)\r\n    this.setRow(\"RNBQKBNR\", BOARD_HEIGHT - 1)\r\n  }\r\n\r\n  static fromMoves(moves: string[]) {\r\n    const baseBoard = new BoardObject()\r\n    for (const move of moves) {\r\n      baseBoard.makeMove(move)\r\n    }\r\n    return baseBoard\r\n  }\r\n\r\n  /**\r\n   * Set Piece At\r\n   * Set a piece at a certain board position\r\n   * @param {position} Position in the board to put the new piece. Has a row and a column\r\n   * @param {piece} Piece to place at [position] in the board\r\n   * @returns A Piece if there is a piece at [position], null if not\r\n   */\r\n  setPieceAt = (position: PositionObject, piece: Piece | null) => this.board[position.row][position.column] = piece\r\n\r\n  /**\r\n   * Get Piece At\r\n   * Get the piece at a certain board position\r\n   * @param {position} Position in the board. Has a row and a column\r\n   * @returns A Piece if there is a piece at [position], null if not\r\n   */\r\n  getPieceAt = (position: PositionObject): Piece | null => this.board[position.row][position.column]\r\n\r\n  findKingPosition = (): PositionObject | null => {\r\n    for (let row = 0; row < BOARD_HEIGHT; row++) {\r\n      for (let col = 0; col < BOARD_WIDTH; col++) {\r\n        const currentPosition = Position(col, row)\r\n        const currentPiece = this.getPieceAt(currentPosition)\r\n\r\n        if (currentPiece instanceof King && this.turn == currentPiece.color)\r\n          return currentPosition\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  generateAllPossibleTargets = (piecePosition: PositionObject): Set<PositionObject> => {\r\n    const possibleEndPositions = new Set<PositionObject>()\r\n    const piece = this.getPieceAt(piecePosition)\r\n    if (piece === null)\r\n      return possibleEndPositions\r\n\r\n    for (let row = 0; row < BOARD_HEIGHT; row++) {\r\n      for (let col = 0; col < BOARD_WIDTH; col++) {\r\n        const currentPosition = Position(col, row)\r\n        const pieceAtEndPos = this.getPieceAt(Position(col, row))\r\n\r\n        // If piece is from the same player trying to make the move don't try it\r\n        if (pieceAtEndPos != null && pieceAtEndPos.color == piece.color)\r\n          continue\r\n\r\n        const moveState = piece.checkMove(Move(pieceToChar(piece), piecePosition, currentPosition), this)\r\n\r\n        if (moveState == MoveState.OK) {\r\n          possibleEndPositions.add(currentPosition)\r\n        }\r\n      }\r\n    }\r\n    return possibleEndPositions\r\n  }\r\n\r\n  generateSafeKingTargets(): Set<PositionObject> {\r\n    const kingPosition = this.findKingPosition()\r\n\r\n    if (kingPosition == null)\r\n      return new Set<PositionObject>()\r\n\r\n    // Initial King Targets (Mutable set to remove in the end)\r\n    // Could also return a new Set with the exclusion of both Sets\r\n    const possibleKingTargets = this.generateAllPossibleTargets(kingPosition)\r\n\r\n    // Set that will store the suicide positions for the King\r\n    const collisions = new Set<PositionObject>()\r\n\r\n    this.setPieceAt(kingPosition, null)\r\n\r\n    possibleKingTargets.forEach((target) => {\r\n      // Remove King from the board to corretly make the predictions\r\n      // For all the board pieces\r\n      for (let row = 0; row < BOARD_HEIGHT; row++) {\r\n        for (let col = 0; col < BOARD_WIDTH; col++) {\r\n          const enemyPosition = Position(col, row)\r\n          const enemyPiece = this.getPieceAt(enemyPosition)\r\n\r\n          const targetPiece = this.getPieceAt(target)\r\n          this.setPieceAt(target, null)\r\n          /*\r\n           If Enemy Piece Generate it's possible moves and those that match the\r\n           king targets are added to the \"collisions\" Set\r\n           */\r\n          if (enemyPiece != null && enemyPiece.color != this.turn) {\r\n            const possibleEnemyTargets = this.generateAllPossibleTargets(enemyPosition)\r\n            /*\r\n             If piece is a pawn it can only eat in diagonal so moving forward is not a threat to King\r\n             */\r\n            if (enemyPiece instanceof Pawn) {\r\n              const direction = selectByPieceColor(this.turn, -1, 1)\r\n              // Add diagonals as Pawn targets\r\n              if (enemyPosition.column < BOARD_WIDTH - 1)\r\n                possibleEnemyTargets.add(Position(enemyPosition.column + 1, enemyPosition.row - direction))\r\n              if (enemyPosition.column > 0)\r\n                possibleEnemyTargets.add(Position(enemyPosition.column - 1, enemyPosition.row - direction))\r\n\r\n              // Remove targets in which pawn moves vertically\r\n              possibleEnemyTargets.forEach((enemyTarget: PositionObject) => {\r\n                if (enemyTarget.column == enemyPosition.column)\r\n                  possibleEnemyTargets.delete(enemyTarget)\r\n              })\r\n            }\r\n            // Remove suicide targets\r\n            possibleEnemyTargets.forEach((enemyTarget) => {\r\n              possibleKingTargets.forEach(target => {\r\n                if (enemyTarget.column === target.column && enemyTarget.row === target.row)\r\n                  collisions.add(enemyTarget)\r\n              })\r\n            })\r\n          }\r\n          // Put target piece back again\r\n          this.setPieceAt(target, targetPiece)\r\n        }\r\n      }\r\n    })\r\n\r\n    // Put King back to the board after predicting enemy targets\r\n    this.setPieceAt(kingPosition, new King(this.turn))\r\n    /*\r\n     Remove from the King targets the suicide positions\r\n     */\r\n    possibleKingTargets.forEach((kingPos: PositionObject) => {\r\n      collisions.forEach(collision => {\r\n        if (collision.column === kingPos.column && collision.row === kingPos.row)\r\n          possibleKingTargets.delete(kingPos)\r\n      })\r\n    })\r\n    return possibleKingTargets\r\n  }\r\n\r\n  isInCheckMate = () => this.isInCheck() && (this.generateSafeKingTargets().size === 0)\r\n\r\n  isInCheck = (): boolean => {\r\n    const kingPosition = this.findKingPosition()\r\n    if (kingPosition === null) return false\r\n\r\n    for (let row = 0; row < BOARD_HEIGHT; row++) {\r\n      for (let col = 0; col < BOARD_WIDTH; col++) {\r\n        const piecePosition = Position(col, row)\r\n        const piece = this.getPieceAt(piecePosition)\r\n        if (piece != null && piece.color == getOpponent(this.turn)) {\r\n          const possibleMovesForPiece = this.generateAllPossibleTargets(piecePosition)\r\n          possibleMovesForPiece.forEach(move => {\r\n            if (move.column === kingPosition.column && move.row === kingPosition.row)\r\n              return true\r\n          })\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  isPromotionMove = (moveAsString: string) => {\r\n    const move = stringToMove(moveAsString)\r\n    const piece = this.getPieceAt(move.start)\r\n    if (!(piece instanceof Pawn)) {\r\n      return false\r\n    }\r\n    if (this.turn == PieceColor.WHITE && move.end.row == 0) {\r\n      return true\r\n    }\r\n    if (this.turn == PieceColor.BLACK && move.end.row == 7) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  makeMove = (moveAsString: string) => {\r\n    const move = stringToMove(moveAsString)\r\n    const maybePromotionPiece = charToPiece(selectByPieceColor(this.turn, move.pieceChar.toUpperCase(), move.pieceChar.toLowerCase()))!!\r\n    const piece = this.getPieceAt(move.start)\r\n    const capturePiece = this.getPieceAt(move.end)\r\n\r\n    if (this.winner != null) {\r\n      throw ERROR.ALREADY_OVER\r\n    }\r\n\r\n    if (piece === null) throw ERROR.NO_PIECE_AT_START_POSITION\r\n\r\n    /*\r\n    if (!(piece instanceof King) && this.isInCheck()) {\r\n      throw ERROR.KING_IN_CHECK\r\n    }\r\n    */\r\n\r\n    const isPromotion = maybePromotionPiece.toString().toUpperCase() != piece.toString().toUpperCase()\r\n\r\n    if (\r\n      // When true means Promotion\r\n      isPromotion &&\r\n      // Check if it is a Pawn and if it's not a game winning move\r\n      (piece instanceof Pawn) && !(capturePiece instanceof King) &&\r\n      // Check if it's valid promotion piece\r\n      (maybePromotionPiece instanceof Knight || maybePromotionPiece instanceof Queen || maybePromotionPiece instanceof Bishop || maybePromotionPiece instanceof Rook)\r\n    ) {\r\n      // Transform pawn\r\n      this.setPieceAt(move.end, maybePromotionPiece)\r\n      this.setPieceAt(move.start, null)\r\n    } else {\r\n      this.setPieceAt(move.end, piece)\r\n      this.setPieceAt(move.start, null)\r\n    }\r\n\r\n    if (piece instanceof Pawn)\r\n      piece.hasMoved = true\r\n\r\n    // If this move makes the other player's King be in check and with nowhere to go tell board he won\r\n    if (this.isInCheck() && this.generateSafeKingTargets().size === 0)\r\n      this.winner = getOpponent(this.turn)\r\n\r\n    this.turn = getOpponent(this.turn)\r\n\r\n    this.updateWinner()\r\n    this.moves.push(move)\r\n  }\r\n\r\n  updateWinner() {\r\n    if (this.findKingPosition() == null) {\r\n      this.winner = getOpponent(this.turn)\r\n    }\r\n    const backupTurn = this.turn\r\n    this.turn = getOpponent(this.turn)\r\n\r\n    if (this.findKingPosition() == null) {\r\n      this.winner = getOpponent(this.turn)\r\n    }\r\n    this.turn = backupTurn\r\n  }\r\n\r\n  /**\r\n   * Board to String\r\n   * Convert the current board to a string\r\n   * @returns a string representation of this.board\r\n   */\r\n  toString() {\r\n    var boardAsString: string = \"\"\r\n    this.board.map((row, rowIdx) => row.map((col, colIdx) => {\r\n      const piece = this.getPieceAt(Position(colIdx, rowIdx))\r\n      if (piece == null) {\r\n        boardAsString += \" \"\r\n      } else {\r\n        boardAsString += selectByPieceColor(piece.color, piece.toString().toUpperCase(), piece.toString())\r\n      }\r\n    }))\r\n    return boardAsString\r\n  }\r\n\r\n  /**\r\n   * Set Board Row\r\n   * Sets the pieces for a specific row on the board\r\n   * @param {rowStr} Representation of the row as a string of [BOARD_WIDTH] characters\r\n   * @param {rowNum} Row number to identify the row. From 0 to [BOARD_HEIGHT]\r\n   */\r\n  setRow = (rowStr: string, rowNum: number) => {\r\n    for (let colNum = 0; colNum < BOARD_WIDTH; colNum++) {\r\n      const pieceChar = rowStr[colNum]\r\n      if (pieceChar !== undefined) {\r\n        this.setPieceAt(Position(colNum, rowNum), charToPiece(pieceChar))\r\n      }\r\n    }\r\n  }\r\n}","C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\utils.ts",["548","549"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\components\\Navbar\\AuthButtons\\AuthButtons.tsx",["550","551"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\domain\\position.ts",["552","553"],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\ChessBoard\\Tile\\Tile.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\domain\\errors.ts",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\MainPage\\components\\Navbar\\AuthButtons\\PlayerMenu\\PlayerMenu.tsx",[],[],"C:\\Users\\jesus\\Desktop\\PG\\Personal\\1-Web\\TS\\OnlineChess\\chessbackend\\react-ui\\src\\pages\\GamePage\\components\\ChessBoard\\Piece\\Piece.tsx",[],[],{"ruleId":"554","severity":1,"message":"555","line":22,"column":8,"nodeType":"556","messageId":"557","endLine":22,"endColumn":14},{"ruleId":"554","severity":1,"message":"558","line":23,"column":8,"nodeType":"556","messageId":"557","endLine":23,"endColumn":13},{"ruleId":"559","severity":1,"message":"560","line":35,"column":32,"nodeType":"561","messageId":"562","endLine":35,"endColumn":34},{"ruleId":"563","severity":1,"message":"564","line":51,"column":6,"nodeType":"565","endLine":51,"endColumn":8,"suggestions":"566"},{"ruleId":"559","severity":1,"message":"560","line":73,"column":37,"nodeType":"561","messageId":"562","endLine":73,"endColumn":39},{"ruleId":"559","severity":1,"message":"560","line":82,"column":36,"nodeType":"561","messageId":"562","endLine":82,"endColumn":38},{"ruleId":"563","severity":1,"message":"567","line":90,"column":6,"nodeType":"565","endLine":90,"endColumn":36,"suggestions":"568"},{"ruleId":"559","severity":1,"message":"560","line":116,"column":20,"nodeType":"561","messageId":"562","endLine":116,"endColumn":22},{"ruleId":"559","severity":1,"message":"560","line":128,"column":22,"nodeType":"561","messageId":"562","endLine":128,"endColumn":24},{"ruleId":"559","severity":1,"message":"569","line":172,"column":30,"nodeType":"561","messageId":"562","endLine":172,"endColumn":32},{"ruleId":"559","severity":1,"message":"560","line":96,"column":55,"nodeType":"561","messageId":"562","endLine":96,"endColumn":57},{"ruleId":"559","severity":1,"message":"560","line":115,"column":58,"nodeType":"561","messageId":"562","endLine":115,"endColumn":60},{"ruleId":"559","severity":1,"message":"560","line":120,"column":23,"nodeType":"561","messageId":"562","endLine":120,"endColumn":25},{"ruleId":"559","severity":1,"message":"569","line":157,"column":54,"nodeType":"561","messageId":"562","endLine":157,"endColumn":56},{"ruleId":"559","severity":1,"message":"560","line":172,"column":40,"nodeType":"561","messageId":"562","endLine":172,"endColumn":42},{"ruleId":"559","severity":1,"message":"560","line":214,"column":42,"nodeType":"561","messageId":"562","endLine":214,"endColumn":44},{"ruleId":"559","severity":1,"message":"560","line":232,"column":19,"nodeType":"561","messageId":"562","endLine":232,"endColumn":21},{"ruleId":"559","severity":1,"message":"560","line":232,"column":55,"nodeType":"561","messageId":"562","endLine":232,"endColumn":57},{"ruleId":"559","severity":1,"message":"560","line":235,"column":19,"nodeType":"561","messageId":"562","endLine":235,"endColumn":21},{"ruleId":"559","severity":1,"message":"560","line":235,"column":55,"nodeType":"561","messageId":"562","endLine":235,"endColumn":57},{"ruleId":"559","severity":1,"message":"569","line":259,"column":70,"nodeType":"561","messageId":"562","endLine":259,"endColumn":72},{"ruleId":"570","severity":1,"message":"571","line":310,"column":59,"nodeType":"572","messageId":"573","endLine":310,"endColumn":61},{"ruleId":"574","replacedBy":"575"},{"ruleId":"576","replacedBy":"577"},{"ruleId":"559","severity":1,"message":"560","line":88,"column":32,"nodeType":"561","messageId":"562","endLine":88,"endColumn":34},{"ruleId":"559","severity":1,"message":"560","line":88,"column":66,"nodeType":"561","messageId":"562","endLine":88,"endColumn":68},{"ruleId":"559","severity":1,"message":"560","line":98,"column":36,"nodeType":"561","messageId":"562","endLine":98,"endColumn":38},{"ruleId":"559","severity":1,"message":"560","line":100,"column":28,"nodeType":"561","messageId":"562","endLine":100,"endColumn":30},{"ruleId":"559","severity":1,"message":"560","line":103,"column":24,"nodeType":"561","messageId":"562","endLine":103,"endColumn":26},{"ruleId":"559","severity":1,"message":"560","line":138,"column":34,"nodeType":"561","messageId":"562","endLine":138,"endColumn":36},{"ruleId":"559","severity":1,"message":"560","line":138,"column":71,"nodeType":"561","messageId":"562","endLine":138,"endColumn":73},{"ruleId":"559","severity":1,"message":"560","line":150,"column":62,"nodeType":"561","messageId":"562","endLine":150,"endColumn":64},{"ruleId":"559","severity":1,"message":"560","line":162,"column":31,"nodeType":"561","messageId":"562","endLine":162,"endColumn":33},{"ruleId":"559","severity":1,"message":"560","line":163,"column":34,"nodeType":"561","messageId":"562","endLine":163,"endColumn":36},{"ruleId":"559","severity":1,"message":"560","line":164,"column":56,"nodeType":"561","messageId":"562","endLine":164,"endColumn":58},{"ruleId":"559","severity":1,"message":"560","line":176,"column":62,"nodeType":"561","messageId":"562","endLine":176,"endColumn":64},{"ruleId":"578","severity":1,"message":"579","line":176,"column":67,"nodeType":"580","messageId":"581","endLine":176,"endColumn":69},{"ruleId":"559","severity":1,"message":"560","line":176,"column":110,"nodeType":"561","messageId":"562","endLine":176,"endColumn":112},{"ruleId":"578","severity":1,"message":"579","line":177,"column":13,"nodeType":"580","messageId":"581","endLine":177,"endColumn":15},{"ruleId":"578","severity":1,"message":"582","line":177,"column":13,"nodeType":"580","messageId":"581","endLine":177,"endColumn":15},{"ruleId":"559","severity":1,"message":"560","line":177,"column":62,"nodeType":"561","messageId":"562","endLine":177,"endColumn":64},{"ruleId":"578","severity":1,"message":"582","line":177,"column":67,"nodeType":"580","messageId":"581","endLine":177,"endColumn":69},{"ruleId":"559","severity":1,"message":"560","line":177,"column":110,"nodeType":"561","messageId":"562","endLine":177,"endColumn":112},{"ruleId":"559","severity":1,"message":"560","line":197,"column":31,"nodeType":"561","messageId":"562","endLine":197,"endColumn":33},{"ruleId":"559","severity":1,"message":"560","line":198,"column":27,"nodeType":"561","messageId":"562","endLine":198,"endColumn":29},{"ruleId":"559","severity":1,"message":"560","line":207,"column":63,"nodeType":"561","messageId":"562","endLine":207,"endColumn":65},{"ruleId":"559","severity":1,"message":"560","line":208,"column":50,"nodeType":"561","messageId":"562","endLine":208,"endColumn":52},{"ruleId":"559","severity":1,"message":"569","line":27,"column":23,"nodeType":"561","messageId":"562","endLine":27,"endColumn":25},{"ruleId":"559","severity":1,"message":"569","line":69,"column":23,"nodeType":"561","messageId":"562","endLine":69,"endColumn":25},{"ruleId":"554","severity":1,"message":"558","line":7,"column":8,"nodeType":"556","messageId":"557","endLine":7,"endColumn":13},{"ruleId":"554","severity":1,"message":"583","line":11,"column":9,"nodeType":"556","messageId":"557","endLine":11,"endColumn":32},{"ruleId":"554","severity":1,"message":"584","line":1,"column":10,"nodeType":"556","messageId":"557","endLine":1,"endColumn":23},{"ruleId":"559","severity":1,"message":"560","line":43,"column":29,"nodeType":"561","messageId":"562","endLine":43,"endColumn":31},{"ruleId":"559","severity":1,"message":"560","line":59,"column":34,"nodeType":"561","messageId":"562","endLine":59,"endColumn":36},{"ruleId":"574","replacedBy":"585"},{"ruleId":"576","replacedBy":"586"},{"ruleId":"559","severity":1,"message":"560","line":52,"column":47,"nodeType":"561","messageId":"562","endLine":52,"endColumn":49},{"ruleId":"559","severity":1,"message":"560","line":57,"column":47,"nodeType":"561","messageId":"562","endLine":57,"endColumn":49},{"ruleId":"559","severity":1,"message":"560","line":62,"column":47,"nodeType":"561","messageId":"562","endLine":62,"endColumn":49},{"ruleId":"559","severity":1,"message":"560","line":67,"column":47,"nodeType":"561","messageId":"562","endLine":67,"endColumn":49},{"ruleId":"559","severity":1,"message":"560","line":38,"column":51,"nodeType":"561","messageId":"562","endLine":38,"endColumn":53},{"ruleId":"559","severity":1,"message":"560","line":44,"column":37,"nodeType":"561","messageId":"562","endLine":44,"endColumn":39},{"ruleId":"559","severity":1,"message":"560","line":50,"column":31,"nodeType":"561","messageId":"562","endLine":50,"endColumn":33},{"ruleId":"559","severity":1,"message":"560","line":89,"column":51,"nodeType":"561","messageId":"562","endLine":89,"endColumn":53},{"ruleId":"559","severity":1,"message":"560","line":96,"column":31,"nodeType":"561","messageId":"562","endLine":96,"endColumn":33},{"ruleId":"559","severity":1,"message":"560","line":127,"column":18,"nodeType":"561","messageId":"562","endLine":127,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":129,"column":35,"nodeType":"561","messageId":"562","endLine":129,"endColumn":37},{"ruleId":"554","severity":1,"message":"587","line":19,"column":10,"nodeType":"556","messageId":"557","endLine":19,"endColumn":26},{"ruleId":"559","severity":1,"message":"560","line":14,"column":49,"nodeType":"561","messageId":"562","endLine":14,"endColumn":51},{"ruleId":"559","severity":1,"message":"569","line":62,"column":90,"nodeType":"561","messageId":"562","endLine":62,"endColumn":92},{"ruleId":"559","severity":1,"message":"560","line":65,"column":30,"nodeType":"561","messageId":"562","endLine":65,"endColumn":32},{"ruleId":"559","severity":1,"message":"560","line":65,"column":63,"nodeType":"561","messageId":"562","endLine":65,"endColumn":65},{"ruleId":"559","severity":1,"message":"569","line":74,"column":43,"nodeType":"561","messageId":"562","endLine":74,"endColumn":45},{"ruleId":"559","severity":1,"message":"560","line":97,"column":31,"nodeType":"561","messageId":"562","endLine":97,"endColumn":33},{"ruleId":"559","severity":1,"message":"560","line":106,"column":31,"nodeType":"561","messageId":"562","endLine":106,"endColumn":33},{"ruleId":"588","severity":1,"message":"589","line":10,"column":26,"nodeType":"590","endLine":10,"endColumn":62},{"ruleId":"559","severity":1,"message":"560","line":14,"column":63,"nodeType":"561","messageId":"562","endLine":14,"endColumn":65},{"ruleId":"559","severity":1,"message":"560","line":18,"column":55,"nodeType":"561","messageId":"562","endLine":18,"endColumn":57},{"ruleId":"554","severity":1,"message":"591","line":3,"column":23,"nodeType":"556","messageId":"557","endLine":3,"endColumn":34},{"ruleId":"554","severity":1,"message":"592","line":19,"column":14,"nodeType":"556","messageId":"557","endLine":19,"endColumn":26},{"ruleId":"554","severity":1,"message":"593","line":9,"column":10,"nodeType":"556","messageId":"557","endLine":9,"endColumn":29},{"ruleId":"559","severity":1,"message":"560","line":22,"column":25,"nodeType":"561","messageId":"562","endLine":22,"endColumn":27},{"ruleId":"559","severity":1,"message":"560","line":31,"column":59,"nodeType":"561","messageId":"562","endLine":31,"endColumn":61},{"ruleId":"559","severity":1,"message":"560","line":44,"column":25,"nodeType":"561","messageId":"562","endLine":44,"endColumn":27},{"ruleId":"554","severity":1,"message":"594","line":4,"column":10,"nodeType":"556","messageId":"557","endLine":4,"endColumn":20},{"ruleId":"554","severity":1,"message":"595","line":4,"column":22,"nodeType":"556","messageId":"557","endLine":4,"endColumn":31},{"ruleId":"554","severity":1,"message":"555","line":22,"column":8,"nodeType":"556","messageId":"557","endLine":22,"endColumn":14},{"ruleId":"554","severity":1,"message":"558","line":23,"column":8,"nodeType":"556","messageId":"557","endLine":23,"endColumn":13},{"ruleId":"554","severity":1,"message":"583","line":11,"column":9,"nodeType":"556","messageId":"557","endLine":11,"endColumn":32},{"ruleId":"559","severity":1,"message":"560","line":35,"column":32,"nodeType":"561","messageId":"562","endLine":35,"endColumn":34},{"ruleId":"563","severity":1,"message":"564","line":51,"column":6,"nodeType":"565","endLine":51,"endColumn":8,"suggestions":"596"},{"ruleId":"559","severity":1,"message":"560","line":73,"column":37,"nodeType":"561","messageId":"562","endLine":73,"endColumn":39},{"ruleId":"559","severity":1,"message":"560","line":82,"column":36,"nodeType":"561","messageId":"562","endLine":82,"endColumn":38},{"ruleId":"563","severity":1,"message":"567","line":90,"column":6,"nodeType":"565","endLine":90,"endColumn":36,"suggestions":"597"},{"ruleId":"559","severity":1,"message":"560","line":115,"column":20,"nodeType":"561","messageId":"562","endLine":115,"endColumn":22},{"ruleId":"559","severity":1,"message":"560","line":127,"column":22,"nodeType":"561","messageId":"562","endLine":127,"endColumn":24},{"ruleId":"559","severity":1,"message":"569","line":171,"column":30,"nodeType":"561","messageId":"562","endLine":171,"endColumn":32},{"ruleId":"554","severity":1,"message":"558","line":7,"column":8,"nodeType":"556","messageId":"557","endLine":7,"endColumn":13},{"ruleId":"559","severity":1,"message":"560","line":52,"column":47,"nodeType":"561","messageId":"562","endLine":52,"endColumn":49},{"ruleId":"559","severity":1,"message":"560","line":57,"column":47,"nodeType":"561","messageId":"562","endLine":57,"endColumn":49},{"ruleId":"559","severity":1,"message":"560","line":62,"column":47,"nodeType":"561","messageId":"562","endLine":62,"endColumn":49},{"ruleId":"559","severity":1,"message":"560","line":67,"column":47,"nodeType":"561","messageId":"562","endLine":67,"endColumn":49},{"ruleId":"554","severity":1,"message":"584","line":1,"column":10,"nodeType":"556","messageId":"557","endLine":1,"endColumn":23},{"ruleId":"559","severity":1,"message":"560","line":43,"column":29,"nodeType":"561","messageId":"562","endLine":43,"endColumn":31},{"ruleId":"559","severity":1,"message":"560","line":59,"column":34,"nodeType":"561","messageId":"562","endLine":59,"endColumn":36},{"ruleId":"559","severity":1,"message":"560","line":14,"column":49,"nodeType":"561","messageId":"562","endLine":14,"endColumn":51},{"ruleId":"559","severity":1,"message":"560","line":38,"column":51,"nodeType":"561","messageId":"562","endLine":38,"endColumn":53},{"ruleId":"559","severity":1,"message":"560","line":44,"column":37,"nodeType":"561","messageId":"562","endLine":44,"endColumn":39},{"ruleId":"559","severity":1,"message":"560","line":50,"column":31,"nodeType":"561","messageId":"562","endLine":50,"endColumn":33},{"ruleId":"559","severity":1,"message":"560","line":89,"column":51,"nodeType":"561","messageId":"562","endLine":89,"endColumn":53},{"ruleId":"559","severity":1,"message":"560","line":96,"column":31,"nodeType":"561","messageId":"562","endLine":96,"endColumn":33},{"ruleId":"559","severity":1,"message":"560","line":127,"column":18,"nodeType":"561","messageId":"562","endLine":127,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":129,"column":35,"nodeType":"561","messageId":"562","endLine":129,"endColumn":37},{"ruleId":"554","severity":1,"message":"587","line":19,"column":10,"nodeType":"556","messageId":"557","endLine":19,"endColumn":26},{"ruleId":"554","severity":1,"message":"593","line":9,"column":10,"nodeType":"556","messageId":"557","endLine":9,"endColumn":29},{"ruleId":"559","severity":1,"message":"560","line":22,"column":25,"nodeType":"561","messageId":"562","endLine":22,"endColumn":27},{"ruleId":"559","severity":1,"message":"560","line":31,"column":59,"nodeType":"561","messageId":"562","endLine":31,"endColumn":61},{"ruleId":"559","severity":1,"message":"560","line":44,"column":25,"nodeType":"561","messageId":"562","endLine":44,"endColumn":27},{"ruleId":"559","severity":1,"message":"560","line":14,"column":63,"nodeType":"561","messageId":"562","endLine":14,"endColumn":65},{"ruleId":"559","severity":1,"message":"560","line":18,"column":55,"nodeType":"561","messageId":"562","endLine":18,"endColumn":57},{"ruleId":"559","severity":1,"message":"569","line":62,"column":90,"nodeType":"561","messageId":"562","endLine":62,"endColumn":92},{"ruleId":"559","severity":1,"message":"560","line":65,"column":30,"nodeType":"561","messageId":"562","endLine":65,"endColumn":32},{"ruleId":"559","severity":1,"message":"560","line":65,"column":63,"nodeType":"561","messageId":"562","endLine":65,"endColumn":65},{"ruleId":"559","severity":1,"message":"569","line":74,"column":43,"nodeType":"561","messageId":"562","endLine":74,"endColumn":45},{"ruleId":"559","severity":1,"message":"560","line":97,"column":31,"nodeType":"561","messageId":"562","endLine":97,"endColumn":33},{"ruleId":"559","severity":1,"message":"560","line":106,"column":31,"nodeType":"561","messageId":"562","endLine":106,"endColumn":33},{"ruleId":"559","severity":1,"message":"560","line":88,"column":32,"nodeType":"561","messageId":"562","endLine":88,"endColumn":34},{"ruleId":"559","severity":1,"message":"560","line":88,"column":66,"nodeType":"561","messageId":"562","endLine":88,"endColumn":68},{"ruleId":"559","severity":1,"message":"560","line":98,"column":36,"nodeType":"561","messageId":"562","endLine":98,"endColumn":38},{"ruleId":"559","severity":1,"message":"560","line":100,"column":28,"nodeType":"561","messageId":"562","endLine":100,"endColumn":30},{"ruleId":"559","severity":1,"message":"560","line":103,"column":24,"nodeType":"561","messageId":"562","endLine":103,"endColumn":26},{"ruleId":"559","severity":1,"message":"560","line":128,"column":41,"nodeType":"561","messageId":"562","endLine":128,"endColumn":43},{"ruleId":"559","severity":1,"message":"560","line":138,"column":34,"nodeType":"561","messageId":"562","endLine":138,"endColumn":36},{"ruleId":"559","severity":1,"message":"560","line":138,"column":71,"nodeType":"561","messageId":"562","endLine":138,"endColumn":73},{"ruleId":"559","severity":1,"message":"560","line":140,"column":41,"nodeType":"561","messageId":"562","endLine":140,"endColumn":43},{"ruleId":"559","severity":1,"message":"560","line":150,"column":62,"nodeType":"561","messageId":"562","endLine":150,"endColumn":64},{"ruleId":"559","severity":1,"message":"560","line":152,"column":41,"nodeType":"561","messageId":"562","endLine":152,"endColumn":43},{"ruleId":"559","severity":1,"message":"560","line":162,"column":31,"nodeType":"561","messageId":"562","endLine":162,"endColumn":33},{"ruleId":"559","severity":1,"message":"560","line":163,"column":34,"nodeType":"561","messageId":"562","endLine":163,"endColumn":36},{"ruleId":"559","severity":1,"message":"560","line":164,"column":56,"nodeType":"561","messageId":"562","endLine":164,"endColumn":58},{"ruleId":"559","severity":1,"message":"560","line":166,"column":41,"nodeType":"561","messageId":"562","endLine":166,"endColumn":43},{"ruleId":"559","severity":1,"message":"560","line":176,"column":62,"nodeType":"561","messageId":"562","endLine":176,"endColumn":64},{"ruleId":"578","severity":1,"message":"579","line":176,"column":67,"nodeType":"580","messageId":"581","endLine":176,"endColumn":69},{"ruleId":"559","severity":1,"message":"560","line":176,"column":110,"nodeType":"561","messageId":"562","endLine":176,"endColumn":112},{"ruleId":"578","severity":1,"message":"579","line":177,"column":13,"nodeType":"580","messageId":"581","endLine":177,"endColumn":15},{"ruleId":"578","severity":1,"message":"582","line":177,"column":13,"nodeType":"580","messageId":"581","endLine":177,"endColumn":15},{"ruleId":"559","severity":1,"message":"560","line":177,"column":62,"nodeType":"561","messageId":"562","endLine":177,"endColumn":64},{"ruleId":"578","severity":1,"message":"582","line":177,"column":67,"nodeType":"580","messageId":"581","endLine":177,"endColumn":69},{"ruleId":"559","severity":1,"message":"560","line":177,"column":110,"nodeType":"561","messageId":"562","endLine":177,"endColumn":112},{"ruleId":"559","severity":1,"message":"560","line":179,"column":41,"nodeType":"561","messageId":"562","endLine":179,"endColumn":43},{"ruleId":"559","severity":1,"message":"560","line":197,"column":31,"nodeType":"561","messageId":"562","endLine":197,"endColumn":33},{"ruleId":"559","severity":1,"message":"560","line":198,"column":27,"nodeType":"561","messageId":"562","endLine":198,"endColumn":29},{"ruleId":"559","severity":1,"message":"560","line":207,"column":63,"nodeType":"561","messageId":"562","endLine":207,"endColumn":65},{"ruleId":"559","severity":1,"message":"560","line":208,"column":50,"nodeType":"561","messageId":"562","endLine":208,"endColumn":52},{"ruleId":"559","severity":1,"message":"560","line":212,"column":41,"nodeType":"561","messageId":"562","endLine":212,"endColumn":43},{"ruleId":"559","severity":1,"message":"560","line":96,"column":55,"nodeType":"561","messageId":"562","endLine":96,"endColumn":57},{"ruleId":"559","severity":1,"message":"560","line":115,"column":58,"nodeType":"561","messageId":"562","endLine":115,"endColumn":60},{"ruleId":"559","severity":1,"message":"560","line":120,"column":23,"nodeType":"561","messageId":"562","endLine":120,"endColumn":25},{"ruleId":"559","severity":1,"message":"569","line":157,"column":54,"nodeType":"561","messageId":"562","endLine":157,"endColumn":56},{"ruleId":"559","severity":1,"message":"560","line":172,"column":40,"nodeType":"561","messageId":"562","endLine":172,"endColumn":42},{"ruleId":"559","severity":1,"message":"560","line":214,"column":42,"nodeType":"561","messageId":"562","endLine":214,"endColumn":44},{"ruleId":"559","severity":1,"message":"560","line":232,"column":19,"nodeType":"561","messageId":"562","endLine":232,"endColumn":21},{"ruleId":"559","severity":1,"message":"560","line":232,"column":55,"nodeType":"561","messageId":"562","endLine":232,"endColumn":57},{"ruleId":"559","severity":1,"message":"560","line":235,"column":19,"nodeType":"561","messageId":"562","endLine":235,"endColumn":21},{"ruleId":"559","severity":1,"message":"560","line":235,"column":55,"nodeType":"561","messageId":"562","endLine":235,"endColumn":57},{"ruleId":"559","severity":1,"message":"569","line":259,"column":70,"nodeType":"561","messageId":"562","endLine":259,"endColumn":72},{"ruleId":"570","severity":1,"message":"571","line":310,"column":59,"nodeType":"572","messageId":"573","endLine":310,"endColumn":61},{"ruleId":"554","severity":1,"message":"594","line":4,"column":10,"nodeType":"556","messageId":"557","endLine":4,"endColumn":20},{"ruleId":"554","severity":1,"message":"595","line":4,"column":22,"nodeType":"556","messageId":"557","endLine":4,"endColumn":31},{"ruleId":"554","severity":1,"message":"591","line":3,"column":23,"nodeType":"556","messageId":"557","endLine":3,"endColumn":34},{"ruleId":"554","severity":1,"message":"592","line":19,"column":14,"nodeType":"556","messageId":"557","endLine":19,"endColumn":26},{"ruleId":"559","severity":1,"message":"569","line":27,"column":23,"nodeType":"561","messageId":"562","endLine":27,"endColumn":25},{"ruleId":"559","severity":1,"message":"569","line":69,"column":23,"nodeType":"561","messageId":"562","endLine":69,"endColumn":25},"@typescript-eslint/no-unused-vars","'config' is defined but never used.","Identifier","unusedVar","'State' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'joinMultiplayerGame' and 'singleplayer'. Either include them or remove the dependency array.","ArrayExpression",["598"],"React Hook useEffect has missing dependencies: 'gameState.winner', 'multiplayerGS.board.turn', 'multiplayerGS.client_type', 'multiplayerGS.local_pieces', 'multiplayerGS.opponent_username', 'singleplayer', and 'updateMultiplayerGame'. Either include them or remove the dependency array.",["599"],"Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-native-reassign",["600"],"no-negated-in-lhs",["601"],"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","'username' is assigned a value but never used.","'AxiosInstance' is defined but never used.",["600"],["601"],"'isSingleplayerGS' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useDispatch' is defined but never used.","'handleLogout' is defined but never used.","'showGameJoinMessage' is defined but never used.","'PieceColor' is defined but never used.","'PieceType' is defined but never used.",["602"],["603"],{"desc":"604","fix":"605"},{"desc":"606","fix":"607"},"no-global-assign","no-unsafe-negation",{"desc":"604","fix":"608"},{"desc":"606","fix":"609"},"Update the dependencies array to be: [joinMultiplayerGame, singleplayer]",{"range":"610","text":"611"},"Update the dependencies array to be: [gameState.board, waiting, rr, singleplayer, gameState.winner, multiplayerGS.client_type, multiplayerGS.opponent_username, multiplayerGS.board.turn, multiplayerGS.local_pieces, updateMultiplayerGame]",{"range":"612","text":"613"},{"range":"614","text":"611"},{"range":"615","text":"613"},[1918,1920],"[joinMultiplayerGame, singleplayer]",[2878,2908],"[gameState.board, waiting, rr, singleplayer, gameState.winner, multiplayerGS.client_type, multiplayerGS.opponent_username, multiplayerGS.board.turn, multiplayerGS.local_pieces, updateMultiplayerGame]",[1918,1920],[2878,2908]]