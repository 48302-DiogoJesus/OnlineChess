{"ast":null,"code":"// Utilitary functions for the GamePage component\nimport Alerts from \"../../components/Alerts/sa-alerts\";\nimport { PieceColor } from \"../../domain/piece\";\nimport { CLIENT_TYPE } from \"./GamePage\";\nexport function showGameError(game_id, navigate, message) {\n  Alerts.showMessage(`Game Error: \"${game_id}\"`, message, {\n    goBackBtn: {\n      text: 'Go Back',\n      className: 'go-back-btn',\n      visible: true\n    }\n  }, [{\n    className: \"go-back-btn\",\n    eventName: \"click\",\n    execute: () => {\n      navigate('../');\n    }\n  }]);\n}\nexport function calcClientType(gameState, username) {\n  if (username == null) {\n    return CLIENT_TYPE.VIEWER;\n  } else if (username == gameState.player1) {\n    return CLIENT_TYPE.PLAYER_WHITE;\n  } else {\n    // If i am not a viewer and not the game creator (WHITE) then auto join the game as BLACK\n    return CLIENT_TYPE.PLAYER_BLACK;\n  }\n}\nexport function getInternalGameStateFromRemote(clientType, remoteGS) {\n  var local_player_username;\n\n  if (clientType == CLIENT_TYPE.PLAYER_WHITE) {\n    local_player_username = remoteGS.player1;\n  } else if (clientType == CLIENT_TYPE.PLAYER_BLACK) {\n    local_player_username = remoteGS.player2;\n  } else {\n    local_player_username = remoteGS.player1;\n  }\n\n  var local_player_pieces = remoteGS.player1 == local_player_username ? PieceColor.WHITE : PieceColor.BLACK;\n  const opponent_pieces = local_player_pieces == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n  const opponent_username = remoteGS.player1 == local_player_username ? remoteGS.player2 : remoteGS.player1;\n  var winner_pieces = null;\n\n  if (remoteGS.winner != null) {\n    if (remoteGS.winner == local_player_username) {\n      winner_pieces = local_player_pieces;\n    } else {\n      winner_pieces = opponent_pieces;\n    }\n  }\n\n  const turn_username = remoteGS.turn == local_player_pieces ? local_player_username : opponent_username;\n  return {\n    game: {\n      id: remoteGS._id,\n      local_player_username: local_player_username,\n      local_player_pieces: local_player_pieces,\n      opponent_username: opponent_username,\n      opponent_pieces: opponent_pieces,\n      winner_username: remoteGS.winner,\n      winner_pieces: winner_pieces,\n      turn_username: turn_username != null ? turn_username : 'Opponent'\n    },\n    client_type: clientType\n  };\n}\nexport function compareObjects(object1, object2) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n    const areObjects = isObject(val1) && isObject(val2);\n\n    if (areObjects && !deepEqual(val1, val2) || !areObjects && val1 !== val2) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isObject(object) {\n  return object != null && typeof object === 'object';\n}\n\nconst GamePageUtils = {\n  showGameError,\n  calcClientType,\n  getInternalGameStateFromRemote\n};\nexport default GamePageUtils;","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/utils.ts"],"names":["Alerts","PieceColor","CLIENT_TYPE","showGameError","game_id","navigate","message","showMessage","goBackBtn","text","className","visible","eventName","execute","calcClientType","gameState","username","VIEWER","player1","PLAYER_WHITE","PLAYER_BLACK","getInternalGameStateFromRemote","clientType","remoteGS","local_player_username","player2","local_player_pieces","WHITE","BLACK","opponent_pieces","opponent_username","winner_pieces","winner","turn_username","turn","game","id","_id","winner_username","client_type","compareObjects","object1","object2","keys1","Object","keys","keys2","length","key","val1","val2","areObjects","isObject","deepEqual","object","GamePageUtils"],"mappings":"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","sourcesContent":["// Utilitary functions for the GamePage component\r\n\r\nimport { NavigateFunction } from \"react-router-dom\"\r\nimport Alerts from \"../../components/Alerts/sa-alerts\"\r\nimport { PieceColor } from \"../../domain/piece\"\r\nimport { RemoteGame } from \"../../state/reducers/root\"\r\nimport { CLIENT_TYPE, InternalGameStateWrapper } from \"./GamePage\"\r\n\r\nexport function showGameError(game_id: string, navigate: NavigateFunction, message: string) {\r\n    Alerts.showMessage(`Game Error: \"${game_id}\"`, message,\r\n        {\r\n            goBackBtn: {\r\n                text: 'Go Back',\r\n                className: 'go-back-btn',\r\n                visible: true\r\n            }\r\n        }, [\r\n        {\r\n            className: \"go-back-btn\",\r\n            eventName: \"click\",\r\n            execute: () => { navigate('../') }\r\n        }\r\n    ])\r\n}\r\n\r\nexport function calcClientType(gameState: RemoteGame, username: string | null): CLIENT_TYPE {\r\n    if (username == null) {\r\n        return CLIENT_TYPE.VIEWER\r\n    } else if (username == gameState.player1) {\r\n        return CLIENT_TYPE.PLAYER_WHITE\r\n    } else {\r\n        // If i am not a viewer and not the game creator (WHITE) then auto join the game as BLACK\r\n        return CLIENT_TYPE.PLAYER_BLACK\r\n    }\r\n}\r\n\r\n\r\nexport function getInternalGameStateFromRemote(\r\n    clientType: CLIENT_TYPE,\r\n    remoteGS: RemoteGame\r\n): InternalGameStateWrapper {\r\n    var local_player_username: string | null\r\n\r\n    if (clientType == CLIENT_TYPE.PLAYER_WHITE) {\r\n        local_player_username = remoteGS.player1\r\n    }\r\n    else if (clientType == CLIENT_TYPE.PLAYER_BLACK) {\r\n        local_player_username = remoteGS.player2!!\r\n    } else {\r\n        local_player_username = remoteGS.player1\r\n    }\r\n\r\n    var local_player_pieces = remoteGS.player1 == local_player_username ? PieceColor.WHITE : PieceColor.BLACK\r\n    const opponent_pieces = local_player_pieces == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE\r\n\r\n    const opponent_username = remoteGS.player1 == local_player_username ? remoteGS.player2 : remoteGS.player1\r\n\r\n    var winner_pieces = null\r\n\r\n    if (remoteGS.winner != null) {\r\n        if (remoteGS.winner == local_player_username) {\r\n            winner_pieces = local_player_pieces\r\n        } else {\r\n            winner_pieces = opponent_pieces\r\n        }\r\n    }\r\n\r\n    const turn_username = remoteGS.turn == local_player_pieces ? local_player_username : opponent_username\r\n\r\n    return {\r\n        game: {\r\n            id: remoteGS._id,\r\n\r\n            local_player_username: local_player_username,\r\n            local_player_pieces: local_player_pieces,\r\n\r\n            opponent_username: opponent_username,\r\n            opponent_pieces: opponent_pieces,\r\n\r\n            winner_username: remoteGS.winner,\r\n            winner_pieces: winner_pieces,\r\n\r\n            turn_username: turn_username != null ? turn_username : 'Opponent',\r\n        },\r\n        client_type: clientType,\r\n    }\r\n}\r\n\r\nexport function compareObjects(object1: any, object2: any) {\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        const val2 = object2[key];\r\n        const areObjects = isObject(val1) && isObject(val2);\r\n        if (\r\n            areObjects && !deepEqual(val1, val2) ||\r\n            !areObjects && val1 !== val2\r\n        ) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(object: any) {\r\n    return object != null && typeof object === 'object';\r\n}\r\n\r\nconst GamePageUtils = {\r\n    showGameError,\r\n    calcClientType,\r\n    getInternalGameStateFromRemote\r\n}\r\n\r\nexport default GamePageUtils\r\n"]},"metadata":{},"sourceType":"module"}