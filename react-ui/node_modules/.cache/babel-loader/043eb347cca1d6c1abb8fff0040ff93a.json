{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\pages\\\\GamePage\\\\GamePage.tsx\",\n    _s = $RefreshSig$();\n\nimport './GamePage.css';\nimport GameVS from '../../components/GameVS/GameVS';\nimport GameInfo from '../../components/GameInfo/GameInfo';\nimport GameCountdown from '../../components/GameCountdown/GameCountdown';\nimport GameChat from '../../components/GameChat/GameChat';\nimport GameButtons from '../../components/GameButtons/GameButtons';\nimport Board from '../../components/ChessBoard/Board/Board';\nimport State from '../../state/State';\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport Alerts from '../../components/Alerts/sa-alerts';\nimport Server from '../../server/server';\nimport GamePageUtils from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGameState = {\n  game: null\n};\nexport let CLIENT_TYPE; // LOW TIME BECAUSE ON DEVELOPMENT\n\n(function (CLIENT_TYPE) {\n  CLIENT_TYPE[CLIENT_TYPE[\"PLAYER_WHITE\"] = 0] = \"PLAYER_WHITE\";\n  CLIENT_TYPE[CLIENT_TYPE[\"PLAYER_BLACK\"] = 1] = \"PLAYER_BLACK\";\n  CLIENT_TYPE[CLIENT_TYPE[\"VIEWER\"] = 2] = \"VIEWER\";\n  CLIENT_TYPE[CLIENT_TYPE[\"UNKNOWN\"] = 3] = \"UNKNOWN\";\n})(CLIENT_TYPE || (CLIENT_TYPE = {}));\n\nconst UPDATE_GAME_TIMEOUT = 1000;\nexport default function GamePage(props) {\n  _s();\n\n  const navigate = useNavigate(); // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \n\n  const game_id = useParams().game_id;\n  const [gameState, setGameState] = useState(initialGameState);\n  const username = State.GetAppState().authentication.username;\n  const [clientType, setClientType] = useState(CLIENT_TYPE.UNKNOWN); // console.log(gameState.game)\n  // console.log(CLIENT_TYPE[clientType])\n  // Run when the component first renders\n\n  useEffect(() => {\n    joinGame();\n    setInterval(updateFromRemote, UPDATE_GAME_TIMEOUT);\n  }, []);\n\n  async function updateFromRemote() {\n    var _gameState$game;\n\n    console.log(`updating from: ${gameState.game}`);\n    if (((_gameState$game = gameState.game) === null || _gameState$game === void 0 ? void 0 : _gameState$game.id) == null) return; // Do not auto-refresh if it's MY turn\n\n    if (gameState.game.turn_username == username) return;\n    const response = await Server.getGame(gameState.game.id);\n\n    if (response.success) {\n      setGameState(GamePageUtils.getInternalGameStateFromRemote(clientType, response.data));\n    } else {\n      const error = response.data;\n      GamePageUtils.showGameError(game_id, navigate, error.message);\n    }\n  }\n\n  async function joinGame() {\n    const response = await State.joinGame(game_id);\n\n    if (response.success) {\n      const remoteGame = response.data;\n      const clientType = GamePageUtils.calcClientType(remoteGame, username);\n      setClientType(clientType);\n\n      if (clientType == CLIENT_TYPE.PLAYER_BLACK) {\n        // Tell the server i am the PLAYER_BLACK\n        Server.connectToGame(game_id).then(res => {\n          if (res.success) {\n            const upGame = res.data;\n            setGameState(GamePageUtils.getInternalGameStateFromRemote(clientType, upGame));\n          } else {\n            Alerts.showNotification(res.data.message);\n          }\n        });\n      } else {\n        setGameState(GamePageUtils.getInternalGameStateFromRemote(clientType, remoteGame));\n        setInterval(() => console.log(gameState), 1000);\n      }\n    } else {\n      const errorResponse = response.data;\n      GamePageUtils.showGameError(game_id, navigate, errorResponse.message);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global-container\",\n    children: gameState.game == null ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"game-id-header\",\n          children: [\"Game ID : \", gameState.game.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameVS, {\n          player1: gameState.game.local_player_username,\n          player2: gameState.game.opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameCountdown, {\n          initalTime: 60\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameChat, {\n          game_id: game_id,\n          player1: gameState.game.local_player_username,\n          player2: gameState.game.opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameInfo, {\n          turn_username: gameState.game.turn_username,\n          opponent_username: gameState.game.opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameButtons, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamePage, \"jjKlLx2jAEr/6RGZCGgpyvIgB/E=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = GamePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/GamePage.tsx"],"names":["GameVS","GameInfo","GameCountdown","GameChat","GameButtons","Board","State","useParams","useNavigate","useEffect","useState","Alerts","Server","GamePageUtils","initialGameState","game","CLIENT_TYPE","UPDATE_GAME_TIMEOUT","GamePage","props","navigate","game_id","gameState","setGameState","username","GetAppState","authentication","clientType","setClientType","UNKNOWN","joinGame","setInterval","updateFromRemote","console","log","id","turn_username","response","getGame","success","getInternalGameStateFromRemote","data","error","showGameError","message","remoteGame","calcClientType","PLAYER_BLACK","connectToGame","then","res","upGame","showNotification","errorResponse","local_player_username","opponent_username"],"mappings":"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","sourcesContent":["import './GamePage.css'\r\n\r\nimport GameVS from '../../components/GameVS/GameVS'\r\nimport GameInfo from '../../components/GameInfo/GameInfo'\r\nimport GameCountdown from '../../components/GameCountdown/GameCountdown'\r\nimport GameChat from '../../components/GameChat/GameChat'\r\nimport GameButtons from '../../components/GameButtons/GameButtons'\r\nimport Board from '../../components/ChessBoard/Board/Board'\r\n\r\nimport { RemoteGame } from '../../state/reducers/root'\r\nimport State from '../../state/State'\r\n\r\nimport { useParams, useNavigate, NavigateFunction } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport Alerts from '../../components/Alerts/sa-alerts'\r\nimport { PieceColor } from '../../domain/piece'\r\nimport Server, { ServerResponse, ServerError } from '../../server/server'\r\nimport { sleep } from '../../utils/utils'\r\n\r\nimport GamePageUtils from './utils'\r\n\r\n\r\ninterface IntGameState {\r\n  id: string | null\r\n  local_player_username: string\r\n  local_player_pieces: PieceColor\r\n\r\n  opponent_username: string | null\r\n  opponent_pieces: PieceColor | null\r\n\r\n  winner_username: string | null\r\n  winner_pieces: PieceColor | null\r\n\r\n  turn_username: string\r\n}\r\n\r\nexport interface InternalGameStateWrapper {\r\n  game: IntGameState | null\r\n}\r\n\r\nconst initialGameState: InternalGameStateWrapper = {\r\n  game: null\r\n}\r\n\r\nexport enum CLIENT_TYPE {\r\n  PLAYER_WHITE,\r\n  PLAYER_BLACK,\r\n  VIEWER,\r\n  UNKNOWN\r\n}\r\n\r\n// LOW TIME BECAUSE ON DEVELOPMENT\r\nconst UPDATE_GAME_TIMEOUT = 1000\r\n\r\nexport default function GamePage(props: any) {\r\n\r\n  const navigate = useNavigate()\r\n  // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \r\n  const game_id = useParams().game_id!!\r\n  const [gameState, setGameState] = useState(initialGameState)\r\n  const username = State.GetAppState().authentication.username\r\n  const [clientType, setClientType] = useState(CLIENT_TYPE.UNKNOWN)\r\n\r\n  // console.log(gameState.game)\r\n  // console.log(CLIENT_TYPE[clientType])\r\n\r\n  // Run when the component first renders\r\n  useEffect(() => {\r\n    joinGame()\r\n\r\n    setInterval(updateFromRemote, UPDATE_GAME_TIMEOUT)\r\n\r\n  }, [])\r\n\r\n  async function updateFromRemote() {\r\n    console.log(`updating from: ${gameState.game}`)\r\n    if (gameState.game?.id == null)\r\n      return\r\n    // Do not auto-refresh if it's MY turn\r\n    if (gameState.game.turn_username == username)\r\n      return\r\n    const response = await Server.getGame(gameState.game.id)\r\n\r\n    if (response.success) {\r\n      setGameState(GamePageUtils.getInternalGameStateFromRemote(clientType, response.data as RemoteGame))\r\n    } else {\r\n      const error = response.data as ServerError\r\n      GamePageUtils.showGameError(game_id, navigate, error.message)\r\n    }\r\n  }\r\n\r\n  async function joinGame() {\r\n    const response = await State.joinGame(game_id)\r\n\r\n    if (response.success) {\r\n      const remoteGame = response.data as RemoteGame\r\n      const clientType = GamePageUtils.calcClientType(remoteGame, username)\r\n\r\n      setClientType(clientType)\r\n\r\n      if (clientType == CLIENT_TYPE.PLAYER_BLACK) {\r\n        // Tell the server i am the PLAYER_BLACK\r\n        Server.connectToGame(game_id)\r\n          .then(res => {\r\n            if (res.success) {\r\n              const upGame = res.data as RemoteGame\r\n              setGameState(GamePageUtils.getInternalGameStateFromRemote(clientType, upGame))\r\n            } else {\r\n              Alerts.showNotification((res.data as ServerError).message)\r\n            }\r\n          })\r\n      } else {\r\n        setGameState(GamePageUtils.getInternalGameStateFromRemote(clientType, remoteGame))\r\n        setInterval(() => console.log(gameState), 1000)\r\n      }\r\n    } else {\r\n      const errorResponse = response.data as ServerError\r\n      GamePageUtils.showGameError(game_id, navigate, errorResponse.message)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      {\r\n        gameState.game == null ? (\r\n          null\r\n        ) : (\r\n          <div className=\"game-container\">\r\n            <div className=\"game-container-row\">\r\n              <h1 className=\"game-id-header\">Game ID : {gameState.game.id}</h1>\r\n            </div>\r\n            <div className=\"game-container-row\">\r\n              <GameVS player1={gameState.game.local_player_username} player2={gameState.game.opponent_username} />\r\n              <GameCountdown initalTime={60} />\r\n            </div>\r\n            <div className=\"game-container-row\">\r\n              <Board />\r\n              <GameChat game_id={game_id} player1={gameState.game.local_player_username} player2={gameState.game.opponent_username} />\r\n            </div>\r\n            <div className=\"game-container-row\">\r\n              <GameInfo turn_username={gameState.game.turn_username} opponent_username={gameState.game.opponent_username} />\r\n              <GameButtons />\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    </div >\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}