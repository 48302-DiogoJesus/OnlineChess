{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\pages\\\\GamePage\\\\GamePage.tsx\",\n    _s = $RefreshSig$();\n\nimport './GamePage.css';\nimport GameVS from './components/GameVS/GameVS';\nimport GameInfo from './components/GameInfo/GameInfo';\nimport GameCountdown from './components/GameCountdown/GameCountdown';\nimport GameChat from './components/GameChat/GameChat';\nimport GameButtons from './components/GameButtons/GameButtons';\nimport Board from './components/ChessBoard/Board/Board';\nimport GameHeader from './components/GameHeader/GameHeader';\nimport State from '../../state/State';\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport Alerts from '../../utils/Alerts/sa-alerts';\nimport Server from '../../server/server';\nimport GamePageUtils from './utils';\nimport Multiplayer, { ClientType } from './GameState/MultiplayerGS';\nimport GameState from './GameState/GameState';\nimport Singleplayer from './GameState/Singleplayer'; // LOW TIME BECAUSE ON DEVELOPMENT\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UPDATE_GAME_TIMEOUT = 1000;\nexport default function GamePage(props) {\n  _s();\n\n  const navigate = useNavigate(); // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \n\n  const game_id = useParams().game_id;\n  const [waiting, setWaiting] = useState(true);\n  const [gameState, setGameState] = useState(GameState.defaultGameState);\n  const local_username = State.getAppState().authentication.username;\n  const singleplayer = game_id == \"sp\";\n  const multiplayerGS = gameState; // FIRST RENDER\n\n  useEffect(() => {\n    new Promise((resolve, reject) => {\n      if (singleplayer) {\n        startSingleplayerGame();\n        resolve(null);\n      } else {\n        joinMultiplayerGame().then(() => resolve(null));\n      }\n    });\n    return () => {};\n  }, []); // AUTO-REFRESH CALLS\n\n  const [rr, setrr] = useState(true);\n\n  const forceRR = () => {\n    setrr(!rr);\n  };\n\n  useEffect(() => {\n    // Do not refresh if in SINGLEPLAYER || Game is over\n    if (singleplayer || gameState.winner != null) return;\n    const timer = setTimeout(() => updateMultiplayerGame(), UPDATE_GAME_TIMEOUT);\n    return () => clearTimeout(timer);\n  }, [gameState.board, rr]);\n\n  function startSingleplayerGame() {\n    setGameState(Singleplayer.buildSingleplayerGS());\n  }\n  /**\r\n   * Join Multiplayer Game\r\n   * Attempts to get the game identified by the ID passed as URI param\r\n   * Based of of the [local_username] + the remote game it knows who we are: WHITE_PIECES, BLACK_PIECES or VIEWER\r\n   * If we are supposed to be the black player and there is no black player yet we tell the server it's us\r\n   * We update the local [gameState] based of of the remote Game we get from the server \r\n   */\n\n\n  async function joinMultiplayerGame() {\n    // const response = await State.joinGame(game_id)\n    const response = await Server.getGame(game_id);\n\n    if (!response.success) {\n      Alerts.showNotification(response.data.message);\n      return;\n    }\n\n    const remoteGame = response.data;\n    const clientType = Multiplayer.calcClientType(remoteGame, local_username);\n\n    if (clientType == ClientType.PLAYER_BLACK && remoteGame.player_b == null) {\n      const joinResponse = await Server.connectToGame(game_id);\n\n      if (joinResponse.success) {\n        const remoteGameJoin = joinResponse.data;\n        setGameState(Multiplayer.buildMultiplayerGS(local_username, remoteGameJoin, clientType));\n      } else {\n        Alerts.showNotification(joinResponse.data.message);\n        return;\n      }\n    } else {\n      if (clientType == ClientType.VIEWER) {\n        // Increment viewer count\n        setGameState(Multiplayer.buildMultiplayerGS(remoteGame.player_w, remoteGame, clientType));\n        Server.incrementViewers(game_id);\n      } else {\n        // WHITE_PIECES PLAYER\n        setGameState(Multiplayer.buildMultiplayerGS(local_username, remoteGame, clientType));\n        return;\n      }\n    }\n  }\n  /**\r\n   * Update Multiplayer Game\r\n   * Updates the local game state if the remote game board is different\r\n   */\n\n\n  async function updateMultiplayerGame() {\n    const state = gameState; // My turn. Do not refresh\n\n    if (state.board.turn == state.local_pieces && state.opponent_username != null) return;\n    const response = await Server.getGame(state.game_id);\n    forceRR();\n\n    if (response.success) {\n      const remoteGame = response.data;\n      const newMultiplayerGS = Multiplayer.updateFromRemote(state, remoteGame);\n\n      if (!GameState.areGameStatesEqual(state, newMultiplayerGS)) {\n        setGameState(newMultiplayerGS);\n        return;\n      }\n    } else {\n      // On error ignore it and gamestate won't be updated.\n      return;\n    } // On error ignore it and gamestate won't be updated.\n\n\n    return;\n  }\n  /**\r\n   * Handle Make Move\r\n   * Performs a move on the local board and if it succeeds AND we are !singlePlayer validate with the server(updates remote game on success)\r\n   * If on singleplayer just swap the [local_pieces] to play as the opponent\r\n   */\n\n\n  async function handleMakeMove(move) {\n    if (gameState.board.turn != gameState.local_pieces) {\n      Alerts.showNotification(\"Not your turn!\");\n      return;\n    } // Validate move Locally (should never fail)\n\n\n    try {\n      gameState.board.makeMove(move);\n    } catch (err) {\n      Alerts.showNotification(err.message);\n      return;\n    } // SINGLEPLAYER\n\n\n    if (singleplayer) {\n      setGameState(Singleplayer.switchTurn(gameState));\n      return;\n    } // MULTIPLAYER\n    else {\n      // Validate with server\n      const response = await Server.makeMove(game_id, move);\n\n      if (!response.success) {\n        Alerts.showNotification(`Invalid Move: ${response.data.message}`);\n        return;\n      }\n\n      const remoteGame = response.data; // Change local state from server game response\n\n      const newGameState = Multiplayer.updateFromRemote(gameState, remoteGame);\n      setGameState(newGameState);\n    }\n  } // MIGHT GET REMOVED\n\n\n  function launchCriticalError(err) {\n    GamePageUtils.showGameError(game_id, navigate, err.message);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global-container\",\n    children: !waiting ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: /*#__PURE__*/_jsxDEV(GameHeader, {\n          singleplayer: singleplayer,\n          game_id: game_id,\n          game_over: gameState.board.winner != null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"separator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 15\n      }, this), singleplayer ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"singleplayer-piece-turn\",\n        children: gameState.board.winner === null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Turn : \", gameState.board.turn === 'w' ? 'WHITE' : 'BLACK']\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [gameState.board.winner === 'w' ? 'WHITE' : 'BLACK', \" pieces won!\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: startSingleplayerGame,\n            className: \"green-btn restart\",\n            children: \"RESTART\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 19\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: !singleplayer ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(GameVS, {\n            singleplayer: singleplayer,\n            local_player_username: multiplayerGS.local_username,\n            local_player_pieces: multiplayerGS.local_pieces,\n            opponent_username: multiplayerGS.opponent_username,\n            opponent_pieces: multiplayerGS.opponent_pieces\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(GameCountdown, {\n            game_over: gameState.board.winner != null,\n            initalTime: 60\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          singleplayer: singleplayer,\n          board: gameState.board,\n          local_player_pieces: multiplayerGS.local_pieces,\n          turn: gameState.board.turn,\n          game_over: gameState.board.winner != null,\n          onMakeMove: handleMakeMove,\n          onError: launchCriticalError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 17\n        }, this), !singleplayer ? /*#__PURE__*/_jsxDEV(GameChat, {\n          game_id: game_id,\n          local_player_username: multiplayerGS.local_username,\n          opponent_username: multiplayerGS.opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameInfo, {\n          singleplayer: singleplayer,\n          game_over: multiplayerGS.winner_username != null,\n          turn_username: multiplayerGS.turn_username,\n          winner_username: multiplayerGS.winner_username,\n          winner_pieces: multiplayerGS.winner,\n          opponent_username: multiplayerGS.opponent_username,\n          views: multiplayerGS.views\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 17\n        }, this), !singleplayer ? /*#__PURE__*/_jsxDEV(GameButtons, {\n          gameOver: multiplayerGS.winner_username != null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamePage, \"let8Tbldld5iadX8Xn/ApGkvoaA=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = GamePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/GamePage.tsx"],"names":["GameVS","GameInfo","GameCountdown","GameChat","GameButtons","Board","GameHeader","State","useParams","useNavigate","useEffect","useState","Alerts","Server","GamePageUtils","Multiplayer","ClientType","GameState","Singleplayer","UPDATE_GAME_TIMEOUT","GamePage","props","navigate","game_id","waiting","setWaiting","gameState","setGameState","defaultGameState","local_username","getAppState","authentication","username","singleplayer","multiplayerGS","Promise","resolve","reject","startSingleplayerGame","joinMultiplayerGame","then","rr","setrr","forceRR","winner","timer","setTimeout","updateMultiplayerGame","clearTimeout","board","buildSingleplayerGS","response","getGame","success","showNotification","data","message","remoteGame","clientType","calcClientType","PLAYER_BLACK","player_b","joinResponse","connectToGame","remoteGameJoin","buildMultiplayerGS","VIEWER","player_w","incrementViewers","state","turn","local_pieces","opponent_username","newMultiplayerGS","updateFromRemote","areGameStatesEqual","handleMakeMove","move","makeMove","err","switchTurn","newGameState","launchCriticalError","showGameError","opponent_pieces","winner_username","turn_username","views"],"mappings":"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","sourcesContent":["import './GamePage.css'\r\n\r\nimport GameVS from './components/GameVS/GameVS'\r\nimport GameInfo from './components/GameInfo/GameInfo'\r\nimport GameCountdown from './components/GameCountdown/GameCountdown'\r\nimport GameChat from './components/GameChat/GameChat'\r\nimport GameButtons from './components/GameButtons/GameButtons'\r\nimport Board from './components/ChessBoard/Board/Board'\r\nimport GameHeader from './components/GameHeader/GameHeader'\r\n\r\nimport State from '../../state/State'\r\n\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport Alerts from '../../utils/Alerts/sa-alerts'\r\nimport Server, { RemoteGame, ServerError } from '../../server/server'\r\n\r\nimport GamePageUtils from './utils'\r\nimport { BoardError } from '../../domain/errors'\r\nimport Multiplayer, { ClientType, IMultiplayerGS } from './GameState/MultiplayerGS'\r\nimport GameState from './GameState/GameState'\r\nimport Singleplayer from './GameState/Singleplayer'\r\n\r\n// LOW TIME BECAUSE ON DEVELOPMENT\r\nconst UPDATE_GAME_TIMEOUT = 1000\r\n\r\nexport default function GamePage(props: any) {\r\n  const navigate = useNavigate()\r\n  // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \r\n  const game_id = useParams().game_id!!\r\n  const [waiting, setWaiting] = useState(true)\r\n  const [gameState, setGameState] = useState(GameState.defaultGameState)\r\n  const local_username = State.getAppState().authentication.username\r\n  const singleplayer = game_id == \"sp\"\r\n  const multiplayerGS = gameState as IMultiplayerGS\r\n\r\n  // FIRST RENDER\r\n  useEffect(() => {\r\n    new Promise((resolve, reject) => {\r\n\r\n      if (singleplayer) {\r\n        startSingleplayerGame()\r\n        resolve(null)\r\n      } else {\r\n        joinMultiplayerGame().then(() => resolve(null))\r\n      }\r\n    })\r\n    return () => { }\r\n  }, [])\r\n\r\n  // AUTO-REFRESH CALLS\r\n  const [rr, setrr] = useState(true)\r\n  const forceRR = () => { setrr(!rr) }\r\n  useEffect(() => {\r\n    // Do not refresh if in SINGLEPLAYER || Game is over\r\n    if (singleplayer || gameState.winner != null)\r\n      return\r\n\r\n    const timer = setTimeout(() => updateMultiplayerGame(), UPDATE_GAME_TIMEOUT)\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [gameState.board, rr])\r\n\r\n\r\n  function startSingleplayerGame() {\r\n    setGameState(Singleplayer.buildSingleplayerGS())\r\n  }\r\n\r\n  /**\r\n   * Join Multiplayer Game\r\n   * Attempts to get the game identified by the ID passed as URI param\r\n   * Based of of the [local_username] + the remote game it knows who we are: WHITE_PIECES, BLACK_PIECES or VIEWER\r\n   * If we are supposed to be the black player and there is no black player yet we tell the server it's us\r\n   * We update the local [gameState] based of of the remote Game we get from the server \r\n   */\r\n  async function joinMultiplayerGame() {\r\n    // const response = await State.joinGame(game_id)\r\n    const response = await Server.getGame(game_id)\r\n\r\n    if (!response.success) {\r\n      Alerts.showNotification((response.data as ServerError).message)\r\n      return\r\n    }\r\n\r\n    const remoteGame = response.data as RemoteGame\r\n    const clientType = Multiplayer.calcClientType(remoteGame, local_username)\r\n\r\n    if (clientType == ClientType.PLAYER_BLACK && remoteGame.player_b == null) {\r\n      const joinResponse = await Server.connectToGame(game_id)\r\n\r\n      if (joinResponse.success) {\r\n        const remoteGameJoin = joinResponse.data as RemoteGame\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGameJoin, clientType))\r\n      } else {\r\n        Alerts.showNotification((joinResponse.data as ServerError).message)\r\n        return\r\n      }\r\n    } else {\r\n      if (clientType == ClientType.VIEWER) {\r\n        // Increment viewer count\r\n        setGameState(Multiplayer.buildMultiplayerGS(remoteGame.player_w, remoteGame, clientType))\r\n        Server.incrementViewers(game_id)\r\n      } else {\r\n        // WHITE_PIECES PLAYER\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGame, clientType))\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update Multiplayer Game\r\n   * Updates the local game state if the remote game board is different\r\n   */\r\n  async function updateMultiplayerGame() {\r\n    const state = (gameState as IMultiplayerGS)\r\n    // My turn. Do not refresh\r\n    if (state.board.turn == state.local_pieces && state.opponent_username != null)\r\n      return\r\n\r\n    const response = await Server.getGame(state.game_id)\r\n\r\n    forceRR()\r\n\r\n    if (response.success) {\r\n      const remoteGame = response.data as RemoteGame\r\n      const newMultiplayerGS = Multiplayer.updateFromRemote(state, remoteGame)\r\n      if (!GameState.areGameStatesEqual(state, newMultiplayerGS)) {\r\n        setGameState(newMultiplayerGS)\r\n        return\r\n      }\r\n    } else {\r\n      // On error ignore it and gamestate won't be updated.\r\n      return\r\n    }\r\n    // On error ignore it and gamestate won't be updated.\r\n    return\r\n  }\r\n\r\n  /**\r\n   * Handle Make Move\r\n   * Performs a move on the local board and if it succeeds AND we are !singlePlayer validate with the server(updates remote game on success)\r\n   * If on singleplayer just swap the [local_pieces] to play as the opponent\r\n   */\r\n  async function handleMakeMove(move: string) {\r\n    if (gameState.board.turn != gameState.local_pieces) {\r\n      Alerts.showNotification(\"Not your turn!\")\r\n      return\r\n    }\r\n    // Validate move Locally (should never fail)\r\n    try {\r\n      gameState.board.makeMove(move)\r\n    } catch (err) {\r\n      Alerts.showNotification((err as BoardError).message)\r\n      return\r\n    }\r\n    // SINGLEPLAYER\r\n    if (singleplayer) {\r\n      setGameState(Singleplayer.switchTurn(gameState))\r\n      return\r\n    }\r\n    // MULTIPLAYER\r\n    else {\r\n      // Validate with server\r\n      const response = await Server.makeMove(game_id, move)\r\n      if (!response.success) {\r\n        Alerts.showNotification(`Invalid Move: ${(response.data as ServerError).message}`)\r\n        return\r\n      }\r\n      const remoteGame = response.data as RemoteGame\r\n      // Change local state from server game response\r\n      const newGameState = Multiplayer.updateFromRemote(gameState as IMultiplayerGS, remoteGame)\r\n      setGameState(newGameState)\r\n    }\r\n  }\r\n\r\n  // MIGHT GET REMOVED\r\n  function launchCriticalError(err: BoardError | ServerError) {\r\n    GamePageUtils.showGameError(game_id, navigate, err.message)\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      {\r\n        !waiting ?\r\n          (\r\n            <div className=\"game-container\">\r\n\r\n              <div className=\"game-container-row\">\r\n                <GameHeader singleplayer={singleplayer} game_id={game_id} game_over={gameState.board.winner != null} />\r\n              </div>\r\n\r\n              <hr className=\"separator\" />\r\n\r\n              {\r\n                singleplayer ?\r\n                  <div className=\"singleplayer-piece-turn\">\r\n                    {\r\n                      gameState.board.winner === null ?\r\n                        <>Turn : {gameState.board.turn === 'w' ? 'WHITE' : 'BLACK'}</>\r\n                        :\r\n                        <>\r\n                          {gameState.board.winner === 'w' ? 'WHITE' : 'BLACK'} pieces won!\r\n                          <button onClick={startSingleplayerGame} className=\"green-btn restart\">RESTART</button>\r\n                        </>\r\n                    }\r\n                  </div>\r\n                  : null\r\n              }\r\n\r\n              <div className=\"game-container-row\">\r\n                {\r\n                  !singleplayer ?\r\n                    <>\r\n                      <GameVS\r\n                        singleplayer={singleplayer}\r\n                        local_player_username={multiplayerGS.local_username} local_player_pieces={multiplayerGS.local_pieces}\r\n                        opponent_username={multiplayerGS.opponent_username} opponent_pieces={multiplayerGS.opponent_pieces}\r\n                      />\r\n                      <GameCountdown game_over={gameState.board.winner != null} initalTime={60} />\r\n                    </>\r\n                    : null\r\n                }\r\n              </div>\r\n\r\n              <div className=\"game-container-row\">\r\n                <Board\r\n                  singleplayer={singleplayer}\r\n                  board={gameState.board}\r\n                  local_player_pieces={multiplayerGS.local_pieces}\r\n                  turn={gameState.board.turn}\r\n                  game_over={gameState.board.winner != null}\r\n                  onMakeMove={handleMakeMove}\r\n                  onError={launchCriticalError}\r\n                />\r\n                {\r\n                  !singleplayer ?\r\n                    <GameChat game_id={game_id} local_player_username={multiplayerGS.local_username} opponent_username={multiplayerGS.opponent_username} />\r\n                    : null\r\n                }\r\n              </div>\r\n\r\n              <div className=\"game-container-row\">\r\n                <GameInfo\r\n                  singleplayer={singleplayer}\r\n                  game_over={multiplayerGS.winner_username != null}\r\n                  turn_username={multiplayerGS.turn_username}\r\n                  winner_username={multiplayerGS.winner_username}\r\n                  winner_pieces={multiplayerGS.winner}\r\n                  opponent_username={multiplayerGS.opponent_username}\r\n                  views={multiplayerGS.views}\r\n                />\r\n\r\n                {\r\n                  !singleplayer ?\r\n                    <GameButtons gameOver={multiplayerGS.winner_username != null} />\r\n                    : null\r\n                }\r\n              </div>\r\n            </div>\r\n          )\r\n          : null\r\n      }\r\n    </div >\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}