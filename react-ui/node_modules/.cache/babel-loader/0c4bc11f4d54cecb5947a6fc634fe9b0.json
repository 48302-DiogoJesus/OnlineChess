{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\pages\\\\GamePage\\\\GamePage.tsx\",\n    _s = $RefreshSig$();\n\nimport './GamePage.css';\nimport GameVS from '../../components/GameVS/GameVS';\nimport GameInfo from '../../components/GameInfo/GameInfo';\nimport GameCountdown from '../../components/GameCountdown/GameCountdown';\nimport GameChat from '../../components/GameChat/GameChat';\nimport GameButtons from '../../components/GameButtons/GameButtons';\nimport Board from '../../components/ChessBoard/Board/Board';\nimport State from '../../state/State';\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport Alerts from '../../components/Alerts/sa-alerts';\nimport { PieceColor } from '../../domain/piece';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGameState = {\n  game: null\n};\nexport default function GamePage(props) {\n  _s();\n\n  const navigate = useNavigate(); // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \n\n  const game_id = useParams().game_id;\n  const [gameState, setGameState] = useState(initialGameState);\n  const username = State.GetAppState().authentication.username; // Run when the component first renders\n\n  useEffect(() => {\n    State.joinGame(game_id, (success, game) => {\n      if (success && game != null) {\n        setGameState(createInternalGameStateFromRemote(username, game));\n        console.log(game);\n      } else {\n        showGameNotFoundMessage(game_id, navigate);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global-container\",\n    children: gameState.game == null ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameVS, {\n          player1: gameState.game.local_player_username,\n          player2: gameState.game.player_black\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameCountdown, {\n          initalTime: 60\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameChat, {\n          game_id: game_id,\n          player1: gameState.game.player_white,\n          player2: gameState.game.player_black\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameInfo, {\n          game_id: game_id,\n          game: gameState.game\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameButtons, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamePage, \"EKlZ7QJpz6A+ZKURzo8MLP1xEQI=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = GamePage;\n\nfunction createInternalGameStateFromRemote(username, remoteGS) {\n  var local_player;\n  var amIViewer;\n\n  if (username != null && (remoteGS.player_black == username || remoteGS.player_white == username)) {\n    local_player = username;\n    amIViewer = false;\n  } else {\n    // If not participating in the game spectate as player white\n    local_player = remoteGS.player_white;\n    amIViewer = true;\n  }\n\n  var local_player_pieces = remoteGS.player_white == local_player ? PieceColor.WHITE : PieceColor.BLACK;\n  const opponent_pieces = local_player_pieces == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n  const opponent_username = remoteGS.player_white == local_player ? remoteGS.player_black : remoteGS.player_white;\n  var winner_pieces = null;\n\n  if (remoteGS.winner != null) {\n    if (remoteGS.winner == local_player) {\n      winner_pieces = local_player_pieces;\n    } else {\n      winner_pieces = opponent_pieces;\n    }\n  }\n\n  return {\n    game: {\n      id: remoteGS._id,\n      local_player_username: local_player,\n      local_player_pieces: local_player_pieces,\n      opponent_username: opponent_username,\n      opponent_pieces: opponent_pieces,\n      winner_username: remoteGS.winner,\n      winner_pieces: winner_pieces,\n      turn_username: remoteGS.turn,\n      amIViewer: amIViewer\n    }\n  };\n} // Utils functions for this component\n\n\nfunction showGameNotFoundMessage(game_id, navigate) {\n  Alerts.showMessage(\"Game Not Found\", `Could not find \"${game_id}\"`, {\n    goBackBtn: {\n      text: 'Go Back',\n      className: 'go-back-btn',\n      visible: true\n    }\n  }, [{\n    className: \"go-back-btn\",\n    eventName: \"click\",\n    execute: () => {\n      navigate('../');\n    }\n  }]);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/GamePage.tsx"],"names":["GameVS","GameInfo","GameCountdown","GameChat","GameButtons","Board","State","useParams","useNavigate","useEffect","useState","Alerts","PieceColor","initialGameState","game","GamePage","props","navigate","game_id","gameState","setGameState","username","GetAppState","authentication","joinGame","success","createInternalGameStateFromRemote","console","log","showGameNotFoundMessage","local_player_username","player_black","player_white","remoteGS","local_player","amIViewer","local_player_pieces","WHITE","BLACK","opponent_pieces","opponent_username","winner_pieces","winner","id","_id","winner_username","turn_username","turn","showMessage","goBackBtn","text","className","visible","eventName","execute"],"mappings":"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","sourcesContent":["import './GamePage.css'\r\n\r\nimport GameVS from '../../components/GameVS/GameVS'\r\nimport GameInfo from '../../components/GameInfo/GameInfo'\r\nimport GameCountdown from '../../components/GameCountdown/GameCountdown'\r\nimport GameChat from '../../components/GameChat/GameChat'\r\nimport GameButtons from '../../components/GameButtons/GameButtons'\r\nimport Board from '../../components/ChessBoard/Board/Board'\r\n\r\nimport { RemoteGame } from '../../state/reducers/root'\r\nimport State from '../../state/State'\r\n\r\nimport { useParams, useNavigate, NavigateFunction } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport Alerts from '../../components/Alerts/sa-alerts'\r\nimport { PieceColor } from '../../domain/piece'\r\n\r\n\r\ninterface IntGameState {\r\n  id: string | null\r\n  local_player_username: string\r\n  local_player_pieces: PieceColor\r\n\r\n  opponent_username: string | null\r\n  opponent_pieces: PieceColor | null\r\n\r\n  winner_username: string | null\r\n  winner_pieces: PieceColor | null\r\n\r\n  turn_username: string\r\n\r\n  amIViewer: boolean\r\n}\r\n\r\ninterface InternalGameStateWrapper {\r\n  game: IntGameState | null\r\n}\r\n\r\nconst initialGameState: InternalGameStateWrapper = {\r\n  game: null\r\n}\r\n\r\nexport default function GamePage(props: any) {\r\n\r\n  const navigate = useNavigate()\r\n  // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \r\n  const game_id = useParams().game_id!!\r\n  const [gameState, setGameState] = useState(initialGameState)\r\n  const username = State.GetAppState().authentication.username\r\n\r\n\r\n  // Run when the component first renders\r\n  useEffect(() => {\r\n    State.joinGame(game_id, (success, game) => {\r\n      if (success && game != null) {\r\n        setGameState(createInternalGameStateFromRemote(username, game))\r\n        console.log(game)\r\n      } else {\r\n        showGameNotFoundMessage(game_id, navigate)\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      {\r\n        gameState.game == null ? (\r\n          null\r\n        ) : (\r\n          <div className=\"game-container\">\r\n            <div className=\"game-container-row\">\r\n              <GameVS player1={gameState.game.local_player_username} player2={gameState.game.player_black} />\r\n              <GameCountdown initalTime={60} />\r\n            </div>\r\n            <div className=\"game-container-row\">\r\n              <Board />\r\n              <GameChat game_id={game_id} player1={gameState.game.player_white} player2={gameState.game.player_black} />\r\n            </div>\r\n            <div className=\"game-container-row\">\r\n              <GameInfo game_id={game_id} game={gameState.game} />\r\n              <GameButtons />\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    </div >\r\n  )\r\n}\r\n\r\n\r\nfunction createInternalGameStateFromRemote(username: string | null, remoteGS: RemoteGame): InternalGameStateWrapper {\r\n  var local_player: string\r\n  var amIViewer: boolean\r\n\r\n  if (username != null && (remoteGS.player_black == username || remoteGS.player_white == username)) {\r\n    local_player = username;\r\n    amIViewer = false;\r\n  } else {\r\n    // If not participating in the game spectate as player white\r\n    local_player = remoteGS.player_white\r\n    amIViewer = true;\r\n  }\r\n\r\n  var local_player_pieces = remoteGS.player_white == local_player ? PieceColor.WHITE : PieceColor.BLACK\r\n  const opponent_pieces = local_player_pieces == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE\r\n\r\n  const opponent_username = remoteGS.player_white == local_player ? remoteGS.player_black : remoteGS.player_white\r\n\r\n  var winner_pieces = null\r\n\r\n  if (remoteGS.winner != null) {\r\n    if (remoteGS.winner == local_player) {\r\n      winner_pieces = local_player_pieces\r\n    } else {\r\n      winner_pieces = opponent_pieces\r\n    }\r\n  }\r\n\r\n  return {\r\n    game: {\r\n      id: remoteGS._id,\r\n\r\n      local_player_username: local_player,\r\n      local_player_pieces: local_player_pieces,\r\n\r\n      opponent_username: opponent_username,\r\n      opponent_pieces: opponent_pieces,\r\n\r\n      winner_username: remoteGS.winner,\r\n      winner_pieces: winner_pieces,\r\n\r\n      turn_username: remoteGS.turn,\r\n\r\n      amIViewer: amIViewer\r\n    }\r\n  }\r\n}\r\n\r\n// Utils functions for this component\r\n\r\nfunction showGameNotFoundMessage(game_id: string, navigate: NavigateFunction) {\r\n  Alerts.showMessage(\"Game Not Found\", `Could not find \"${game_id}\"`,\r\n    {\r\n      goBackBtn: {\r\n        text: 'Go Back',\r\n        className: 'go-back-btn',\r\n        visible: true\r\n      }\r\n    }, [\r\n    {\r\n      className: \"go-back-btn\",\r\n      eventName: \"click\",\r\n      execute: () => { navigate('../') }\r\n    }\r\n  ])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}