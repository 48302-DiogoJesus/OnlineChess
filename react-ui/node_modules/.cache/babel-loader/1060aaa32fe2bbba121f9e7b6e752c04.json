{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\pages\\\\GamePage\\\\GamePage.tsx\",\n    _s = $RefreshSig$();\n\nimport './GamePage.css';\nimport GameVS from '../../components/GameVS/GameVS';\nimport GameInfo from '../../components/GameInfo/GameInfo';\nimport GameCountdown from '../../components/GameCountdown/GameCountdown';\nimport GameChat from '../../components/GameChat/GameChat';\nimport GameButtons from '../../components/GameButtons/GameButtons';\nimport Board from '../../components/ChessBoard/Board/Board';\nimport GameHeader from '../../components/GameHeader/GameHeader';\nimport State from '../../state/State';\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport Alerts from '../../components/Alerts/sa-alerts';\nimport Server from '../../server/server';\nimport GamePageUtils from './utils';\nimport Multiplayer, { ClientType } from './GameState/MultiplayerGS';\nimport GameState from './GameState/GameState';\nimport Singleplayer from './GameState/Singleplayer'; // LOW TIME BECAUSE ON DEVELOPMENT\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UPDATE_GAME_TIMEOUT = 1000;\nexport default function GamePage(props) {\n  _s();\n\n  const navigate = useNavigate(); // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \n\n  const game_id = useParams().game_id;\n  const [gameState, setGameState] = useState(GameState.defaultGameState);\n  const local_username = State.getAppState().authentication.username;\n  const singlePlayer = game_id == \"sp\"; // TRY TO SIMPLIFY AS VARIABLE LATER\n\n  function GStoMultiplayerGS() {\n    return gameState;\n  }\n\n  console.log(gameState); // FIRST RENDER\n\n  useEffect(() => {\n    if (singlePlayer) {\n      startSingleplayerGame();\n    } else {\n      joinMultiplayerGame();\n    }\n\n    return () => {};\n  }, []); // AUTO-REFRESH CALLS\n\n  const [rr, setrr] = useState(true);\n\n  const forceRR = () => {\n    setrr(!rr);\n  };\n\n  useEffect(() => {\n    // Do not refresh if in SINGLEPLAYER || Game is over\n    if (singlePlayer || gameState.winner != null) return;\n    const timer = setTimeout(() => updateMultiplayerGame(), UPDATE_GAME_TIMEOUT);\n    return () => clearTimeout(timer);\n  }, [gameState.board, rr]);\n\n  function startSingleplayerGame() {\n    setGameState(Singleplayer.buildSingleplayerGS());\n  }\n  /**\r\n   * Join Multiplayer Game\r\n   * Attempts to get the game identified by the ID passed as URI param\r\n   * Based of of the [local_username] + the remote game it knows who we are: WHITE_PIECES, BLACK_PIECES or VIEWER\r\n   * If we are supposed to be the black player and there is no black player yet we tell the server it's us\r\n   * We update the local [gameState] based of of the remote Game we get from the server \r\n   */\n\n\n  async function joinMultiplayerGame() {\n    // const response = await State.joinGame(game_id)\n    const response = await Server.getGame(game_id);\n\n    if (!response.success) {\n      Alerts.showNotification(response.data.message);\n      return;\n    }\n\n    const remoteGame = response.data;\n    const clientType = Multiplayer.calcClientType(remoteGame, local_username);\n\n    if (clientType == ClientType.PLAYER_BLACK && remoteGame.player_b == null) {\n      const joinResponse = await Server.connectToGame(game_id);\n\n      if (joinResponse.success) {\n        const remoteGameJoin = joinResponse.data;\n        setGameState(Multiplayer.buildMultiplayerGS(local_username, remoteGameJoin, clientType));\n      } else {\n        Alerts.showNotification(joinResponse.data.message);\n        return;\n      }\n    } else {\n      if (clientType == ClientType.VIEWER) {\n        // Increment viewer count\n        setGameState(Multiplayer.buildMultiplayerGS(remoteGame.player_w, remoteGame, clientType));\n        Server.incrementViewers(game_id);\n      } else {\n        // WHITE_PIECES PLAYER\n        setGameState(Multiplayer.buildMultiplayerGS(local_username, remoteGame, clientType));\n        return;\n      }\n    }\n  }\n  /**\r\n   * Update Multiplayer Game\r\n   * Updates the local game state if the remote game board is different\r\n   */\n\n\n  async function updateMultiplayerGame() {\n    const state = gameState; // My turn. Do not refresh\n\n    if (state.board.turn == state.local_pieces && state.opponent_pieces != null) return;\n    const response = await Server.getGame(state.game_id);\n    forceRR();\n\n    if (response.success) {\n      const remoteGame = response.data;\n      const newMultiplayerGS = Multiplayer.updateFromRemote(state, remoteGame);\n\n      if (!GameState.areGameStatesEqual(state, newMultiplayerGS)) {\n        setGameState(newMultiplayerGS);\n        return;\n      }\n    } else {\n      // On error ignore it and gamestate won't be updated.\n      return;\n    } // On error ignore it and gamestate won't be updated.\n\n\n    return;\n  }\n  /**\r\n   * Handle Make Move\r\n   * Performs a move on the local board and if it succeeds AND we are !singlePlayer validate with the server(updates remote game on success)\r\n   * If on singleplayer just swap the [local_pieces] to play as the opponent\r\n   */\n\n\n  async function handleMakeMove(move) {\n    if (gameState.board.turn != gameState.local_pieces) {\n      Alerts.showNotification(\"Not your turn!\");\n      return;\n    } // Validate move Locally (should never fail)\n\n\n    try {\n      gameState.board.makeMove(move);\n    } catch (err) {\n      Alerts.showNotification(err.message);\n      return;\n    } // SINGLEPLAYER\n\n\n    if (singlePlayer) {\n      setGameState(Singleplayer.switchTurn(gameState));\n      return;\n    } // MULTIPLAYER\n    else {\n      // Validate with server\n      const response = await Server.makeMove(game_id, move);\n\n      if (!response.success) {\n        Alerts.showNotification(`Invalid Move: ${response.data.message}`);\n        return;\n      }\n\n      const remoteGame = response.data;\n      console.log(remoteGame); // Change local state from server game response\n\n      const newGameState = Multiplayer.updateFromRemote(gameState, remoteGame);\n      setGameState(newGameState);\n    }\n  } // MIGHT GET REMOVED\n\n\n  function launchCriticalError(err) {\n    GamePageUtils.showGameError(game_id, navigate, err.message);\n  }\n\n  console.log(\"Views:\", GStoMultiplayerGS().views);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: /*#__PURE__*/_jsxDEV(GameHeader, {\n          game_id: game_id,\n          game_over: GStoMultiplayerGS().winner_username != null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"separator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameVS, {\n          singleplayer: singlePlayer,\n          local_player_username: GStoMultiplayerGS().local_username,\n          local_player_pieces: GStoMultiplayerGS().local_pieces,\n          opponent_username: GStoMultiplayerGS().opponent_username,\n          opponent_pieces: GStoMultiplayerGS().opponent_pieces\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GameCountdown, {\n          game_over: GStoMultiplayerGS().winner_username != null,\n          initalTime: 60\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          singleplayer: singlePlayer,\n          board: GStoMultiplayerGS().board,\n          local_player_pieces: GStoMultiplayerGS().local_pieces,\n          turn: GStoMultiplayerGS().board.turn,\n          game_over: GStoMultiplayerGS().winner_username != null,\n          onMakeMove: handleMakeMove,\n          onError: launchCriticalError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), !singlePlayer ? /*#__PURE__*/_jsxDEV(GameChat, {\n          game_id: game_id,\n          local_player_username: GStoMultiplayerGS().local_username,\n          opponent_username: GStoMultiplayerGS().opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameInfo, {\n          game_over: GStoMultiplayerGS().winner_username != null,\n          turn_username: GStoMultiplayerGS().turn_username,\n          winner_username: GStoMultiplayerGS().winner_username,\n          winner_pieces: GStoMultiplayerGS().winner,\n          opponent_username: GStoMultiplayerGS().opponent_username,\n          views: GStoMultiplayerGS().views\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), !singlePlayer ? /*#__PURE__*/_jsxDEV(GameButtons, {\n          gameOver: GStoMultiplayerGS().winner_username != null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 17\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamePage, \"kEM4MEwPvnR7dv8C4ViXIcTbqZw=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = GamePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/GamePage.tsx"],"names":["GameVS","GameInfo","GameCountdown","GameChat","GameButtons","Board","GameHeader","State","useParams","useNavigate","useEffect","useState","Alerts","Server","GamePageUtils","Multiplayer","ClientType","GameState","Singleplayer","UPDATE_GAME_TIMEOUT","GamePage","props","navigate","game_id","gameState","setGameState","defaultGameState","local_username","getAppState","authentication","username","singlePlayer","GStoMultiplayerGS","console","log","startSingleplayerGame","joinMultiplayerGame","rr","setrr","forceRR","winner","timer","setTimeout","updateMultiplayerGame","clearTimeout","board","buildSingleplayerGS","response","getGame","success","showNotification","data","message","remoteGame","clientType","calcClientType","PLAYER_BLACK","player_b","joinResponse","connectToGame","remoteGameJoin","buildMultiplayerGS","VIEWER","player_w","incrementViewers","state","turn","local_pieces","opponent_pieces","newMultiplayerGS","updateFromRemote","areGameStatesEqual","handleMakeMove","move","makeMove","err","switchTurn","newGameState","launchCriticalError","showGameError","views","winner_username","opponent_username","turn_username"],"mappings":"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","sourcesContent":["import './GamePage.css'\r\n\r\nimport GameVS from '../../components/GameVS/GameVS'\r\nimport GameInfo from '../../components/GameInfo/GameInfo'\r\nimport GameCountdown from '../../components/GameCountdown/GameCountdown'\r\nimport GameChat from '../../components/GameChat/GameChat'\r\nimport GameButtons from '../../components/GameButtons/GameButtons'\r\nimport Board from '../../components/ChessBoard/Board/Board'\r\nimport GameHeader from '../../components/GameHeader/GameHeader'\r\n\r\nimport State from '../../state/State'\r\n\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport Alerts from '../../components/Alerts/sa-alerts'\r\nimport Server, { RemoteGame, ServerError } from '../../server/server'\r\n\r\nimport GamePageUtils from './utils'\r\nimport { BoardError } from '../../domain/errors'\r\nimport Multiplayer, { ClientType, IMultiplayerGS } from './GameState/MultiplayerGS'\r\nimport GameState from './GameState/GameState'\r\nimport Singleplayer from './GameState/Singleplayer'\r\n\r\n// LOW TIME BECAUSE ON DEVELOPMENT\r\nconst UPDATE_GAME_TIMEOUT = 1000\r\n\r\nexport default function GamePage(props: any) {\r\n  const navigate = useNavigate()\r\n  // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \r\n  const game_id = useParams().game_id!!\r\n  const [gameState, setGameState] = useState(GameState.defaultGameState)\r\n  const local_username = State.getAppState().authentication.username\r\n  const singlePlayer = game_id == \"sp\"\r\n\r\n  // TRY TO SIMPLIFY AS VARIABLE LATER\r\n  function GStoMultiplayerGS(): IMultiplayerGS {\r\n    return gameState as IMultiplayerGS\r\n  }\r\n\r\n  console.log(gameState)\r\n\r\n  // FIRST RENDER\r\n  useEffect(() => {\r\n    if (singlePlayer) {\r\n      startSingleplayerGame()\r\n    } else {\r\n      joinMultiplayerGame()\r\n    }\r\n    return () => { }\r\n  }, [])\r\n\r\n  // AUTO-REFRESH CALLS\r\n  const [rr, setrr] = useState(true)\r\n  const forceRR = () => { setrr(!rr) }\r\n  useEffect(() => {\r\n    // Do not refresh if in SINGLEPLAYER || Game is over\r\n    if (singlePlayer || gameState.winner != null)\r\n      return\r\n\r\n    const timer = setTimeout(() => updateMultiplayerGame(), UPDATE_GAME_TIMEOUT)\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [gameState.board, rr])\r\n\r\n\r\n  function startSingleplayerGame() {\r\n    setGameState(Singleplayer.buildSingleplayerGS())\r\n  }\r\n\r\n  /**\r\n   * Join Multiplayer Game\r\n   * Attempts to get the game identified by the ID passed as URI param\r\n   * Based of of the [local_username] + the remote game it knows who we are: WHITE_PIECES, BLACK_PIECES or VIEWER\r\n   * If we are supposed to be the black player and there is no black player yet we tell the server it's us\r\n   * We update the local [gameState] based of of the remote Game we get from the server \r\n   */\r\n  async function joinMultiplayerGame() {\r\n    // const response = await State.joinGame(game_id)\r\n    const response = await Server.getGame(game_id)\r\n\r\n    if (!response.success) {\r\n      Alerts.showNotification((response.data as ServerError).message)\r\n      return\r\n    }\r\n\r\n    const remoteGame = response.data as RemoteGame\r\n    const clientType = Multiplayer.calcClientType(remoteGame, local_username)\r\n\r\n    if (clientType == ClientType.PLAYER_BLACK && remoteGame.player_b == null) {\r\n      const joinResponse = await Server.connectToGame(game_id)\r\n\r\n      if (joinResponse.success) {\r\n        const remoteGameJoin = joinResponse.data as RemoteGame\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGameJoin, clientType))\r\n      } else {\r\n        Alerts.showNotification((joinResponse.data as ServerError).message)\r\n        return\r\n      }\r\n    } else {\r\n      if (clientType == ClientType.VIEWER) {\r\n        // Increment viewer count\r\n        setGameState(Multiplayer.buildMultiplayerGS(remoteGame.player_w, remoteGame, clientType))\r\n        Server.incrementViewers(game_id)\r\n      } else {\r\n        // WHITE_PIECES PLAYER\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGame, clientType))\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update Multiplayer Game\r\n   * Updates the local game state if the remote game board is different\r\n   */\r\n  async function updateMultiplayerGame() {\r\n    const state = (gameState as IMultiplayerGS)\r\n    // My turn. Do not refresh\r\n    if (state.board.turn == state.local_pieces && state.opponent_pieces != null)\r\n      return\r\n\r\n    const response = await Server.getGame(state.game_id)\r\n\r\n    forceRR()\r\n\r\n    if (response.success) {\r\n      const remoteGame = response.data as RemoteGame\r\n      const newMultiplayerGS = Multiplayer.updateFromRemote(state, remoteGame)\r\n\r\n      if (!GameState.areGameStatesEqual(state, newMultiplayerGS)) {\r\n        setGameState(newMultiplayerGS)\r\n        return\r\n      }\r\n    } else {\r\n      // On error ignore it and gamestate won't be updated.\r\n      return\r\n    }\r\n    // On error ignore it and gamestate won't be updated.\r\n    return\r\n  }\r\n\r\n  /**\r\n   * Handle Make Move\r\n   * Performs a move on the local board and if it succeeds AND we are !singlePlayer validate with the server(updates remote game on success)\r\n   * If on singleplayer just swap the [local_pieces] to play as the opponent\r\n   */\r\n  async function handleMakeMove(move: string) {\r\n    if (gameState.board.turn != gameState.local_pieces) {\r\n      Alerts.showNotification(\"Not your turn!\")\r\n      return\r\n    }\r\n    // Validate move Locally (should never fail)\r\n    try {\r\n      gameState.board.makeMove(move)\r\n    } catch (err) {\r\n      Alerts.showNotification((err as BoardError).message)\r\n      return\r\n    }\r\n    // SINGLEPLAYER\r\n    if (singlePlayer) {\r\n      setGameState(Singleplayer.switchTurn(gameState))\r\n      return\r\n    }\r\n    // MULTIPLAYER\r\n    else {\r\n      // Validate with server\r\n      const response = await Server.makeMove(game_id, move)\r\n      if (!response.success) {\r\n        Alerts.showNotification(`Invalid Move: ${(response.data as ServerError).message}`)\r\n        return\r\n      }\r\n      const remoteGame = response.data as RemoteGame\r\n      console.log(remoteGame)\r\n      // Change local state from server game response\r\n      const newGameState = Multiplayer.updateFromRemote(gameState as IMultiplayerGS, remoteGame)\r\n      setGameState(newGameState)\r\n    }\r\n  }\r\n\r\n  // MIGHT GET REMOVED\r\n  function launchCriticalError(err: BoardError | ServerError) {\r\n    GamePageUtils.showGameError(game_id, navigate, err.message)\r\n  }\r\n  console.log(\"Views:\", GStoMultiplayerGS().views)\r\n  return (\r\n    <div className=\"global-container\">\r\n      {(\r\n        <div className=\"game-container\">\r\n\r\n          <div className=\"game-container-row\">\r\n            <GameHeader game_id={game_id} game_over={GStoMultiplayerGS().winner_username != null} />\r\n          </div>\r\n\r\n          <hr className=\"separator\" />\r\n\r\n          <div className=\"game-container-row\">\r\n            <GameVS\r\n              singleplayer={singlePlayer}\r\n              local_player_username={GStoMultiplayerGS().local_username} local_player_pieces={GStoMultiplayerGS().local_pieces}\r\n              opponent_username={GStoMultiplayerGS().opponent_username} opponent_pieces={GStoMultiplayerGS().opponent_pieces}\r\n            />\r\n            <GameCountdown game_over={GStoMultiplayerGS().winner_username != null} initalTime={60} />\r\n          </div>\r\n\r\n          <div className=\"game-container-row\">\r\n\r\n            <Board\r\n              singleplayer={singlePlayer}\r\n              board={GStoMultiplayerGS().board}\r\n              local_player_pieces={GStoMultiplayerGS().local_pieces}\r\n              turn={GStoMultiplayerGS().board.turn}\r\n              game_over={GStoMultiplayerGS().winner_username != null}\r\n              onMakeMove={handleMakeMove}\r\n              onError={launchCriticalError}\r\n            />\r\n            {\r\n              !singlePlayer ?\r\n                <GameChat game_id={game_id} local_player_username={GStoMultiplayerGS().local_username} opponent_username={GStoMultiplayerGS().opponent_username} />\r\n                : null\r\n            }\r\n          </div>\r\n\r\n          <div className=\"game-container-row\">\r\n            <GameInfo\r\n              game_over={GStoMultiplayerGS().winner_username != null}\r\n              turn_username={GStoMultiplayerGS().turn_username}\r\n              winner_username={GStoMultiplayerGS().winner_username}\r\n              winner_pieces={GStoMultiplayerGS().winner}\r\n              opponent_username={GStoMultiplayerGS().opponent_username}\r\n              views={GStoMultiplayerGS().views}\r\n            />\r\n\r\n            {\r\n              !singlePlayer ?\r\n                <GameButtons gameOver={GStoMultiplayerGS().winner_username != null} />\r\n                : null\r\n            }\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div >\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}