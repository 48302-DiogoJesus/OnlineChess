{"ast":null,"code":"import { PieceColor, PieceType } from './piece';\nexport const BOARD_WIDTH = 8;\nexport const BOARD_HEIGHT = 8;\nexport class BoardObject {\n  constructor() {\n    let initBoard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.board = Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(null));\n\n    this.setPieceAt = (position, piece) => this.board[position.row][position.column] = piece;\n\n    this.getPieceAt = position => this.board[position.row][position.column];\n\n    if (initBoard) {\n      this.initBoard();\n    }\n  } // the board itelf. a matrix with 8 rows and 8 columns\n\n\n  // * Also a string.toBoard would be good\n  toString() {\n    var board = \"\";\n    board += \"as\";\n    return board;\n  }\n\n  initBoard() {\n    // SET BLACK PIECES\n    this.board[0][0] = {\n      color: PieceColor.BLACK,\n      type: PieceType.ROOK\n    };\n    this.board[0][1] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KNIGHT\n    };\n    this.board[0][2] = {\n      color: PieceColor.BLACK,\n      type: PieceType.BISHOP\n    };\n    this.board[0][3] = {\n      color: PieceColor.BLACK,\n      type: PieceType.QUEEN\n    };\n    this.board[0][4] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KING\n    };\n    this.board[0][5] = {\n      color: PieceColor.BLACK,\n      type: PieceType.BISHOP\n    };\n    this.board[0][6] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KNIGHT\n    };\n    this.board[0][7] = {\n      color: PieceColor.BLACK,\n      type: PieceType.ROOK\n    };\n    this.board[1][0] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][1] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][2] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][3] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][4] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][5] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][6] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][7] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    }; // SET WHITE PIECES\n\n    this.board[6][0] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][1] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][2] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][3] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][4] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][5] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][6] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][7] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[7][0] = {\n      color: PieceColor.WHITE,\n      type: PieceType.ROOK\n    };\n    this.board[7][1] = {\n      color: PieceColor.WHITE,\n      type: PieceType.KNIGHT\n    };\n    this.board[7][2] = {\n      color: PieceColor.WHITE,\n      type: PieceType.BISHOP\n    };\n    this.board[7][3] = {\n      color: PieceColor.WHITE,\n      type: PieceType.QUEEN\n    };\n    this.board[7][4] = {\n      color: PieceColor.WHITE,\n      type: PieceType.KING\n    };\n    this.board[7][5] = {\n      color: PieceColor.WHITE,\n      type: PieceType.BISHOP\n    };\n    this.board[7][6] = {\n      color: PieceColor.WHITE,\n      type: PieceType.KNIGHT\n    };\n    this.board[7][7] = {\n      color: PieceColor.WHITE,\n      type: PieceType.ROOK\n    };\n  }\n\n}\nconsole.log(\"TESTING\");\nconst board = new BoardObject();\nconsole.log(board.toString());","map":{"version":3,"sources":["C:/Users/jesus/Desktop/TS/OnlineChess/onlinechess/src/domain/board.tsx"],"names":["PieceColor","PieceType","BOARD_WIDTH","BOARD_HEIGHT","BoardObject","constructor","initBoard","board","Array","fill","map","setPieceAt","position","piece","row","column","getPieceAt","toString","color","BLACK","type","ROOK","KNIGHT","BISHOP","QUEEN","KING","PAWN","WHITE","console","log"],"mappings":"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","sourcesContent":["import { PieceObject, PieceColor, PieceType } from './piece'\r\nimport { PositionObject } from './position'\r\n\r\nexport const BOARD_WIDTH = 8;\r\nexport const BOARD_HEIGHT = 8;\r\n\r\nexport class BoardObject {\r\n\r\n  constructor(initBoard: boolean = true) {\r\n    if (initBoard) {\r\n      this.initBoard()\r\n    }\r\n  }\r\n\r\n  // the board itelf. a matrix with 8 rows and 8 columns\r\n  board: Array<Array<PieceObject | null>> = Array(BOARD_HEIGHT).fill(null).map(()=>Array(BOARD_WIDTH).fill(null));\r\n\r\n  setPieceAt = (position: PositionObject, piece: PieceObject) => this.board[position.row][position.column] = piece\r\n\r\n  getPieceAt = (position: PositionObject) => this.board[position.row][position.column]\r\n\r\n  // * Also a string.toBoard would be good\r\n  toString() {\r\n    var board: string = \"\"\r\n    board += \"as\"\r\n    return board\r\n  }\r\n\r\n  initBoard() {\r\n    // SET BLACK PIECES\r\n    this.board[0][0] = { color: PieceColor.BLACK, type: PieceType.ROOK }; this.board[0][1] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }; this.board[0][2] = { color: PieceColor.BLACK, type: PieceType.BISHOP }; this.board[0][3] = { color: PieceColor.BLACK, type: PieceType.QUEEN }; this.board[0][4] = { color: PieceColor.BLACK, type: PieceType.KING }; this.board[0][5] = { color: PieceColor.BLACK, type: PieceType.BISHOP }; this.board[0][6] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }; this.board[0][7] = { color: PieceColor.BLACK, type: PieceType.ROOK }; this.board[1][0] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][1] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][2] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][3] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][4] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][5] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][6] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][7] = { color: PieceColor.BLACK, type: PieceType.PAWN };\r\n\r\n    // SET WHITE PIECES\r\n    this.board[6][0] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][1] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][2] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][3] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][4] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][5] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][6] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][7] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[7][0] = { color: PieceColor.WHITE, type: PieceType.ROOK }; this.board[7][1] = { color: PieceColor.WHITE, type: PieceType.KNIGHT }; this.board[7][2] = { color: PieceColor.WHITE, type: PieceType.BISHOP }; this.board[7][3] = { color: PieceColor.WHITE, type: PieceType.QUEEN }; this.board[7][4] = { color: PieceColor.WHITE, type: PieceType.KING }; this.board[7][5] = { color: PieceColor.WHITE, type: PieceType.BISHOP }; this.board[7][6] = { color: PieceColor.WHITE, type: PieceType.KNIGHT }; this.board[7][7] = { color: PieceColor.WHITE, type: PieceType.ROOK };\r\n  }\r\n}\r\n\r\nconsole.log(\"TESTING\")\r\nconst board = new BoardObject()\r\nconsole.log(board.toString())"]},"metadata":{},"sourceType":"module"}