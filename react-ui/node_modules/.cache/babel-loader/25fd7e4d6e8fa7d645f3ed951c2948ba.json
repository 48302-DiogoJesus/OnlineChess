{"ast":null,"code":"import CONFIG from './config';\nimport Alerts from '../components/Alerts/sa-alerts';\nconst AXIOSI = CONFIG.AXIOSINSTANCE; // Private\n\nfunction responseIntercept(response) {\n  if (response.status != 200) {\n    const responseAsError = response.data;\n    Alerts.showNotification(responseAsError.message);\n    return {\n      success: false,\n      data: responseAsError\n    };\n  }\n\n  return response.data.data;\n}\n\nfunction errorWrapper(block) {\n  try {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return block(args);\n  } catch (e) {\n    alert(\"SERVER ERROR: \" + e);\n  }\n} // PUBLIC FUNCTIONS\n\n\nconst logout = () => errorWrapper(() => {\n  AXIOSI.get('/logout');\n});\n\nconst getGame = game_id => errorWrapper(() => {\n  AXIOSI.get(`/games?id=${game_id}`).then(res => responseIntercept(res)).then(data => {\n    return data;\n  });\n});\n\nasync function tryLogin(username, password) {\n  const loginResponse = await CONFIG.AXIOSINSTANCE.post('/auth', {\n    'username': username,\n    'password': password\n  });\n\n  if (loginResponse.status === 200) {\n    // IMPROVE\n    // store.dispatch(doLogin(username))\n    return true;\n  } else return loginResponse.data.error;\n}\n\nasync function trySignup(username, password) {\n  const loginResponse = await CONFIG.AXIOSINSTANCE.post('/users', {\n    'username': username,\n    'password': password\n  });\n\n  if (loginResponse.status === 201) {\n    // IMPROVE WITH REDUX STORE\n    // store.dispatch(doLogin(username))\n    return true;\n  } else return loginResponse.data.error;\n}\n\nasync function createGame(game_id) {\n  const response = await CONFIG.AXIOSINSTANCE.post(`/games/`, {\n    id: game_id\n  });\n\n  if (response.status === 201) {\n    const gameObject = response.data.data;\n    return gameObject;\n  } else {\n    return response.data.error;\n  }\n}\n\nconst Server = {\n  logout,\n  getGame,\n  tryLogin,\n  trySignup,\n  createGame\n};\nexport default Server;","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/server/server.ts"],"names":["CONFIG","Alerts","AXIOSI","AXIOSINSTANCE","responseIntercept","response","status","responseAsError","data","showNotification","message","success","errorWrapper","block","args","e","alert","logout","get","getGame","game_id","then","res","tryLogin","username","password","loginResponse","post","error","trySignup","createGame","id","gameObject","Server"],"mappings":"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","sourcesContent":["import { AxiosResponse } from 'axios'\r\nimport CONFIG from './config'\r\nimport { BoardObject } from '../domain/board'\r\nimport { Game } from '../state/reducers/root'\r\n\r\nimport Alerts from '../components/Alerts/sa-alerts'\r\n\r\nconst AXIOSI = CONFIG.AXIOSINSTANCE\r\n\r\n// Private\r\ninterface ServerError {\r\n    http_code: number,\r\n    message: string\r\n}\r\n\r\n// Private\r\ninterface OriginalServerRespose {\r\n    data: any\r\n}\r\n\r\nexport interface ServerResponse {\r\n    success: boolean,\r\n    data: any | ServerError\r\n}\r\n\r\n\r\nfunction responseIntercept(response: AxiosResponse): ServerResponse {\r\n    if (response.status != 200) {\r\n        const responseAsError = response.data as ServerError\r\n        Alerts.showNotification(responseAsError.message)\r\n        return { success: false, data: responseAsError }\r\n    }\r\n    return response.data.data\r\n}\r\n\r\nfunction errorWrapper(block: (...a: any[]) => any, ...args: any[]): any {\r\n    try {\r\n        return block(args)\r\n    } catch (e) {\r\n        alert(\"SERVER ERROR: \" + e)\r\n    }\r\n}\r\n\r\n// PUBLIC FUNCTIONS\r\nconst logout = () => errorWrapper(() => {\r\n    AXIOSI.get('/logout')\r\n})\r\n\r\nconst getGame = (game_id: string): Promise<Game> => errorWrapper(() => {\r\n    AXIOSI.get(`/games?id=${game_id}`)\r\n        .then(res => responseIntercept(res))\r\n        .then(data => {\r\n            return (data as Game)\r\n        })\r\n})\r\n\r\nasync function tryLogin(username: string, password: string) {\r\n    const loginResponse = await CONFIG.AXIOSINSTANCE.post('/auth', {\r\n        'username': username,\r\n        'password': password\r\n    })\r\n    if (loginResponse.status === 200) {\r\n        // IMPROVE\r\n        // store.dispatch(doLogin(username))\r\n        return true\r\n    }\r\n    else\r\n        return loginResponse.data.error\r\n}\r\n\r\nasync function trySignup(username: string, password: string) {\r\n    const loginResponse = await CONFIG.AXIOSINSTANCE.post('/users', {\r\n        'username': username,\r\n        'password': password\r\n    })\r\n    if (loginResponse.status === 201) {\r\n        // IMPROVE WITH REDUX STORE\r\n        // store.dispatch(doLogin(username))\r\n        return true\r\n    }\r\n    else\r\n        return loginResponse.data.error\r\n}\r\n\r\nasync function createGame(game_id: string) {\r\n    const response = await CONFIG.AXIOSINSTANCE.post(`/games/`, {\r\n        id: game_id\r\n    })\r\n\r\n    if (response.status === 201) {\r\n        const gameObject = response.data.data\r\n        return gameObject as Game\r\n    } else {\r\n        return response.data.error\r\n    }\r\n}\r\n\r\nconst Server = {\r\n    logout,\r\n    getGame,\r\n    tryLogin,\r\n    trySignup,\r\n\r\n    createGame\r\n}\r\n\r\nexport default Server"]},"metadata":{},"sourceType":"module"}