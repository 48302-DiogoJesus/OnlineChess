{"ast":null,"code":"import { AxiosInstance } from 'axios';\nimport CONFIG from './config';\nimport Alerts from '../utils/Alerts/sa-alerts';\nimport State from '../state/State';\nconst AXIOSI = CONFIG.AXIOSINSTANCE; // Private\n\nfunction responseIntercept(response) {\n  let showPopupOnError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (response.status < 200 || response.status >= 400) {\n    // If not authorized logout to avoid visual bugs\n    if (response.status == 401) {\n      State.logout();\n    }\n\n    const responseAsError = response.data.error;\n    if (showPopupOnError) Alerts.showNotification(responseAsError.message);\n    return {\n      success: false,\n      data: responseAsError\n    };\n  }\n\n  return {\n    success: true,\n    data: response.data.data\n  };\n}\n\nfunction handleRequestError(err) {\n  return {\n    success: false,\n    data: {\n      http_code: 503,\n      message: err.message == \"Network Error\" ? \"Server is Offline\" : err.message\n    }\n  };\n}\n\nconst a = AxiosInstance; // PUBLIC FUNCTIONS\n\nconst logout = () => AXIOSI.get('/auth/logout', {\n  headers: {\n    'Authorization': 'Bearer ' + State.getAppState().authentication.token\n  }\n}).then(res => responseIntercept(res, false)).catch(err => handleRequestError(err));\n\nconst getGame = game_id => AXIOSI.get(`/games?id=${game_id}`).then(res => responseIntercept(res, false)).catch(err => handleRequestError(err));\n\nconst tryLogin = (username, password) => AXIOSI.post('/auth', {\n  username: username,\n  password: password\n}).then(res => responseIntercept(res)).catch(err => handleRequestError(err));\n\nconst trySignup = (username, password) => AXIOSI.post('/users', {\n  username: username,\n  password: password\n}).then(res => responseIntercept(res)).catch(err => handleRequestError(err));\n\nconst createGame = function (game_id) {\n  let is_public = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let opponent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return AXIOSI.post(`/games`, {\n    id: game_id,\n    public: is_public,\n    player2: opponent\n  }).then(res => responseIntercept(res)).catch(err => handleRequestError(err));\n};\n\nconst joinAsPlayerB = game_id => AXIOSI.get(`/games/connect?id=${game_id}`).then(res => responseIntercept(res)).catch(err => handleRequestError(err));\n\nconst makeMove = (game_id, move) => AXIOSI.get(`/games/makemove?id=${game_id}&move=${move}`).then(res => responseIntercept(res)).catch(err => handleRequestError(err));\n\nconst incrementViewers = game_id => AXIOSI.post('/games/incrementviewers', {\n  id: game_id\n}).then(res => responseIntercept(res)).catch(err => handleRequestError(err));\n\nconst Server = {\n  // Game\n  createGame,\n  getGame,\n  joinAsPlayerB,\n  makeMove,\n  incrementViewers,\n  // Authentication\n  logout,\n  tryLogin,\n  trySignup\n};\nexport default Server;","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/server/server.ts"],"names":["AxiosInstance","CONFIG","Alerts","State","AXIOSI","AXIOSINSTANCE","responseIntercept","response","showPopupOnError","status","logout","responseAsError","data","error","showNotification","message","success","handleRequestError","err","http_code","a","get","headers","getAppState","authentication","token","then","res","catch","getGame","game_id","tryLogin","username","password","post","trySignup","createGame","is_public","opponent","id","public","player2","joinAsPlayerB","makeMove","move","incrementViewers","Server"],"mappings":"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","sourcesContent":["import { AxiosInstance, AxiosResponse } from 'axios'\r\nimport CONFIG from './config'\r\n\r\nimport Alerts from '../utils/Alerts/sa-alerts'\r\nimport State from '../state/State'\r\nimport { PieceColor } from '../domain/piece'\r\n\r\nconst AXIOSI = CONFIG.AXIOSINSTANCE\r\n\r\n// Private\r\nexport interface ServerError {\r\n    http_code: number,\r\n    message: string\r\n}\r\n\r\nexport interface ServerResponse {\r\n    success: boolean,\r\n    data: any | ServerError\r\n}\r\n\r\nexport interface RemoteGame {\r\n    _id: string,\r\n    player_w: string,   // username of player1\r\n    player_b: string | null,  // username of player2\r\n\r\n    moves: string[],\r\n    winner: PieceColor | null,\r\n    views: number\r\n}\r\n\r\n\r\nfunction responseIntercept(response: AxiosResponse, showPopupOnError: boolean = true): ServerResponse {\r\n    if (response.status < 200 || response.status >= 400) {\r\n        // If not authorized logout to avoid visual bugs\r\n        if (response.status == 401) {\r\n            State.logout()\r\n        }\r\n        const responseAsError = response.data.error as ServerError\r\n        if (showPopupOnError)\r\n            Alerts.showNotification(responseAsError.message)\r\n        return { success: false, data: responseAsError }\r\n    }\r\n    return { success: true, data: response.data.data }\r\n}\r\n\r\nfunction handleRequestError(err: any): ServerResponse {\r\n    return {\r\n        success: false,\r\n        data: {\r\n            http_code: 503,\r\n            message: err.message == \"Network Error\"\r\n                ? \"Server is Offline\"\r\n                : err.message,\r\n        }\r\n    }\r\n}\r\n\r\nconst a = AxiosInstance\r\n\r\n// PUBLIC FUNCTIONS\r\nconst logout = (): Promise<ServerResponse> =>\r\n    AXIOSI.get('/auth/logout', {\r\n        headers: { 'Authorization': 'Bearer ' + State.getAppState().authentication.token }\r\n    })\r\n        .then((res: AxiosResponse) => responseIntercept(res, false))\r\n        .catch(err => handleRequestError(err))\r\n\r\n\r\nconst getGame = (game_id: string): Promise<ServerResponse> =>\r\n    AXIOSI.get(`/games?id=${game_id}`)\r\n        .then((res: AxiosResponse) => responseIntercept(res, false))\r\n        .catch(err => handleRequestError(err))\r\n\r\n\r\nconst tryLogin = (username: string, password: string): Promise<ServerResponse> =>\r\n    AXIOSI.post('/auth', {\r\n        username: username,\r\n        password: password\r\n    })\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n        .catch(err => handleRequestError(err))\r\n\r\n\r\nconst trySignup = (username: string, password: string): Promise<ServerResponse> =>\r\n    AXIOSI.post('/users', {\r\n        username: username,\r\n        password: password\r\n    })\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n        .catch(err => handleRequestError(err))\r\n\r\n\r\nconst createGame = (game_id: string, is_public: boolean = true, opponent: string | null = null): Promise<ServerResponse> =>\r\n    AXIOSI.post(`/games`, {\r\n        id: game_id,\r\n        public: is_public,\r\n        player2: opponent\r\n    })\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n        .catch(err => handleRequestError(err))\r\n\r\n\r\nconst joinAsPlayerB = (game_id: string): Promise<ServerResponse> =>\r\n    AXIOSI.get(`/games/connect?id=${game_id}`)\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n        .catch(err => handleRequestError(err))\r\n\r\nconst makeMove = (game_id: string, move: string): Promise<ServerResponse> =>\r\n    AXIOSI.get(`/games/makemove?id=${game_id}&move=${move}`)\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n        .catch(err => handleRequestError(err))\r\n\r\nconst incrementViewers = (game_id: string) =>\r\n    AXIOSI.post('/games/incrementviewers', {\r\n        id: game_id\r\n    })\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n        .catch(err => handleRequestError(err))\r\n\r\nconst Server = {\r\n    // Game\r\n    createGame,\r\n    getGame,\r\n    joinAsPlayerB,\r\n    makeMove,\r\n    incrementViewers,\r\n\r\n    // Authentication\r\n    logout,\r\n    tryLogin,\r\n    trySignup\r\n}\r\n\r\nexport default Server"]},"metadata":{},"sourceType":"module"}