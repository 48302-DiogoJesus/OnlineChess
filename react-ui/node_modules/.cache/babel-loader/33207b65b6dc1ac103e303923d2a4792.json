{"ast":null,"code":"export let PieceColor;\n\n(function (PieceColor) {\n  PieceColor[\"BLACK\"] = \"b\";\n  PieceColor[\"WHITE\"] = \"w\";\n})(PieceColor || (PieceColor = {}));\n\nexport let PieceType;\n\n(function (PieceType) {\n  PieceType[\"PAWN\"] = \"p\";\n  PieceType[\"KING\"] = \"k\";\n  PieceType[\"QUEEN\"] = \"q\";\n  PieceType[\"ROOK\"] = \"r\";\n  PieceType[\"KNIGHT\"] = \"n\";\n  PieceType[\"BISHOP\"] = \"b\";\n})(PieceType || (PieceType = {}));\n\nexport function charToPiece(char) {\n  if (char.length != 1) return null;\n  console.log();\n\n  const createPiece = pieceType => {\n    return {\n      color: char.toUpperCase() === char ? PieceColor.WHITE : PieceColor.BLACK,\n      type: pieceType\n    };\n  };\n\n  switch (char) {\n    case PieceType.PAWN:\n      return createPiece(PieceType.PAWN);\n\n    case PieceType.KING:\n      return createPiece(PieceType.KING);\n\n    case PieceType.QUEEN:\n      return createPiece(PieceType.QUEEN);\n\n    case PieceType.ROOK:\n      return createPiece(PieceType.ROOK);\n\n    case PieceType.KNIGHT:\n      return createPiece(PieceType.KNIGHT);\n\n    case PieceType.BISHOP:\n      return createPiece(PieceType.BISHOP);\n  }\n\n  return null;\n}","map":{"version":3,"sources":["C:/Users/jesus/Desktop/TS/OnlineChess/onlinechess/src/domain/piece.tsx"],"names":["PieceColor","PieceType","charToPiece","char","length","console","log","createPiece","pieceType","color","toUpperCase","WHITE","BLACK","type","PAWN","KING","QUEEN","ROOK","KNIGHT","BISHOP"],"mappings":"AAAA,WAAYA,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAKZ,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AASZ,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAAuD;AAC1D,MAAIA,IAAI,CAACC,MAAL,IAAe,CAAnB,EACI,OAAO,IAAP;AACJC,EAAAA,OAAO,CAACC,GAAR;;AACA,QAAMC,WAAW,GAAIC,SAAD,IAA0B;AAC1C,WAAO;AACHC,MAAAA,KAAK,EAAEN,IAAI,CAACO,WAAL,OAAuBP,IAAvB,GAA8BH,UAAU,CAACW,KAAzC,GAAiDX,UAAU,CAACY,KADhE;AAEHC,MAAAA,IAAI,EAAEL;AAFH,KAAP;AAIH,GALD;;AAMA,UAAQL,IAAR;AACI,SAAKF,SAAS,CAACa,IAAf;AACI,aAAOP,WAAW,CAACN,SAAS,CAACa,IAAX,CAAlB;;AACJ,SAAKb,SAAS,CAACc,IAAf;AACI,aAAOR,WAAW,CAACN,SAAS,CAACc,IAAX,CAAlB;;AACJ,SAAKd,SAAS,CAACe,KAAf;AACI,aAAOT,WAAW,CAACN,SAAS,CAACe,KAAX,CAAlB;;AACJ,SAAKf,SAAS,CAACgB,IAAf;AACI,aAAOV,WAAW,CAACN,SAAS,CAACgB,IAAX,CAAlB;;AACJ,SAAKhB,SAAS,CAACiB,MAAf;AACI,aAAOX,WAAW,CAACN,SAAS,CAACiB,MAAX,CAAlB;;AACJ,SAAKjB,SAAS,CAACkB,MAAf;AACI,aAAOZ,WAAW,CAACN,SAAS,CAACkB,MAAX,CAAlB;AAZR;;AAcA,SAAO,IAAP;AACH","sourcesContent":["export enum PieceColor { \r\n    BLACK = 'b', \r\n    WHITE = 'w'\r\n}\r\n\r\nexport enum PieceType {\r\n    PAWN = 'p', \r\n    KING = 'k', \r\n    QUEEN = 'q', \r\n    ROOK = 'r', \r\n    KNIGHT = 'n',\r\n    BISHOP = 'b'\r\n}\r\n\r\nexport function charToPiece(char: string): PieceObject | null {\r\n    if (char.length != 1)\r\n        return null\r\n    console.log()\r\n    const createPiece = (pieceType: PieceType) => {\r\n        return {\r\n            color: char.toUpperCase() === char ? PieceColor.WHITE : PieceColor.BLACK,\r\n            type: pieceType\r\n        }\r\n    }\r\n    switch (char) {\r\n        case PieceType.PAWN:\r\n            return createPiece(PieceType.PAWN)\r\n        case PieceType.KING:\r\n            return createPiece(PieceType.KING)\r\n        case PieceType.QUEEN:\r\n            return createPiece(PieceType.QUEEN)\r\n        case PieceType.ROOK:\r\n            return createPiece(PieceType.ROOK)\r\n        case PieceType.KNIGHT:\r\n            return createPiece(PieceType.KNIGHT)\r\n        case PieceType.BISHOP:\r\n            return createPiece(PieceType.BISHOP)\r\n    }\r\n    return null\r\n}\r\n\r\nexport interface PieceObject {\r\n    color: PieceColor,\r\n    type: PieceType\r\n}"]},"metadata":{},"sourceType":"module"}