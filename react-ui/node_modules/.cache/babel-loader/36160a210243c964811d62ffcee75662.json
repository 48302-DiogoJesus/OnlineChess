{"ast":null,"code":"// Utilitary functions for the GamePage component\nimport Alerts from \"../../components/Alerts/sa-alerts\";\nimport { BoardObject } from \"../../domain/board\";\nimport { getOpponent, PieceColor } from \"../../domain/piece\";\nimport { CLIENT_TYPE } from \"./GamePage\";\nexport function showGameError(game_id, navigate, message) {\n  Alerts.showMessage(`Game Error: \"${game_id}\"`, message, {\n    goBackBtn: {\n      text: 'Go Back',\n      className: 'go-back-btn',\n      visible: true\n    }\n  }, [{\n    className: \"go-back-btn\",\n    eventName: \"click\",\n    execute: () => {\n      navigate('../');\n    }\n  }]);\n}\nexport function calcClientType(gameState, username) {\n  if (username == gameState.player1) {\n    return CLIENT_TYPE.PLAYER_WHITE;\n  } else if (gameState.player2 == username || gameState.player2 == null) {\n    // If im player2 join like that. If no one is player2 and i am not player1 join\n    return CLIENT_TYPE.PLAYER_BLACK;\n  } else {\n    return CLIENT_TYPE.VIEWER;\n  }\n}\nexport function updateInternalGameStateSingleplayerAfterMove(state) {\n  if (state.game == null) return state;\n  var winner_username = null;\n\n  if (state.game.simBoard.winner != null) {\n    if (state.game.simBoard.winner == state.game.local_player_pieces) {\n      winner_username = state.game.local_player_username;\n    } else {\n      winner_username = state.game.opponent_username;\n    }\n  }\n\n  return {\n    client_type: state.client_type,\n    game: { ...state.game,\n      winner_username,\n      winner_pieces: state.game.simBoard.winner,\n      turn_username: state.game.turn_username === state.game.local_player_username ? state.game.opponent_username : state.game.local_player_username,\n      turn_pieces: getOpponent(state.game.local_player_pieces)\n    }\n  };\n}\nexport function getInternalGameStateFromRemote(clientType, remoteGS) {\n  var local_player_username;\n\n  if (clientType == CLIENT_TYPE.PLAYER_WHITE) {\n    local_player_username = remoteGS.player1;\n  } else if (clientType == CLIENT_TYPE.PLAYER_BLACK) {\n    local_player_username = remoteGS.player2;\n  } else {\n    local_player_username = remoteGS.player1;\n  }\n\n  var local_player_pieces = remoteGS.player1 == local_player_username ? PieceColor.WHITE : PieceColor.BLACK;\n  const opponent_pieces = local_player_pieces == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n  const opponent_username = remoteGS.player1 == local_player_username ? remoteGS.player2 : remoteGS.player1;\n  var winner_username = null;\n\n  if (remoteGS.winner != null) {\n    if (remoteGS.winner == local_player_pieces) {\n      winner_username = local_player_username;\n    } else {\n      winner_username = opponent_username;\n    }\n  }\n\n  const simBoard = BoardObject.fromMoves(remoteGS.moves);\n  const turn_username = simBoard.turn == local_player_pieces ? local_player_username : opponent_username;\n  return {\n    game: {\n      id: remoteGS._id,\n      local_player_username: local_player_username,\n      local_player_pieces: local_player_pieces,\n      opponent_username: opponent_username,\n      opponent_pieces: opponent_pieces,\n      winner_username: winner_username,\n      winner_pieces: remoteGS.winner,\n      simBoard: simBoard,\n      turn_pieces: simBoard.turn,\n      turn_username: turn_username != null ? turn_username : 'Opponent'\n    },\n    client_type: clientType\n  };\n}\n\nconst areGamesEqual = (game1, game2) => game1.id == game2.id && game1.opponent_username == game2.opponent_username && game1.turn_username == game2.turn_username && game1.winner_pieces == game2.winner_pieces;\n\nconst GamePageUtils = {\n  showGameError,\n  calcClientType,\n  getInternalGameStateFromRemote,\n  updateInternalGameStateSingleplayerAfterMove,\n  areGamesEqual\n};\nexport default GamePageUtils;","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/utils.ts"],"names":["Alerts","BoardObject","getOpponent","PieceColor","CLIENT_TYPE","showGameError","game_id","navigate","message","showMessage","goBackBtn","text","className","visible","eventName","execute","calcClientType","gameState","username","player1","PLAYER_WHITE","player2","PLAYER_BLACK","VIEWER","updateInternalGameStateSingleplayerAfterMove","state","game","winner_username","simBoard","winner","local_player_pieces","local_player_username","opponent_username","client_type","winner_pieces","turn_username","turn_pieces","getInternalGameStateFromRemote","clientType","remoteGS","WHITE","BLACK","opponent_pieces","fromMoves","moves","turn","id","_id","areGamesEqual","game1","game2","GamePageUtils"],"mappings":"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","sourcesContent":["// Utilitary functions for the GamePage component\r\n\r\nimport { NavigateFunction } from \"react-router-dom\"\r\nimport Alerts from \"../../components/Alerts/sa-alerts\"\r\nimport { BoardObject } from \"../../domain/board\"\r\nimport { getOpponent, PieceColor } from \"../../domain/piece\"\r\nimport { RemoteGame } from \"../../state/reducers/root\"\r\nimport { CLIENT_TYPE, InternalGameState, InternalGameStateWrapper } from \"./GamePage\"\r\n\r\nexport function showGameError(game_id: string, navigate: NavigateFunction, message: string) {\r\n    Alerts.showMessage(`Game Error: \"${game_id}\"`, message,\r\n        {\r\n            goBackBtn: {\r\n                text: 'Go Back',\r\n                className: 'go-back-btn',\r\n                visible: true\r\n            }\r\n        }, [\r\n        {\r\n            className: \"go-back-btn\",\r\n            eventName: \"click\",\r\n            execute: () => { navigate('../') }\r\n        }\r\n    ])\r\n}\r\n\r\nexport function calcClientType(gameState: RemoteGame, username: string | null): CLIENT_TYPE {\r\n    if (username == gameState.player1) {\r\n        return CLIENT_TYPE.PLAYER_WHITE\r\n    } else if (gameState.player2 == username || gameState.player2 == null) {\r\n        // If im player2 join like that. If no one is player2 and i am not player1 join\r\n        return CLIENT_TYPE.PLAYER_BLACK\r\n    } else {\r\n        return CLIENT_TYPE.VIEWER\r\n    }\r\n}\r\n\r\nexport function updateInternalGameStateSingleplayerAfterMove(\r\n    state: InternalGameStateWrapper\r\n): InternalGameStateWrapper {\r\n    if (state.game == null)\r\n        return state\r\n\r\n    var winner_username = null\r\n    if (state.game.simBoard.winner != null) {\r\n        if (state.game.simBoard.winner == state.game.local_player_pieces) {\r\n            winner_username = state.game.local_player_username\r\n        } else {\r\n            winner_username = state.game.opponent_username\r\n        }\r\n    }\r\n\r\n    return {\r\n        client_type: state.client_type,\r\n        game: {\r\n            ...state.game,\r\n            winner_username,\r\n            winner_pieces: state.game.simBoard.winner,\r\n\r\n            turn_username: state.game.turn_username === state.game.local_player_username\r\n                ? state.game.opponent_username!! : state.game.local_player_username,\r\n            turn_pieces: getOpponent(state.game.local_player_pieces)\r\n        }\r\n    }\r\n}\r\n\r\nexport function getInternalGameStateFromRemote(\r\n    clientType: CLIENT_TYPE,\r\n    remoteGS: RemoteGame\r\n): InternalGameStateWrapper {\r\n    var local_player_username: string | null\r\n\r\n    if (clientType == CLIENT_TYPE.PLAYER_WHITE) {\r\n        local_player_username = remoteGS.player1\r\n    }\r\n    else if (clientType == CLIENT_TYPE.PLAYER_BLACK) {\r\n        local_player_username = remoteGS.player2!!\r\n    } else {\r\n        local_player_username = remoteGS.player1\r\n    }\r\n\r\n    var local_player_pieces = remoteGS.player1 == local_player_username ? PieceColor.WHITE : PieceColor.BLACK\r\n    const opponent_pieces = local_player_pieces == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE\r\n\r\n    const opponent_username = remoteGS.player1 == local_player_username ? remoteGS.player2 : remoteGS.player1\r\n\r\n    var winner_username = null\r\n\r\n    if (remoteGS.winner != null) {\r\n        if (remoteGS.winner == local_player_pieces) {\r\n            winner_username = local_player_username\r\n        } else {\r\n            winner_username = opponent_username\r\n        }\r\n    }\r\n\r\n    const simBoard: BoardObject = BoardObject.fromMoves(remoteGS.moves)\r\n\r\n    const turn_username = simBoard.turn == local_player_pieces ? local_player_username : opponent_username\r\n\r\n    return {\r\n        game: {\r\n            id: remoteGS._id,\r\n\r\n            local_player_username: local_player_username,\r\n            local_player_pieces: local_player_pieces,\r\n\r\n            opponent_username: opponent_username,\r\n            opponent_pieces: opponent_pieces,\r\n\r\n            winner_username: winner_username,\r\n            winner_pieces: remoteGS.winner,\r\n\r\n            simBoard: simBoard,\r\n\r\n            turn_pieces: simBoard.turn,\r\n            turn_username: turn_username != null ? turn_username : 'Opponent',\r\n        },\r\n        client_type: clientType,\r\n    }\r\n}\r\n\r\nconst areGamesEqual = (game1: InternalGameState, game2: InternalGameState): boolean =>\r\n    game1.id == game2.id &&\r\n    game1.opponent_username == game2.opponent_username &&\r\n    game1.turn_username == game2.turn_username &&\r\n    game1.winner_pieces == game2.winner_pieces\r\n\r\nconst GamePageUtils = {\r\n    showGameError,\r\n    calcClientType,\r\n    getInternalGameStateFromRemote,\r\n    updateInternalGameStateSingleplayerAfterMove,\r\n\r\n    areGamesEqual\r\n}\r\n\r\nexport default GamePageUtils\r\n"]},"metadata":{},"sourceType":"module"}