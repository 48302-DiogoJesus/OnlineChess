{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _slicedToArray from\"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import'./GamePage.css';import GameVS from'./components/GameVS/GameVS';import GameInfo from'./components/GameInfo/GameInfo';import GameCountdown from'./components/GameCountdown/GameCountdown';import GameChat from'./components/GameChat/GameChat';import GameButtons from'./components/GameButtons/GameButtons';import Board from'./components/ChessBoard/Board/Board';import GameHeader from'./components/GameHeader/GameHeader';import State from'../../state/State';import{useParams,useNavigate}from\"react-router-dom\";import{useEffect,useState}from'react';import Alerts from'../../utils/Alerts/sa-alerts';import Server from'../../server/server';import GamePageUtils from'./utils';import Multiplayer,{ClientType}from'./GameState/MultiplayerGS';import GameState from'./GameState/GameState';import Singleplayer from'./GameState/Singleplayer';// LOW TIME BECAUSE ON DEVELOPMENT\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var UPDATE_GAME_TIMEOUT=1000;export default function GamePage(props){var navigate=useNavigate();// NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \nvar game_id=useParams().game_id;// Am i waiting for the game info to be retreived from the server ?\nvar _useState=useState(true),_useState2=_slicedToArray(_useState,2),waiting=_useState2[0],setWaiting=_useState2[1];var _useState3=useState(GameState.defaultGameState),_useState4=_slicedToArray(_useState3,2),gameState=_useState4[0],setGameState=_useState4[1];var singleplayer=game_id==\"sp\";var multiplayerGS=gameState;var local_username=State.getAppState().authentication.username;// FIRST RENDER\nuseEffect(function(){new Promise(function(resolve,reject){if(singleplayer){startSingleplayerGame();resolve(null);}else{joinMultiplayerGame().then(function(){return resolve(null);});}}).then(function(){return setWaiting(false);});return function(){};},[]);// AUTO-REFRESH CALLS\nvar _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),rr=_useState6[0],setrr=_useState6[1];var forceRR=function forceRR(){setrr(!rr);};useEffect(function(){while(true){if(singleplayer)return;// It is Multiplayer Game\n// Dont try update while i dont have the game\nif(waiting)return;// I'm not a viewer\n// If game is Over\nif(gameState.winner!=null)return;// Always Update if i'm a viewer\nif(multiplayerGS.client_type==ClientType.VIEWER)break;// Opponent has not been defined yet\nif(multiplayerGS.opponent_username==null)break;// Game has started + I am a player\n// It's my turn AND \nif(multiplayerGS.board.turn==multiplayerGS.local_pieces)return;break;}var timer=setTimeout(function(){return updateMultiplayerGame();},UPDATE_GAME_TIMEOUT);return function(){return clearTimeout(timer);};},[gameState.board,waiting,rr]);function startSingleplayerGame(){setGameState(Singleplayer.buildSingleplayerGS());}/**\r\n   * Join Multiplayer Game\r\n   * Attempts to get the game identified by the ID passed as URI param\r\n   * Based of of the [local_username] + the remote game it knows who we are: WHITE_PIECES, BLACK_PIECES or VIEWER\r\n   * If we are supposed to be the black player and there is no black player yet we tell the server it's us\r\n   * We update the local [gameState] based of of the remote Game we get from the server \r\n   */function joinMultiplayerGame(){return _joinMultiplayerGame.apply(this,arguments);}/**\r\n   * Update Multiplayer Game\r\n   * Updates the local game state if the remote game board is different\r\n   */function _joinMultiplayerGame(){_joinMultiplayerGame=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,remoteGame,clientType,joinResponse,remoteGameJoin;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Server.getGame(game_id);case 2:response=_context.sent;if(response.success){_context.next=7;break;}_context.next=6;return launchCriticalError(response.data);case 6:return _context.abrupt(\"return\");case 7:remoteGame=response.data;clientType=Multiplayer.calcClientType(remoteGame,local_username);if(!(clientType==ClientType.PLAYER_BLACK&&remoteGame.player_b==null)){_context.next=23;break;}_context.next=12;return Server.joinAsPlayerB(game_id);case 12:joinResponse=_context.sent;if(!joinResponse.success){_context.next=18;break;}remoteGameJoin=joinResponse.data;setGameState(Multiplayer.buildMultiplayerGS(local_username,remoteGameJoin,clientType));_context.next=21;break;case 18:_context.next=20;return launchCriticalError(joinResponse.data);case 20:return _context.abrupt(\"return\");case 21:_context.next=30;break;case 23:if(!(clientType==ClientType.VIEWER)){_context.next=28;break;}// Increment viewer count\nsetGameState(Multiplayer.buildMultiplayerGS(remoteGame.player_w,remoteGame,clientType));Server.incrementViewers(game_id);_context.next=30;break;case 28:// WHITE_PIECES PLAYER\nsetGameState(Multiplayer.buildMultiplayerGS(local_username,remoteGame,clientType));return _context.abrupt(\"return\");case 30:case\"end\":return _context.stop();}}},_callee);}));return _joinMultiplayerGame.apply(this,arguments);}function updateMultiplayerGame(){return _updateMultiplayerGame.apply(this,arguments);}/**\r\n   * Handle Make Move\r\n   * Performs a move on the local board and if it succeeds AND we are !singlePlayer validate with the server(updates remote game on success)\r\n   * If on singleplayer just swap the [local_pieces] to play as the opponent\r\n   */function _updateMultiplayerGame(){_updateMultiplayerGame=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var state,response,remoteGame,newMultiplayerGS;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:state=gameState;_context2.next=3;return Server.getGame(state.game_id);case 3:response=_context2.sent;forceRR();if(!response.success){_context2.next=13;break;}remoteGame=response.data;newMultiplayerGS=Multiplayer.updateFromRemote(state,remoteGame);if(GameState.areGameStatesEqual(state,newMultiplayerGS)){_context2.next=11;break;}setGameState(newMultiplayerGS);return _context2.abrupt(\"return\");case 11:_context2.next=14;break;case 13:return _context2.abrupt(\"return\");case 14:return _context2.abrupt(\"return\");case 15:case\"end\":return _context2.stop();}}},_callee2);}));return _updateMultiplayerGame.apply(this,arguments);}function handleMakeMove(_x){return _handleMakeMove.apply(this,arguments);}function _handleMakeMove(){_handleMakeMove=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(move){var promotion,pieceAsString,promotionMove,response,remoteGame,newGameState;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(gameState.board.turn!=gameState.local_pieces)){_context3.next=3;break;}Alerts.showNotification(\"Not your turn!\");return _context3.abrupt(\"return\");case 3:_context3.prev=3;promotion=gameState.board.isPromotionMove(move);if(!promotion){_context3.next=13;break;}_context3.next=8;return GamePageUtils.askPromotionPiece(gameState.local_pieces);case 8:pieceAsString=_context3.sent;promotionMove=pieceAsString+move.substring(1);gameState.board.makeMove(promotionMove);// MODIFY CHAR OF THE MOVE TO THE PROMOTION PIECE CHOOSEN\n_context3.next=14;break;case 13:gameState.board.makeMove(move);case 14:_context3.next=20;break;case 16:_context3.prev=16;_context3.t0=_context3[\"catch\"](3);Alerts.showNotification(_context3.t0.message);return _context3.abrupt(\"return\");case 20:if(!singleplayer){_context3.next=25;break;}setGameState(Singleplayer.switchTurn(gameState));return _context3.abrupt(\"return\");case 25:_context3.next=27;return Server.makeMove(game_id,move);case 27:response=_context3.sent;if(response.success){_context3.next=31;break;}Alerts.showNotification(\"Invalid Move: \".concat(response.data.message));return _context3.abrupt(\"return\");case 31:remoteGame=response.data;// Change local state from server game response\nnewGameState=Multiplayer.updateFromRemote(gameState,remoteGame);setGameState(newGameState);case 34:case\"end\":return _context3.stop();}}},_callee3,null,[[3,16]]);}));return _handleMakeMove.apply(this,arguments);}function launchCriticalError(err){return GamePageUtils.showGameError(game_id,navigate,err.message);}return/*#__PURE__*/_jsx(\"div\",{className:\"global-container\",children:!waiting?/*#__PURE__*/_jsxs(\"div\",{className:\"game-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"game-container-row\",children:/*#__PURE__*/_jsx(GameHeader,{singleplayer:singleplayer,game_id:game_id,game_over:gameState.board.winner!=null})}),/*#__PURE__*/_jsx(\"hr\",{className:\"separator\"}),singleplayer?/*#__PURE__*/_jsx(\"div\",{className:\"singleplayer-piece-turn\",children:gameState.board.winner===null?/*#__PURE__*/_jsxs(_Fragment,{children:[\"Turn : \",gameState.board.turn==='w'?'WHITE':'BLACK']}):/*#__PURE__*/_jsxs(_Fragment,{children:[gameState.board.winner==='w'?'WHITE':'BLACK',\" pieces won!\",/*#__PURE__*/_jsx(\"button\",{onClick:startSingleplayerGame,className:\"green-btn restart\",children:\"RESTART\"})]})}):null,/*#__PURE__*/_jsx(\"div\",{className:\"game-container-row\",children:!singleplayer?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(GameVS,{singleplayer:singleplayer,local_player_username:multiplayerGS.local_username,local_player_pieces:multiplayerGS.local_pieces,opponent_username:multiplayerGS.opponent_username,opponent_pieces:multiplayerGS.opponent_pieces}),/*#__PURE__*/_jsx(GameCountdown,{game_over:gameState.board.winner!=null,initalTime:60})]}):null}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-container-row\",children:[/*#__PURE__*/_jsx(Board,{singleplayer:singleplayer,board:gameState.board,local_player_pieces:multiplayerGS.local_pieces,isViewer:multiplayerGS.client_type===ClientType.VIEWER,turn:gameState.board.turn,game_over:gameState.board.winner!=null,onMakeMove:handleMakeMove,onError:launchCriticalError}),!singleplayer?/*#__PURE__*/_jsx(GameChat,{game_id:game_id,local_player_username:multiplayerGS.local_username,opponent_username:multiplayerGS.opponent_username}):null]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-container-row\",children:[/*#__PURE__*/_jsx(GameInfo,{singleplayer:singleplayer,game_over:multiplayerGS.winner_username!=null,turn_username:multiplayerGS.turn_username,winner_username:multiplayerGS.winner_username,winner_pieces:multiplayerGS.winner,opponent_username:multiplayerGS.opponent_username,views:multiplayerGS.views}),!singleplayer?/*#__PURE__*/_jsx(GameButtons,{gameOver:multiplayerGS.winner_username!=null}):null]})]}):null});}","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/GamePage.tsx"],"names":["GameVS","GameInfo","GameCountdown","GameChat","GameButtons","Board","GameHeader","State","useParams","useNavigate","useEffect","useState","Alerts","Server","GamePageUtils","Multiplayer","ClientType","GameState","Singleplayer","UPDATE_GAME_TIMEOUT","GamePage","props","navigate","game_id","waiting","setWaiting","defaultGameState","gameState","setGameState","singleplayer","multiplayerGS","local_username","getAppState","authentication","username","Promise","resolve","reject","startSingleplayerGame","joinMultiplayerGame","then","rr","setrr","forceRR","winner","client_type","VIEWER","opponent_username","board","turn","local_pieces","timer","setTimeout","updateMultiplayerGame","clearTimeout","buildSingleplayerGS","getGame","response","success","launchCriticalError","data","remoteGame","clientType","calcClientType","PLAYER_BLACK","player_b","joinAsPlayerB","joinResponse","remoteGameJoin","buildMultiplayerGS","player_w","incrementViewers","state","newMultiplayerGS","updateFromRemote","areGameStatesEqual","handleMakeMove","move","showNotification","promotion","isPromotionMove","askPromotionPiece","pieceAsString","promotionMove","substring","makeMove","message","switchTurn","newGameState","err","showGameError","opponent_pieces","winner_username","turn_username","views"],"mappings":"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","sourcesContent":["import './GamePage.css'\r\n\r\nimport GameVS from './components/GameVS/GameVS'\r\nimport GameInfo from './components/GameInfo/GameInfo'\r\nimport GameCountdown from './components/GameCountdown/GameCountdown'\r\nimport GameChat from './components/GameChat/GameChat'\r\nimport GameButtons from './components/GameButtons/GameButtons'\r\nimport Board from './components/ChessBoard/Board/Board'\r\nimport GameHeader from './components/GameHeader/GameHeader'\r\n\r\nimport State from '../../state/State'\r\n\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport Alerts from '../../utils/Alerts/sa-alerts'\r\nimport Server, { RemoteGame, ServerError } from '../../server/server'\r\n\r\nimport GamePageUtils from './utils'\r\nimport { BoardError } from '../../domain/errors'\r\nimport Multiplayer, { ClientType, IMultiplayerGS } from './GameState/MultiplayerGS'\r\nimport GameState from './GameState/GameState'\r\nimport Singleplayer from './GameState/Singleplayer'\r\n\r\n// LOW TIME BECAUSE ON DEVELOPMENT\r\nconst UPDATE_GAME_TIMEOUT = 1000\r\n\r\nexport default function GamePage(props: any) {\r\n  const navigate = useNavigate()\r\n\r\n  // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \r\n  const game_id = useParams().game_id!!\r\n  // Am i waiting for the game info to be retreived from the server ?\r\n  const [waiting, setWaiting] = useState(true)\r\n  const [gameState, setGameState] = useState(GameState.defaultGameState)\r\n  const singleplayer = game_id == \"sp\"\r\n  const multiplayerGS = gameState as IMultiplayerGS\r\n\r\n  const local_username = State.getAppState().authentication.username\r\n\r\n  // FIRST RENDER\r\n  useEffect(() => {\r\n    new Promise((resolve, reject) => {\r\n      if (singleplayer) {\r\n        startSingleplayerGame()\r\n        resolve(null)\r\n      } else {\r\n        joinMultiplayerGame().then(() => resolve(null))\r\n      }\r\n    }).then(() => setWaiting(false))\r\n    return () => { }\r\n  }, [])\r\n\r\n  // AUTO-REFRESH CALLS\r\n  const [rr, setrr] = useState(true)\r\n  const forceRR = () => { setrr(!rr) }\r\n  useEffect(() => {\r\n\r\n    while (true) {\r\n      if (singleplayer)\r\n        return\r\n\r\n      // It is Multiplayer Game\r\n      // Dont try update while i dont have the game\r\n      if (waiting)\r\n        return\r\n\r\n      // I'm not a viewer\r\n      // If game is Over\r\n      if (gameState.winner != null)\r\n        return\r\n\r\n      // Always Update if i'm a viewer\r\n      if (multiplayerGS.client_type == ClientType.VIEWER)\r\n        break\r\n\r\n      // Opponent has not been defined yet\r\n      if (multiplayerGS.opponent_username == null)\r\n        break\r\n\r\n      // Game has started + I am a player\r\n      // It's my turn AND \r\n      if (multiplayerGS.board.turn == multiplayerGS.local_pieces)\r\n        return\r\n\r\n      break\r\n    }\r\n\r\n    const timer = setTimeout(() => updateMultiplayerGame(), UPDATE_GAME_TIMEOUT)\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [gameState.board, waiting, rr])\r\n\r\n\r\n  function startSingleplayerGame() {\r\n    setGameState(Singleplayer.buildSingleplayerGS())\r\n  }\r\n\r\n  /**\r\n   * Join Multiplayer Game\r\n   * Attempts to get the game identified by the ID passed as URI param\r\n   * Based of of the [local_username] + the remote game it knows who we are: WHITE_PIECES, BLACK_PIECES or VIEWER\r\n   * If we are supposed to be the black player and there is no black player yet we tell the server it's us\r\n   * We update the local [gameState] based of of the remote Game we get from the server \r\n   */\r\n  async function joinMultiplayerGame() {\r\n    // const response = await State.joinGame(game_id)\r\n    const response = await Server.getGame(game_id)\r\n\r\n    if (!response.success) {\r\n      await launchCriticalError(response.data)\r\n      return\r\n    }\r\n\r\n    const remoteGame = response.data as RemoteGame\r\n    const clientType = Multiplayer.calcClientType(remoteGame, local_username)\r\n\r\n    if (clientType == ClientType.PLAYER_BLACK && remoteGame.player_b == null) {\r\n      // JOIN AS BLACK\r\n      const joinResponse = await Server.joinAsPlayerB(game_id)\r\n\r\n      if (joinResponse.success) {\r\n        const remoteGameJoin = joinResponse.data as RemoteGame\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGameJoin, clientType))\r\n      } else {\r\n        await launchCriticalError(joinResponse.data)\r\n        return\r\n      }\r\n    } else {\r\n      if (clientType == ClientType.VIEWER) {\r\n        // Increment viewer count\r\n        setGameState(Multiplayer.buildMultiplayerGS(remoteGame.player_w, remoteGame, clientType))\r\n        Server.incrementViewers(game_id)\r\n      } else {\r\n        // WHITE_PIECES PLAYER\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGame, clientType))\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update Multiplayer Game\r\n   * Updates the local game state if the remote game board is different\r\n   */\r\n  async function updateMultiplayerGame() {\r\n    const state = (gameState as IMultiplayerGS)\r\n\r\n    const response = await Server.getGame(state.game_id)\r\n\r\n    forceRR()\r\n\r\n    if (response.success) {\r\n      const remoteGame = response.data as RemoteGame\r\n      const newMultiplayerGS = Multiplayer.updateFromRemote(state, remoteGame)\r\n      if (!GameState.areGameStatesEqual(state, newMultiplayerGS)) {\r\n        setGameState(newMultiplayerGS)\r\n        return\r\n      }\r\n    } else {\r\n      // On error ignore it and gamestate won't be updated.\r\n      return\r\n    }\r\n    // On error ignore it and gamestate won't be updated.\r\n    return\r\n  }\r\n\r\n  /**\r\n   * Handle Make Move\r\n   * Performs a move on the local board and if it succeeds AND we are !singlePlayer validate with the server(updates remote game on success)\r\n   * If on singleplayer just swap the [local_pieces] to play as the opponent\r\n   */\r\n  async function handleMakeMove(move: string) {\r\n    if (gameState.board.turn != gameState.local_pieces) {\r\n      Alerts.showNotification(\"Not your turn!\")\r\n      return\r\n    }\r\n    // Validate move Locally (should never fail)\r\n    try {\r\n      const promotion: boolean = gameState.board.isPromotionMove(move)\r\n      if (promotion) {\r\n        const pieceAsString = await GamePageUtils.askPromotionPiece(gameState.local_pieces)\r\n        const promotionMove = pieceAsString + move.substring(1)\r\n        gameState.board.makeMove(promotionMove)\r\n        // MODIFY CHAR OF THE MOVE TO THE PROMOTION PIECE CHOOSEN\r\n      } else {\r\n        gameState.board.makeMove(move)\r\n      }\r\n    } catch (err) {\r\n      Alerts.showNotification((err as BoardError).message)\r\n      return\r\n    }\r\n    // SINGLEPLAYER\r\n    if (singleplayer) {\r\n      setGameState(Singleplayer.switchTurn(gameState))\r\n      return\r\n    }\r\n    // MULTIPLAYER\r\n    else {\r\n      // Validate with server\r\n      const response = await Server.makeMove(game_id, move)\r\n      if (!response.success) {\r\n        Alerts.showNotification(`Invalid Move: ${(response.data as ServerError).message}`)\r\n        return\r\n      }\r\n      const remoteGame = response.data as RemoteGame\r\n      // Change local state from server game response\r\n      const newGameState = Multiplayer.updateFromRemote(gameState as IMultiplayerGS, remoteGame)\r\n      setGameState(newGameState)\r\n    }\r\n  }\r\n\r\n  function launchCriticalError(err: BoardError | ServerError) {\r\n    return GamePageUtils.showGameError(game_id, navigate, err.message)\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      {\r\n        !waiting ?\r\n          (\r\n            <div className=\"game-container\">\r\n\r\n              <div className=\"game-container-row\">\r\n                <GameHeader singleplayer={singleplayer} game_id={game_id} game_over={gameState.board.winner != null} />\r\n              </div>\r\n\r\n              <hr className=\"separator\" />\r\n\r\n              {\r\n                singleplayer ?\r\n                  <div className=\"singleplayer-piece-turn\">\r\n                    {\r\n                      gameState.board.winner === null ?\r\n                        <>Turn : {gameState.board.turn === 'w' ? 'WHITE' : 'BLACK'}</>\r\n                        :\r\n                        <>\r\n                          {gameState.board.winner === 'w' ? 'WHITE' : 'BLACK'} pieces won!\r\n                          <button onClick={startSingleplayerGame} className=\"green-btn restart\">RESTART</button>\r\n                        </>\r\n                    }\r\n                  </div>\r\n                  : null\r\n              }\r\n\r\n              <div className=\"game-container-row\">\r\n                {\r\n                  !singleplayer ?\r\n                    <>\r\n                      <GameVS\r\n                        singleplayer={singleplayer}\r\n                        local_player_username={multiplayerGS.local_username} local_player_pieces={multiplayerGS.local_pieces}\r\n                        opponent_username={multiplayerGS.opponent_username} opponent_pieces={multiplayerGS.opponent_pieces}\r\n                      />\r\n                      <GameCountdown game_over={gameState.board.winner != null} initalTime={60} />\r\n                    </>\r\n                    : null\r\n                }\r\n              </div>\r\n\r\n              <div className=\"game-container-row\">\r\n                <Board\r\n                  singleplayer={singleplayer}\r\n                  board={gameState.board}\r\n                  local_player_pieces={multiplayerGS.local_pieces}\r\n                  isViewer={multiplayerGS.client_type === ClientType.VIEWER}\r\n                  turn={gameState.board.turn}\r\n                  game_over={gameState.board.winner != null}\r\n                  onMakeMove={handleMakeMove}\r\n                  onError={launchCriticalError}\r\n                />\r\n                {\r\n                  !singleplayer ?\r\n                    <GameChat game_id={game_id} local_player_username={multiplayerGS.local_username} opponent_username={multiplayerGS.opponent_username} />\r\n                    : null\r\n                }\r\n              </div>\r\n\r\n              <div className=\"game-container-row\">\r\n                <GameInfo\r\n                  singleplayer={singleplayer}\r\n                  game_over={multiplayerGS.winner_username != null}\r\n                  turn_username={multiplayerGS.turn_username}\r\n                  winner_username={multiplayerGS.winner_username}\r\n                  winner_pieces={multiplayerGS.winner}\r\n                  opponent_username={multiplayerGS.opponent_username}\r\n                  views={multiplayerGS.views}\r\n                />\r\n\r\n                {\r\n                  !singleplayer ?\r\n                    <GameButtons gameOver={multiplayerGS.winner_username != null} />\r\n                    : null\r\n                }\r\n              </div>\r\n            </div>\r\n          )\r\n          : null\r\n      }\r\n    </div >\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}