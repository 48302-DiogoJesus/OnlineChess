{"ast":null,"code":"import ERRORS from'./errors';import{charToPiece}from'./piece';var BOARD_HEIGHT=8;var BOARD_WIDTH=8;export function range(x,min,max){return x>=min&&x<=max;}/**\r\n * Position Object\r\n * Represents a position in a 2D environment such as a matrix\r\n * @property {column}\r\n * @property {row}\r\n */export function positionToString(position){return\"\".concat(String.fromCharCode('a'.charCodeAt(0)+position.column)).concat(BOARD_HEIGHT-position.row);}export function stringToPosition(string){if(string.length!=2)throw ERRORS.INVALID_POSITION_CONVERSION;var column=string.charCodeAt(0)-'a'.charCodeAt(0);var row='0'.charCodeAt(0)+BOARD_HEIGHT-string.charCodeAt(1);if(!range(column,0,BOARD_WIDTH-1)||!range(row,0,BOARD_HEIGHT-1))throw ERRORS.INVALID_POSITION_CONVERSION;return Position(column,row);}/**\r\n * Position\r\n * Build a position object\r\n * @param {column}\r\n * @param {row}\r\n * @returns a new PositionObject with the given {column} and {row}\r\n */export var Position=function Position(column,row){return{column:column,row:row};};/**\r\n * Move\r\n * Build a move object\r\n * @param {pieceChar}\r\n * @param {start} position\r\n * @param {end} position\r\n * @returns a new move object\r\n*/export var Move=function Move(pieceChar,start,end){return{pieceChar:pieceChar,start:start,end:end};};export function stringToMove(string){if(string.length!=5)throw ERRORS.INVALID_MOVE_CONVERSION;var piece=string[0];var start=stringToPosition(string.substring(1,3));var end=stringToPosition(string.substring(3,5));if(start===null||end===null||charToPiece(piece)===null)throw ERRORS.INVALID_MOVE_CONVERSION;return Move(piece,start,end);}export function moveToString(move){return move.pieceChar+positionToString(move.start)+positionToString(move.end);}","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/domain/position.ts"],"names":["ERRORS","charToPiece","BOARD_HEIGHT","BOARD_WIDTH","range","x","min","max","positionToString","position","String","fromCharCode","charCodeAt","column","row","stringToPosition","string","length","INVALID_POSITION_CONVERSION","Position","Move","pieceChar","start","end","stringToMove","INVALID_MOVE_CONVERSION","piece","substring","moveToString","move"],"mappings":"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","sourcesContent":["import ERRORS from './errors'\r\nimport { charToPiece } from './piece';\r\n\r\nconst BOARD_HEIGHT = 8\r\nconst BOARD_WIDTH = 8\r\n\r\nexport function range(x: number, min: number, max: number) {\r\n    return x >= min && x <= max;\r\n}\r\n\r\n/**\r\n * Position Object\r\n * Represents a position in a 2D environment such as a matrix\r\n * @property {column}\r\n * @property {row}\r\n */\r\nexport interface PositionObject {\r\n    column: number,\r\n    row: number\r\n}\r\n\r\nexport function positionToString(position: PositionObject): string {\r\n    return `${String.fromCharCode('a'.charCodeAt(0) + position.column)}${BOARD_HEIGHT - position.row}`\r\n}\r\n\r\nexport function stringToPosition(string: string): PositionObject {\r\n    if (string.length != 2)\r\n        throw ERRORS.INVALID_POSITION_CONVERSION\r\n\r\n    const column = string.charCodeAt(0) - 'a'.charCodeAt(0)\r\n    const row = ('0'.charCodeAt(0) + BOARD_HEIGHT) - string.charCodeAt(1)\r\n\r\n    if (!range(column, 0, BOARD_WIDTH - 1) || !range(row, 0, BOARD_HEIGHT - 1))\r\n        throw ERRORS.INVALID_POSITION_CONVERSION\r\n\r\n    return Position(column, row)\r\n}\r\n\r\n/**\r\n * Position\r\n * Build a position object\r\n * @param {column}\r\n * @param {row}\r\n * @returns a new PositionObject with the given {column} and {row}\r\n */\r\nexport const Position = (column: number, row: number): PositionObject => {\r\n    return { column, row }\r\n}\r\n\r\nexport interface MoveObject {\r\n    pieceChar: string,\r\n    start: PositionObject,\r\n    end: PositionObject\r\n}\r\n\r\n/**\r\n * Move\r\n * Build a move object\r\n * @param {pieceChar}\r\n * @param {start} position\r\n * @param {end} position\r\n * @returns a new move object\r\n*/\r\nexport const Move = (pieceChar: string, start: PositionObject, end: PositionObject): MoveObject => {\r\n    return { pieceChar, start, end }\r\n}\r\n\r\nexport function stringToMove(string: string) {\r\n    if (string.length != 5)\r\n        throw ERRORS.INVALID_MOVE_CONVERSION\r\n\r\n    const piece = string[0]\r\n    const start = stringToPosition(string.substring(1, 3))\r\n    const end = stringToPosition(string.substring(3, 5))\r\n\r\n    if (start === null || end === null || charToPiece(piece) === null)\r\n        throw ERRORS.INVALID_MOVE_CONVERSION\r\n\r\n    return Move(piece, start, end)\r\n}\r\n\r\nexport function moveToString(move: MoveObject): string {\r\n    return move.pieceChar + positionToString(move.start) + positionToString(move.end)\r\n}"]},"metadata":{},"sourceType":"module"}