{"ast":null,"code":"import { PieceColor, PieceType, charToPiece } from './piece';\nimport { Position } from './position';\nexport const BOARD_WIDTH = 8;\nexport const BOARD_HEIGHT = 8;\nexport class BoardObject {\n  constructor() {\n    let initBoard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.board = Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(null));\n\n    this.setPieceAt = (position, piece) => this.board[position.row][position.column] = piece;\n\n    this.getPieceAt = position => this.board[position.row][position.column];\n\n    if (initBoard) {\n      this.initBoard();\n    }\n  } // the board itelf. a matrix with 8 rows and 8 columns\n\n\n  // * Also a string.toBoard would be good\n  toString() {\n    var boardAsString = \"\";\n    this.board.map((row, rowIdx) => row.map((col, colIdx) => {\n      const piece = this.getPieceAt(Position(colIdx, rowIdx));\n\n      if (piece == null) {\n        boardAsString += \" \";\n      } else {\n        boardAsString += piece.color == PieceColor.WHITE ? piece.type.toUpperCase() : piece.type;\n      }\n    }));\n    return boardAsString;\n  }\n\n  initBoard() {\n    // SET BLACK PIECES\n    this.board[0][0] = {\n      color: PieceColor.BLACK,\n      type: PieceType.ROOK\n    };\n    this.board[0][1] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KNIGHT\n    };\n    this.board[0][2] = {\n      color: PieceColor.BLACK,\n      type: PieceType.BISHOP\n    };\n    this.board[0][3] = {\n      color: PieceColor.BLACK,\n      type: PieceType.QUEEN\n    };\n    this.board[0][4] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KING\n    };\n    this.board[0][5] = {\n      color: PieceColor.BLACK,\n      type: PieceType.BISHOP\n    };\n    this.board[0][6] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KNIGHT\n    };\n    this.board[0][7] = {\n      color: PieceColor.BLACK,\n      type: PieceType.ROOK\n    };\n    this.board[1][0] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][1] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][2] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][3] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][4] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][5] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][6] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    };\n    this.board[1][7] = {\n      color: PieceColor.BLACK,\n      type: PieceType.PAWN\n    }; // SET WHITE PIECES\n\n    this.board[6][0] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][1] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][2] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][3] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][4] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][5] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][6] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[6][7] = {\n      color: PieceColor.WHITE,\n      type: PieceType.PAWN\n    };\n    this.board[7][0] = {\n      color: PieceColor.WHITE,\n      type: PieceType.ROOK\n    };\n    this.board[7][1] = {\n      color: PieceColor.WHITE,\n      type: PieceType.KNIGHT\n    };\n    this.board[7][2] = {\n      color: PieceColor.WHITE,\n      type: PieceType.BISHOP\n    };\n    this.board[7][3] = {\n      color: PieceColor.WHITE,\n      type: PieceType.QUEEN\n    };\n    this.board[7][4] = {\n      color: PieceColor.WHITE,\n      type: PieceType.KING\n    };\n    this.board[7][5] = {\n      color: PieceColor.WHITE,\n      type: PieceType.BISHOP\n    };\n    this.board[7][6] = {\n      color: PieceColor.WHITE,\n      type: PieceType.KNIGHT\n    };\n    this.board[7][7] = {\n      color: PieceColor.WHITE,\n      type: PieceType.ROOK\n    };\n  }\n\n}\n\nfunction stringToBoard(boardAsString) {\n  if (boardAsString.length < BOARD_WIDTH * BOARD_HEIGHT) return null;\n  const newBoard = new BoardObject();\n\n  for (let row = 0, currChar = 0; row < BOARD_HEIGHT; row++) {\n    for (let col = 0; col < BOARD_WIDTH; col++, currChar++) {\n      const pieceChar = boardAsString[currChar];\n      const piece = charToPiece(pieceChar);\n      console.log(piece); // [piece] will be null if char does not correspond to a piece. Case of the \" \" representing an empty Tile\n\n      newBoard.setPieceAt(Position(col, row), piece);\n    }\n  }\n\n  return newBoard;\n}\n\nconst board = new BoardObject();\nconsole.log(stringToBoard(board.toString()));","map":{"version":3,"sources":["C:/Users/jesus/Desktop/TS/OnlineChess/onlinechess/src/domain/board.tsx"],"names":["PieceColor","PieceType","charToPiece","Position","BOARD_WIDTH","BOARD_HEIGHT","BoardObject","constructor","initBoard","board","Array","fill","map","setPieceAt","position","piece","row","column","getPieceAt","toString","boardAsString","rowIdx","col","colIdx","color","WHITE","type","toUpperCase","BLACK","ROOK","KNIGHT","BISHOP","QUEEN","KING","PAWN","stringToBoard","length","newBoard","currChar","pieceChar","console","log"],"mappings":"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","sourcesContent":["import { PieceObject, PieceColor, PieceType, charToPiece } from './piece'\r\nimport { PositionObject, Position } from './position'\r\n\r\nexport const BOARD_WIDTH = 8;\r\nexport const BOARD_HEIGHT = 8;\r\n\r\nexport class BoardObject {\r\n\r\n  constructor(initBoard: boolean = true) {\r\n    if (initBoard) {\r\n      this.initBoard()\r\n    }\r\n  }\r\n\r\n  // the board itelf. a matrix with 8 rows and 8 columns\r\n  board: Array<Array<PieceObject | null>> = Array(BOARD_HEIGHT).fill(null).map(()=>Array(BOARD_WIDTH).fill(null));\r\n\r\n  setPieceAt = (position: PositionObject, piece: PieceObject | null) => this.board[position.row][position.column] = piece\r\n\r\n  getPieceAt = (position: PositionObject) => this.board[position.row][position.column]\r\n\r\n  // * Also a string.toBoard would be good\r\n  toString() {\r\n    var boardAsString: string = \"\"\r\n    this.board.map((row, rowIdx) => row.map((col, colIdx) => { \r\n      const piece = this.getPieceAt(Position(colIdx, rowIdx))\r\n      if (piece == null) {\r\n        boardAsString += \" \"\r\n      } else { \r\n        boardAsString += piece.color == PieceColor.WHITE ? piece.type.toUpperCase() : piece.type\r\n      }\r\n    }))\r\n    return boardAsString\r\n  }\r\n\r\n  initBoard() {\r\n    // SET BLACK PIECES\r\n    this.board[0][0] = { color: PieceColor.BLACK, type: PieceType.ROOK }; this.board[0][1] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }; this.board[0][2] = { color: PieceColor.BLACK, type: PieceType.BISHOP }; this.board[0][3] = { color: PieceColor.BLACK, type: PieceType.QUEEN }; this.board[0][4] = { color: PieceColor.BLACK, type: PieceType.KING }; this.board[0][5] = { color: PieceColor.BLACK, type: PieceType.BISHOP }; this.board[0][6] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }; this.board[0][7] = { color: PieceColor.BLACK, type: PieceType.ROOK }; this.board[1][0] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][1] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][2] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][3] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][4] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][5] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][6] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][7] = { color: PieceColor.BLACK, type: PieceType.PAWN };\r\n\r\n    // SET WHITE PIECES\r\n    this.board[6][0] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][1] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][2] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][3] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][4] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][5] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][6] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][7] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[7][0] = { color: PieceColor.WHITE, type: PieceType.ROOK }; this.board[7][1] = { color: PieceColor.WHITE, type: PieceType.KNIGHT }; this.board[7][2] = { color: PieceColor.WHITE, type: PieceType.BISHOP }; this.board[7][3] = { color: PieceColor.WHITE, type: PieceType.QUEEN }; this.board[7][4] = { color: PieceColor.WHITE, type: PieceType.KING }; this.board[7][5] = { color: PieceColor.WHITE, type: PieceType.BISHOP }; this.board[7][6] = { color: PieceColor.WHITE, type: PieceType.KNIGHT }; this.board[7][7] = { color: PieceColor.WHITE, type: PieceType.ROOK };\r\n  }\r\n}\r\n\r\nfunction stringToBoard(boardAsString: string): BoardObject | null {\r\n  if (boardAsString.length < BOARD_WIDTH * BOARD_HEIGHT)\r\n    return null\r\n  const newBoard = new BoardObject()\r\n  for (let row = 0, currChar = 0; row < BOARD_HEIGHT; row++) {\r\n    for (let col = 0; col < BOARD_WIDTH; col++, currChar++) {\r\n      const pieceChar = boardAsString[currChar]\r\n        const piece: PieceObject | null = charToPiece(pieceChar)\r\n        console.log(piece)\r\n        // [piece] will be null if char does not correspond to a piece. Case of the \" \" representing an empty Tile\r\n        newBoard.setPieceAt(Position(col, row), piece)\r\n    }\r\n  }\r\n  return newBoard\r\n}\r\n\r\nconst board = new BoardObject()\r\nconsole.log(stringToBoard(board.toString()))"]},"metadata":{},"sourceType":"module"}