{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\components\\\\ChessBoard\\\\Board\\\\Board.tsx\",\n    _s = $RefreshSig$();\n\nimport './board.css';\nimport Tile, { TileColor } from '../Tile/Tile';\nimport { BoardObject, stringToBoard } from '../../../domain/board';\nimport { Position } from '../../../domain/position';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initSelectedTile = {\n  tile: null\n};\nconst initHighlightedTile = {\n  tile: null\n};\nexport default function Board(props) {\n  _s();\n\n  const [selectedTile, setSelectedTile] = useState(initSelectedTile);\n  const [highlightedTile, setHighlightedTile] = useState(initHighlightedTile);\n  const board = getBoardFromProps();\n\n  function getBoardFromProps() {\n    const boardAsString = props.boardString;\n    if (boardAsString == undefined) return new BoardObject();\n\n    try {\n      const convertedBoard = stringToBoard(boardAsString);\n      return convertedBoard;\n    } catch (e) {\n      const err = e;\n      err.message = `[DEBUG] Invalid Board: ${boardAsString.length} => ${boardAsString}\\nOriginal Error: ${err.message}`;\n      props.onError(err);\n    }\n\n    return new BoardObject();\n  }\n\n  function buildTile(row, column, piece) {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      piece: board.getPieceAt(Position(column, row)) // Tile state\n      ,\n      selected: isSelected(row, column),\n      highlighted: isHighlighted(row, column) // DARK or LIGHT \n      ,\n      color: calcTileColor(row, column) // Position\n      ,\n      position: Position(column, row) // Events\n      ,\n      onTileClick: () => handleTileClick(row, column, piece)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n  const calcTileColor = (row, col) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK;\n\n  const isHighlighted = (row, col) => {\n    var _highlightedTile$tile, _highlightedTile$tile2;\n\n    return row == ((_highlightedTile$tile = highlightedTile.tile) === null || _highlightedTile$tile === void 0 ? void 0 : _highlightedTile$tile.row) && col == ((_highlightedTile$tile2 = highlightedTile.tile) === null || _highlightedTile$tile2 === void 0 ? void 0 : _highlightedTile$tile2.column);\n  };\n\n  const isSelected = (row, col) => {\n    var _selectedTile$tile, _selectedTile$tile2;\n\n    return row == ((_selectedTile$tile = selectedTile.tile) === null || _selectedTile$tile === void 0 ? void 0 : _selectedTile$tile.row) && col == ((_selectedTile$tile2 = selectedTile.tile) === null || _selectedTile$tile2 === void 0 ? void 0 : _selectedTile$tile2.column);\n  };\n\n  const handleTileClick = (row, col, piece) => {\n    const clickPosition = Position(col, row);\n    console.log(`Clicked on ${col}:${row} | ${piece}`);\n\n    if (selectedTile.tile == null) {\n      if (board.getPieceAt(clickPosition)) setSelectedTile({\n        tile: clickPosition\n      });\n    } else {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board === null || board === void 0 ? void 0 : board.board.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: row.map((piece, colIdx) => buildTile(rowIdx, colIdx, piece))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"4dZpERYgznNgKKenl4iklshoRGY=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/components/ChessBoard/Board/Board.tsx"],"names":["Tile","TileColor","BoardObject","stringToBoard","Position","useState","initSelectedTile","tile","initHighlightedTile","Board","props","selectedTile","setSelectedTile","highlightedTile","setHighlightedTile","board","getBoardFromProps","boardAsString","boardString","undefined","convertedBoard","e","err","message","length","onError","buildTile","row","column","piece","getPieceAt","isSelected","isHighlighted","calcTileColor","handleTileClick","col","LIGHT","DARK","clickPosition","console","log","map","rowIdx","colIdx"],"mappings":"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","sourcesContent":["import './board.css'\r\n\r\nimport Tile, { TileColor } from '../Tile/Tile';\r\nimport { BoardObject, stringToBoard } from '../../../domain/board'\r\nimport { Position, PositionObject } from '../../../domain/position'\r\nimport { BoardError } from '../../../domain/errors';\r\nimport { Piece } from '../../../domain/piece';\r\nimport { useState } from 'react';\r\n\r\ninterface TileWrapper { tile: PositionObject | null }\r\n\r\nconst initSelectedTile: TileWrapper = { tile: null }\r\nconst initHighlightedTile: TileWrapper = { tile: null }\r\n\r\nexport default function Board(\r\n  props: {\r\n    boardString?: string,\r\n    local_username: string\r\n    onError: (error: BoardError) => void\r\n  }\r\n) {\r\n\r\n  const [selectedTile, setSelectedTile] = useState(initSelectedTile)\r\n  const [highlightedTile, setHighlightedTile] = useState(initHighlightedTile)\r\n\r\n  const board = getBoardFromProps()\r\n\r\n  function getBoardFromProps(): BoardObject {\r\n    const boardAsString: string | undefined = props.boardString\r\n\r\n    if (boardAsString == undefined)\r\n      return new BoardObject()\r\n\r\n    try {\r\n      const convertedBoard = stringToBoard(boardAsString)\r\n      return convertedBoard\r\n    } catch (e: any) {\r\n      const err = e as BoardError\r\n      err.message = `[DEBUG] Invalid Board: ${boardAsString.length} => ${boardAsString}\\nOriginal Error: ${err.message}`\r\n      props.onError(err)\r\n    }\r\n    return new BoardObject()\r\n  }\r\n\r\n  function buildTile(row: number, column: number, piece: Piece | null) {\r\n    return (\r\n      <Tile\r\n        piece={board.getPieceAt(Position(column, row))}\r\n\r\n        // Tile state\r\n        selected={isSelected(row, column)}\r\n        highlighted={isHighlighted(row, column)}\r\n\r\n        // DARK or LIGHT \r\n        color={calcTileColor(row, column)}\r\n\r\n        // Position\r\n        position={Position(column, row)}\r\n\r\n        // Events\r\n        onTileClick={() => handleTileClick(row, column, piece)}\r\n      />\r\n    )\r\n  }\r\n\r\n  const calcTileColor = (row: number, col: number) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK\r\n  const isHighlighted = (row: number, col: number) => (row == highlightedTile.tile?.row && col == highlightedTile.tile?.column)\r\n  const isSelected = (row: number, col: number) => (row == selectedTile.tile?.row && col == selectedTile.tile?.column)\r\n\r\n  const handleTileClick = (row: number, col: number, piece: Piece | null) => {\r\n    const clickPosition = Position(col, row)\r\n    console.log(`Clicked on ${col}:${row} | ${piece}`)\r\n\r\n    if (selectedTile.tile == null) {\r\n      if (board.getPieceAt(clickPosition))\r\n        setSelectedTile({ tile: clickPosition })\r\n    } else {\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div>\r\n        {\r\n          board?.board.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"board-row\">\r\n                {row.map((piece, colIdx) => buildTile(rowIdx, colIdx, piece))}\r\n              </div>\r\n            )\r\n          }\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}