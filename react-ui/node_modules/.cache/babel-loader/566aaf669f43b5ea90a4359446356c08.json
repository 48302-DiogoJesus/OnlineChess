{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\components\\\\ChessBoard\\\\Board\\\\Board.tsx\";\nimport './board.css';\nimport Tile, { TileColor } from '../Tile/Tile';\nimport { BoardObject } from '../../../domain/board';\nimport { Position } from '../../../domain/position';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  const generateBoard = () => {\n    const calcTileColor = (row, col) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK; // If a board is not passed in draw an empty board\n\n\n    const baseBoard = props.board === undefined ? new BoardObject() : props.board;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: baseBoard.board.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: row.map((col, colIdx) => {\n            return /*#__PURE__*/_jsxDEV(Tile, {\n              column: colIdx,\n              row: rowIdx,\n              color: calcTileColor(rowIdx, colIdx),\n              piece: baseBoard.getPieceAt(Position(colIdx, rowIdx))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: generateBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/components/ChessBoard/Board/Board.tsx"],"names":["Tile","TileColor","BoardObject","Position","Board","props","generateBoard","calcTileColor","row","col","LIGHT","DARK","baseBoard","board","undefined","map","rowIdx","colIdx","getPieceAt"],"mappings":";AAAA,OAAO,aAAP;AAEA,OAAOA,IAAP,IAAeC,SAAf,QAAgC,cAAhC;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAAUC,QAAV,QAA0B,0BAA1B;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAA8C;AAE3D,QAAMC,aAAa,GAAG,MAAM;AAC1B,UAAMC,aAAa,GAAG,CAACC,GAAD,EAAcC,GAAd,KAA8B,CAACA,GAAG,GAAGD,GAAP,IAAc,CAAd,KAAoB,CAApB,GAAwBP,SAAS,CAACS,KAAlC,GAA0CT,SAAS,CAACU,IAAxG,CAD0B,CAE1B;;;AACA,UAAMC,SAAS,GAAGP,KAAK,CAACQ,KAAN,KAAgBC,SAAhB,GAA4B,IAAIZ,WAAJ,EAA5B,GAAgDG,KAAK,CAACQ,KAAxE;AACA,wBACE;AAAA,gBAEID,SAAS,CAACC,KAAV,CAAgBE,GAAhB,CAAoB,CAACP,GAAD,EAAMQ,MAAN,KAAiB;AACnC,4BACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,oBAEER,GAAG,CAACO,GAAJ,CAAQ,CAACN,GAAD,EAAMQ,MAAN,KAAiB;AACvB,gCACE,QAAC,IAAD;AAAM,cAAA,MAAM,EAAEA,MAAd;AAAsB,cAAA,GAAG,EAAED,MAA3B;AAAmC,cAAA,KAAK,EAAET,aAAa,CAACS,MAAD,EAASC,MAAT,CAAvD;AAAyE,cAAA,KAAK,EAAEL,SAAS,CAACM,UAAV,CAAqBf,QAAQ,CAACc,MAAD,EAASD,MAAT,CAA7B;AAAhF;AAAA;AAAA;AAAA;AAAA,oBADF;AAGD,WAJD;AAFF;AAAA;AAAA;AAAA;AAAA,gBADF;AAUE,OAXJ;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD,GAvBD;;AA0BA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACKV,aAAa;AADlB;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;KAjCuBF,K","sourcesContent":["import './board.css'\r\n\r\nimport Tile, { TileColor } from '../Tile/Tile';\r\nimport { BoardObject } from '../../../domain/board'\r\nimport  { Position } from '../../../domain/position'\r\n\r\nexport default function Board(props: {board ?: BoardObject}) {\r\n\r\n  const generateBoard = () => {\r\n    const calcTileColor = (row: number, col: number) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK\r\n    // If a board is not passed in draw an empty board\r\n    const baseBoard = props.board === undefined ? new BoardObject() : props.board;\r\n    return (\r\n      <div>\r\n        {\r\n          baseBoard.board.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"board-row\">\r\n                {\r\n                row.map((col, colIdx) => {\r\n                  return (\r\n                    <Tile column={colIdx} row={rowIdx} color={calcTileColor(rowIdx, colIdx)} piece={baseBoard.getPieceAt(Position(colIdx, rowIdx))}/>\r\n                  )\r\n                }\r\n                )}\r\n              </div>\r\n            )}\r\n            )\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"board\">\r\n        {generateBoard()}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}