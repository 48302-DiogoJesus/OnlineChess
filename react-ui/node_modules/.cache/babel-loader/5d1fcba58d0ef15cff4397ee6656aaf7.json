{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\pages\\\\GamePage\\\\GamePage.tsx\",\n    _s = $RefreshSig$();\n\nimport './GamePage.css';\nimport GameVS from '../../components/GameVS/GameVS';\nimport GameInfo from '../../components/GameInfo/GameInfo';\nimport GameCountdown from '../../components/GameCountdown/GameCountdown';\nimport GameChat from '../../components/GameChat/GameChat';\nimport GameButtons from '../../components/GameButtons/GameButtons';\nimport Board from '../../components/ChessBoard/Board/Board';\nimport State from '../../state/State';\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport Alerts from '../../components/Alerts/sa-alerts';\nimport { PieceColor } from '../../domain/piece';\nimport Server from '../../server/server';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGameState = {\n  game: null\n};\nvar WhoAmI;\n\n(function (WhoAmI) {\n  WhoAmI[WhoAmI[\"PLAYER_WHITE\"] = 0] = \"PLAYER_WHITE\";\n  WhoAmI[WhoAmI[\"PLAYER_BLACK\"] = 1] = \"PLAYER_BLACK\";\n  WhoAmI[WhoAmI[\"VIEWER\"] = 2] = \"VIEWER\";\n  WhoAmI[WhoAmI[\"UNKNOWN\"] = 3] = \"UNKNOWN\";\n})(WhoAmI || (WhoAmI = {}));\n\nexport default function GamePage(props) {\n  _s();\n\n  const navigate = useNavigate(); // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \n\n  const game_id = useParams().game_id;\n  const [gameState, setGameState] = useState(initialGameState);\n  const username = State.GetAppState().authentication.username;\n  const [whoami, setWhoami] = useState(WhoAmI.UNKNOWN);\n  console.log(gameState.game);\n  console.log(WhoAmI[whoami]); // Run when the component first renders\n\n  useEffect(() => {\n    joinGame();\n    setInterval(updateFromRemote, 2000);\n  }, []);\n\n  async function updateFromRemote() {\n    var _gameState$game;\n\n    if (((_gameState$game = gameState.game) === null || _gameState$game === void 0 ? void 0 : _gameState$game.id) == null) return;\n    const response = await Server.getGame(gameState.game.id);\n\n    if (response.success) {\n      const remoteGame = response.data;\n      console.log(remoteGame);\n    }\n  }\n\n  async function joinGame() {\n    State.joinGame(game_id, (success, game, response) => {\n      if (success && game != null) {\n        const wai = findWhoAmI(game, username);\n        setWhoami(wai);\n\n        if (wai == WhoAmI.PLAYER_BLACK) {\n          // Tell the server i am the PLAYER_BLACK\n          Server.connectToGame(game_id).then(response => {\n            if (response.success) {\n              const upGame = response.data;\n              setGameState(createInternalGameStateFromRemote(whoami, upGame));\n            } else {\n              Alerts.showNotification(response.data.message);\n              console.log(response.data);\n            }\n          });\n        } else {\n          setGameState(createInternalGameStateFromRemote(whoami, game));\n        }\n      } else {\n        const errorResponse = response.data;\n        showJoinGameError(game_id, navigate, errorResponse.message);\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global-container\",\n    children: gameState.game == null ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"game-id-header\",\n          children: [\"Game ID : \", gameState.game.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameVS, {\n          player1: gameState.game.local_player_username,\n          player2: gameState.game.opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameCountdown, {\n          initalTime: 60\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameChat, {\n          game_id: game_id,\n          player1: gameState.game.local_player_username,\n          player2: gameState.game.opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameInfo, {\n          turn_username: gameState.game.turn_username,\n          opponent_username: gameState.game.opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameButtons, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamePage, \"plKhqn/PuOiObv6NpbYzRcRfJqE=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = GamePage;\n\nfunction createInternalGameStateFromRemote(whoami, remoteGS) {\n  var local_player;\n  var local_player_username;\n\n  if (whoami == WhoAmI.PLAYER_WHITE) {\n    local_player_username = remoteGS.player_white;\n  } else if (whoami == WhoAmI.PLAYER_BLACK) {\n    local_player_username = remoteGS.player_black;\n  } else {\n    local_player_username = remoteGS.player_white;\n  }\n\n  var local_player_pieces = remoteGS.player_white == local_player_username ? PieceColor.WHITE : PieceColor.BLACK;\n  const opponent_pieces = local_player_pieces == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n  const opponent_username = remoteGS.player_white == local_player_username ? remoteGS.player_black : remoteGS.player_white;\n  var winner_pieces = null;\n\n  if (remoteGS.winner != null) {\n    if (remoteGS.winner == local_player_username) {\n      winner_pieces = local_player_pieces;\n    } else {\n      winner_pieces = opponent_pieces;\n    }\n  }\n\n  const turn_username = remoteGS.turn == local_player_pieces ? local_player_username : opponent_username;\n  return {\n    game: {\n      id: remoteGS._id,\n      local_player_username: local_player_username,\n      local_player_pieces: local_player_pieces,\n      opponent_username: opponent_username,\n      opponent_pieces: opponent_pieces,\n      winner_username: remoteGS.winner,\n      winner_pieces: winner_pieces,\n      turn_username: turn_username != null ? turn_username : 'Opponent'\n    }\n  };\n} // Utils functions for this component\n\n\nfunction showJoinGameError(game_id, navigate, message) {\n  Alerts.showMessage(`Game Error: \"${game_id}\"`, message, {\n    goBackBtn: {\n      text: 'Go Back',\n      className: 'go-back-btn',\n      visible: true\n    }\n  }, [{\n    className: \"go-back-btn\",\n    eventName: \"click\",\n    execute: () => {\n      navigate('../');\n    }\n  }]);\n}\n\nfunction findWhoAmI(gameState, username) {\n  if (username == null) {\n    return WhoAmI.VIEWER;\n  } else if (username == gameState.player_white) {\n    return WhoAmI.PLAYER_WHITE;\n  } else {\n    // If i am not a viewer and not the game creator (WHITE) then auto join the game as BLACK\n    return WhoAmI.PLAYER_BLACK;\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/GamePage.tsx"],"names":["GameVS","GameInfo","GameCountdown","GameChat","GameButtons","Board","State","useParams","useNavigate","useEffect","useState","Alerts","PieceColor","Server","initialGameState","game","WhoAmI","GamePage","props","navigate","game_id","gameState","setGameState","username","GetAppState","authentication","whoami","setWhoami","UNKNOWN","console","log","joinGame","setInterval","updateFromRemote","id","response","getGame","success","remoteGame","data","wai","findWhoAmI","PLAYER_BLACK","connectToGame","then","upGame","createInternalGameStateFromRemote","showNotification","message","errorResponse","showJoinGameError","local_player_username","opponent_username","turn_username","remoteGS","local_player","PLAYER_WHITE","player_white","player_black","local_player_pieces","WHITE","BLACK","opponent_pieces","winner_pieces","winner","turn","_id","winner_username","showMessage","goBackBtn","text","className","visible","eventName","execute","VIEWER"],"mappings":"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","sourcesContent":["import './GamePage.css'\r\n\r\nimport GameVS from '../../components/GameVS/GameVS'\r\nimport GameInfo from '../../components/GameInfo/GameInfo'\r\nimport GameCountdown from '../../components/GameCountdown/GameCountdown'\r\nimport GameChat from '../../components/GameChat/GameChat'\r\nimport GameButtons from '../../components/GameButtons/GameButtons'\r\nimport Board from '../../components/ChessBoard/Board/Board'\r\n\r\nimport { RemoteGame } from '../../state/reducers/root'\r\nimport State from '../../state/State'\r\n\r\nimport { useParams, useNavigate, NavigateFunction } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport Alerts from '../../components/Alerts/sa-alerts'\r\nimport { PieceColor } from '../../domain/piece'\r\nimport Server, { ServerResponse, ServerError } from '../../server/server'\r\n\r\n\r\ninterface IntGameState {\r\n  id: string | null\r\n  local_player_username: string\r\n  local_player_pieces: PieceColor\r\n\r\n  opponent_username: string | null\r\n  opponent_pieces: PieceColor | null\r\n\r\n  winner_username: string | null\r\n  winner_pieces: PieceColor | null\r\n\r\n  turn_username: string\r\n}\r\n\r\ninterface InternalGameStateWrapper {\r\n  game: IntGameState | null\r\n}\r\n\r\nconst initialGameState: InternalGameStateWrapper = {\r\n  game: null\r\n}\r\n\r\nenum WhoAmI {\r\n  PLAYER_WHITE,\r\n  PLAYER_BLACK,\r\n  VIEWER,\r\n  UNKNOWN\r\n}\r\n\r\nexport default function GamePage(props: any) {\r\n\r\n  const navigate = useNavigate()\r\n  // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \r\n  const game_id = useParams().game_id!!\r\n  const [gameState, setGameState] = useState(initialGameState)\r\n  const username = State.GetAppState().authentication.username\r\n  const [whoami, setWhoami] = useState(WhoAmI.UNKNOWN)\r\n\r\n  console.log(gameState.game)\r\n  console.log(WhoAmI[whoami])\r\n\r\n\r\n  // Run when the component first renders\r\n  useEffect(() => {\r\n    joinGame()\r\n    setInterval(updateFromRemote, 2000)\r\n\r\n  }, [])\r\n\r\n  async function updateFromRemote() {\r\n    if (gameState.game?.id == null)\r\n      return\r\n    const response = await Server.getGame(gameState.game.id)\r\n    if (response.success) {\r\n      const remoteGame = response.data\r\n      console.log(remoteGame)\r\n    }\r\n  }\r\n\r\n  async function joinGame() {\r\n    State.joinGame(game_id, (success, game, response: ServerResponse) => {\r\n      if (success && game != null) {\r\n        const wai = findWhoAmI(game, username)\r\n\r\n        setWhoami(wai)\r\n\r\n        if (wai == WhoAmI.PLAYER_BLACK) {\r\n          // Tell the server i am the PLAYER_BLACK\r\n          Server.connectToGame(game_id)\r\n            .then(response => {\r\n              if (response.success) {\r\n                const upGame = response.data as RemoteGame\r\n                setGameState(createInternalGameStateFromRemote(whoami, upGame))\r\n              } else {\r\n                Alerts.showNotification((response.data as ServerError).message)\r\n                console.log(response.data)\r\n              }\r\n            })\r\n        } else {\r\n          setGameState(createInternalGameStateFromRemote(whoami, game))\r\n        }\r\n      } else {\r\n        const errorResponse = response.data as ServerError\r\n        showJoinGameError(game_id, navigate, errorResponse.message)\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      {\r\n        gameState.game == null ? (\r\n          null\r\n        ) : (\r\n          <div className=\"game-container\">\r\n            <div className=\"game-container-row\">\r\n              <h1 className=\"game-id-header\">Game ID : {gameState.game.id}</h1>\r\n            </div>\r\n            <div className=\"game-container-row\">\r\n              <GameVS player1={gameState.game.local_player_username} player2={gameState.game.opponent_username} />\r\n              <GameCountdown initalTime={60} />\r\n            </div>\r\n            <div className=\"game-container-row\">\r\n              <Board />\r\n              <GameChat game_id={game_id} player1={gameState.game.local_player_username} player2={gameState.game.opponent_username} />\r\n            </div>\r\n            <div className=\"game-container-row\">\r\n              <GameInfo turn_username={gameState.game.turn_username} opponent_username={gameState.game.opponent_username} />\r\n              <GameButtons />\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    </div >\r\n  )\r\n}\r\n\r\n\r\nfunction createInternalGameStateFromRemote(whoami: WhoAmI, remoteGS: RemoteGame): InternalGameStateWrapper {\r\n  var local_player: string\r\n\r\n  var local_player_username: string | null\r\n\r\n  if (whoami == WhoAmI.PLAYER_WHITE) {\r\n    local_player_username = remoteGS.player_white\r\n  }\r\n  else if (whoami == WhoAmI.PLAYER_BLACK) {\r\n    local_player_username = remoteGS.player_black!!\r\n  } else {\r\n    local_player_username = remoteGS.player_white\r\n  }\r\n\r\n  var local_player_pieces = remoteGS.player_white == local_player_username ? PieceColor.WHITE : PieceColor.BLACK\r\n  const opponent_pieces = local_player_pieces == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE\r\n\r\n  const opponent_username = remoteGS.player_white == local_player_username ? remoteGS.player_black : remoteGS.player_white\r\n\r\n  var winner_pieces = null\r\n\r\n  if (remoteGS.winner != null) {\r\n    if (remoteGS.winner == local_player_username) {\r\n      winner_pieces = local_player_pieces\r\n    } else {\r\n      winner_pieces = opponent_pieces\r\n    }\r\n  }\r\n\r\n  const turn_username = remoteGS.turn == local_player_pieces ? local_player_username : opponent_username\r\n\r\n  return {\r\n    game: {\r\n      id: remoteGS._id,\r\n\r\n      local_player_username: local_player_username,\r\n      local_player_pieces: local_player_pieces,\r\n\r\n      opponent_username: opponent_username,\r\n      opponent_pieces: opponent_pieces,\r\n\r\n      winner_username: remoteGS.winner,\r\n      winner_pieces: winner_pieces,\r\n\r\n      turn_username: turn_username != null ? turn_username : 'Opponent',\r\n    }\r\n  }\r\n}\r\n\r\n// Utils functions for this component\r\n\r\nfunction showJoinGameError(game_id: string, navigate: NavigateFunction, message: string) {\r\n  Alerts.showMessage(`Game Error: \"${game_id}\"`, message,\r\n    {\r\n      goBackBtn: {\r\n        text: 'Go Back',\r\n        className: 'go-back-btn',\r\n        visible: true\r\n      }\r\n    }, [\r\n    {\r\n      className: \"go-back-btn\",\r\n      eventName: \"click\",\r\n      execute: () => { navigate('../') }\r\n    }\r\n  ])\r\n}\r\n\r\nfunction findWhoAmI(gameState: RemoteGame, username: string | null): WhoAmI {\r\n  if (username == null) {\r\n    return WhoAmI.VIEWER\r\n  } else if (username == gameState.player_white) {\r\n    return WhoAmI.PLAYER_WHITE\r\n  } else {\r\n    // If i am not a viewer and not the game creator (WHITE) then auto join the game as BLACK\r\n    return WhoAmI.PLAYER_BLACK\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}