{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\pages\\\\GamePage\\\\GamePage.tsx\",\n    _s = $RefreshSig$();\n\nimport './GamePage.css';\nimport GameVS from '../../components/GameVS/GameVS';\nimport GameInfo from '../../components/GameInfo/GameInfo';\nimport GameCountdown from '../../components/GameCountdown/GameCountdown';\nimport GameChat from '../../components/GameChat/GameChat';\nimport GameButtons from '../../components/GameButtons/GameButtons';\nimport Board from '../../components/ChessBoard/Board/Board';\nimport State from '../../state/State';\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport Alerts from '../../components/Alerts/sa-alerts';\nimport { PieceColor } from '../../domain/piece';\nimport Server from '../../server/server';\nimport GamePageUtils from './utils';\nimport { BoardObject } from '../../domain/board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let CLIENT_TYPE;\n\n(function (CLIENT_TYPE) {\n  CLIENT_TYPE[CLIENT_TYPE[\"PLAYER_WHITE\"] = 0] = \"PLAYER_WHITE\";\n  CLIENT_TYPE[CLIENT_TYPE[\"PLAYER_BLACK\"] = 1] = \"PLAYER_BLACK\";\n  CLIENT_TYPE[CLIENT_TYPE[\"VIEWER\"] = 2] = \"VIEWER\";\n  CLIENT_TYPE[CLIENT_TYPE[\"UNKNOWN\"] = 3] = \"UNKNOWN\";\n})(CLIENT_TYPE || (CLIENT_TYPE = {}));\n\nconst initialGameState = {\n  game: null,\n  client_type: CLIENT_TYPE.VIEWER\n}; // LOW TIME BECAUSE ON DEVELOPMENT\n\nconst UPDATE_GAME_TIMEOUT = 1000;\nexport default function GamePage(props) {\n  _s();\n\n  const navigate = useNavigate(); // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \n\n  const game_id = useParams().game_id;\n  const [gameState, setGameState] = useState(initialGameState);\n  const username = State.GetAppState().authentication.username;\n  const singlePlayer = game_id == \"sp\";\n\n  function generateSinglePlayerGame() {\n    const simBoard = new BoardObject();\n    setGameState({\n      client_type: CLIENT_TYPE.PLAYER_WHITE,\n      game: {\n        id: game_id,\n        local_player_username: \"P1\",\n        local_player_pieces: PieceColor.WHITE,\n        opponent_username: \"P2\",\n        opponent_pieces: PieceColor.BLACK,\n        simBoard: simBoard,\n        winner_username: null,\n        winner_pieces: null,\n        turn_username: \"P1\",\n        turn_pieces: PieceColor.WHITE\n      }\n    });\n  } // FIRST RENDER\n\n\n  useEffect(() => {\n    if (singlePlayer) {\n      generateSinglePlayerGame();\n    } else {\n      joinGame();\n    }\n\n    return () => {};\n  }, []); // AUTO-REFRESH CALLS\n\n  const [rr, setrr] = useState(true);\n\n  const forceRR = () => {\n    setrr(!rr);\n  };\n\n  useEffect(() => {\n    var _gameState$game;\n\n    if (singlePlayer || ((_gameState$game = gameState.game) === null || _gameState$game === void 0 ? void 0 : _gameState$game.winner_username) != null) return;\n    const timer = setTimeout(() => {\n      updateFromRemote();\n    }, UPDATE_GAME_TIMEOUT);\n    return () => clearTimeout(timer);\n  }, [gameState.game, rr]);\n\n  async function updateFromRemote() {\n    var _gameState$game2;\n\n    if (((_gameState$game2 = gameState.game) === null || _gameState$game2 === void 0 ? void 0 : _gameState$game2.id) == null) return; // Do not auto-refresh if there is an OPPONENT AND it's MY turn. If no opponent wait for him to join\n\n    if (gameState.game.turn_username == username && gameState.game.opponent_username != null) return;\n    forceRR();\n    const response = await Server.getGame(game_id);\n\n    if (response.success) {\n      const updatedGame = GamePageUtils.getInternalGameStateFromRemote(gameState.client_type, response.data);\n\n      if (!GamePageUtils.areGamesEqual(gameState.game, updatedGame.game)) {\n        setGameState(updatedGame);\n      }\n    } else {\n      const error = response.data;\n      GamePageUtils.showGameError(game_id, navigate, error.message);\n    }\n  }\n\n  async function joinGame() {\n    const response = await State.joinGame(game_id);\n\n    if (response.success) {\n      const remoteGame = response.data;\n      const clientType = GamePageUtils.calcClientType(remoteGame, username);\n\n      if (clientType == CLIENT_TYPE.PLAYER_BLACK) {\n        // Tell the server i am the PLAYER_BLACK\n        Server.connectToGame(game_id).then(res => {\n          if (res.success) {\n            serverResponseToLocalGame(res, clientType);\n          } else {\n            Alerts.showNotification(res.data.message);\n          }\n        });\n      } else {\n        serverResponseToLocalGame(response, clientType);\n      }\n    } else {\n      const errorResponse = response.data;\n      GamePageUtils.showGameError(game_id, navigate, errorResponse.message);\n    }\n  }\n\n  function handleBoardError(err) {\n    GamePageUtils.showGameError(game_id, navigate, err.message);\n  }\n\n  function serverResponseToLocalGame(serverResponseWithGame) {\n    let clientType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : gameState.client_type;\n    setGameState(GamePageUtils.getInternalGameStateFromRemote(clientType, serverResponseWithGame.data));\n  }\n\n  async function handleMakeMove(move) {\n    // Validate Local\n    try {\n      var _gameState$game3;\n\n      (_gameState$game3 = gameState.game) === null || _gameState$game3 === void 0 ? void 0 : _gameState$game3.simBoard.makeMove(move);\n    } catch (err) {\n      const boardErr = err;\n      Alerts.showNotification(boardErr.message);\n      return;\n    }\n\n    if (singlePlayer) {\n      // const turn = gameState.game!!.simBoard.turn\n      // gameState.game!!.simBoard.turn = getOpponent(turn)\n      return;\n    } // Validate with server\n\n\n    const response = await Server.makeMove(game_id, move); // Change local state from server game response\n\n    serverResponseToLocalGame(response);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global-container\",\n    children: gameState.game == null ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"game-header id\",\n          children: [\"Game ID : \", game_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"game-header state\",\n          children: [\"(\", gameState.game.winner_username == null ? \"ongoing\" : \"over\", \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"go-to-main-page-btn\",\n            children: \"Main Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameVS, {\n          local_player_username: gameState.game.local_player_username,\n          local_player_pieces: gameState.game.local_player_pieces,\n          opponent_username: gameState.game.opponent_username,\n          opponent_pieces: gameState.game.opponent_pieces\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameCountdown, {\n          initalTime: 60\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          singleplayer: singlePlayer,\n          board: gameState.game.simBoard,\n          local_player_pieces: gameState.game.local_player_pieces,\n          turn: gameState.game.turn_pieces,\n          gameOver: gameState.game.winner_username != null,\n          onMakeMove: handleMakeMove,\n          onError: handleBoardError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameChat, {\n          game_id: game_id,\n          local_player_username: gameState.game.local_player_username,\n          opponent_username: gameState.game.opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameInfo, {\n          turn_username: gameState.game.turn_username,\n          winner_username: gameState.game.winner_username,\n          opponent_username: gameState.game.opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameButtons, {\n          gameOver: gameState.game.winner_username != null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamePage, \"ymCQ64VWQPm2Pzz0pt/l4ijJxhA=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = GamePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/GamePage.tsx"],"names":["GameVS","GameInfo","GameCountdown","GameChat","GameButtons","Board","State","useParams","useNavigate","Link","useEffect","useState","Alerts","PieceColor","Server","GamePageUtils","BoardObject","CLIENT_TYPE","initialGameState","game","client_type","VIEWER","UPDATE_GAME_TIMEOUT","GamePage","props","navigate","game_id","gameState","setGameState","username","GetAppState","authentication","singlePlayer","generateSinglePlayerGame","simBoard","PLAYER_WHITE","id","local_player_username","local_player_pieces","WHITE","opponent_username","opponent_pieces","BLACK","winner_username","winner_pieces","turn_username","turn_pieces","joinGame","rr","setrr","forceRR","timer","setTimeout","updateFromRemote","clearTimeout","response","getGame","success","updatedGame","getInternalGameStateFromRemote","data","areGamesEqual","error","showGameError","message","remoteGame","clientType","calcClientType","PLAYER_BLACK","connectToGame","then","res","serverResponseToLocalGame","showNotification","errorResponse","handleBoardError","err","serverResponseWithGame","handleMakeMove","move","makeMove","boardErr"],"mappings":"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","sourcesContent":["import './GamePage.css'\r\n\r\nimport GameVS from '../../components/GameVS/GameVS'\r\nimport GameInfo from '../../components/GameInfo/GameInfo'\r\nimport GameCountdown from '../../components/GameCountdown/GameCountdown'\r\nimport GameChat from '../../components/GameChat/GameChat'\r\nimport GameButtons from '../../components/GameButtons/GameButtons'\r\nimport Board from '../../components/ChessBoard/Board/Board'\r\n\r\nimport { RemoteGame } from '../../state/reducers/root'\r\nimport State from '../../state/State'\r\n\r\nimport { useParams, useNavigate, NavigateFunction, Link } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport Alerts from '../../components/Alerts/sa-alerts'\r\nimport { getOpponent, PieceColor } from '../../domain/piece'\r\nimport Server, { ServerResponse, ServerError } from '../../server/server'\r\n\r\nimport GamePageUtils from './utils'\r\nimport { BoardError } from '../../domain/errors'\r\nimport { BoardObject } from '../../domain/board'\r\n\r\n\r\nexport interface InternalGameState {\r\n  id: string | null\r\n  local_player_username: string\r\n  local_player_pieces: PieceColor\r\n\r\n  opponent_username: string | null\r\n  opponent_pieces: PieceColor | null\r\n\r\n  winner_username: string | null\r\n  winner_pieces: PieceColor | null\r\n\r\n  simBoard: BoardObject\r\n\r\n  turn_username: string\r\n  turn_pieces: PieceColor\r\n}\r\n\r\nexport enum CLIENT_TYPE {\r\n  PLAYER_WHITE,\r\n  PLAYER_BLACK,\r\n  VIEWER,\r\n  UNKNOWN\r\n}\r\n\r\nexport interface InternalGameStateWrapper {\r\n  client_type: CLIENT_TYPE\r\n  game: InternalGameState | null\r\n}\r\n\r\nconst initialGameState: InternalGameStateWrapper = {\r\n  game: null,\r\n  client_type: CLIENT_TYPE.VIEWER\r\n}\r\n\r\n// LOW TIME BECAUSE ON DEVELOPMENT\r\nconst UPDATE_GAME_TIMEOUT = 1000\r\n\r\nexport default function GamePage(props: any) {\r\n  const navigate = useNavigate()\r\n  // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \r\n  const game_id = useParams().game_id!!\r\n  const [gameState, setGameState] = useState(initialGameState)\r\n  const username = State.GetAppState().authentication.username\r\n  const singlePlayer = game_id == \"sp\"\r\n\r\n  function generateSinglePlayerGame() {\r\n    const simBoard = new BoardObject()\r\n\r\n    setGameState({\r\n      client_type: CLIENT_TYPE.PLAYER_WHITE,\r\n      game: {\r\n        id: game_id,\r\n        local_player_username: \"P1\",\r\n        local_player_pieces: PieceColor.WHITE,\r\n\r\n        opponent_username: \"P2\",\r\n        opponent_pieces: PieceColor.BLACK,\r\n\r\n        simBoard: simBoard,\r\n\r\n        winner_username: null,\r\n        winner_pieces: null,\r\n\r\n        turn_username: \"P1\",\r\n        turn_pieces: PieceColor.WHITE\r\n      }\r\n    })\r\n  }\r\n\r\n  // FIRST RENDER\r\n  useEffect(() => {\r\n    if (singlePlayer) {\r\n      generateSinglePlayerGame()\r\n    } else {\r\n      joinGame()\r\n    }\r\n    return () => { }\r\n  }, [])\r\n\r\n  // AUTO-REFRESH CALLS\r\n  const [rr, setrr] = useState(true)\r\n  const forceRR = () => { setrr(!rr) }\r\n  useEffect(() => {\r\n    if (singlePlayer || gameState.game?.winner_username != null)\r\n      return\r\n    const timer = setTimeout(() => { updateFromRemote() }, UPDATE_GAME_TIMEOUT)\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [gameState.game, rr])\r\n\r\n  async function updateFromRemote() {\r\n    if (gameState.game?.id == null)\r\n      return\r\n    // Do not auto-refresh if there is an OPPONENT AND it's MY turn. If no opponent wait for him to join\r\n    if (gameState.game.turn_username == username && gameState.game.opponent_username != null)\r\n      return\r\n\r\n    forceRR()\r\n\r\n    const response = await Server.getGame(game_id)\r\n\r\n    if (response.success) {\r\n      const updatedGame = GamePageUtils.getInternalGameStateFromRemote(gameState.client_type, response.data as RemoteGame)\r\n\r\n      if (!GamePageUtils.areGamesEqual(gameState.game, updatedGame.game!!)) {\r\n        setGameState(updatedGame)\r\n      }\r\n    } else {\r\n      const error = response.data as ServerError\r\n      GamePageUtils.showGameError(game_id, navigate, error.message)\r\n    }\r\n  }\r\n\r\n  async function joinGame() {\r\n    const response = await State.joinGame(game_id)\r\n\r\n    if (response.success) {\r\n      const remoteGame = response.data as RemoteGame\r\n      const clientType = GamePageUtils.calcClientType(remoteGame, username)\r\n\r\n      if (clientType == CLIENT_TYPE.PLAYER_BLACK) {\r\n        // Tell the server i am the PLAYER_BLACK\r\n        Server.connectToGame(game_id)\r\n          .then(res => {\r\n            if (res.success) {\r\n              serverResponseToLocalGame(res, clientType)\r\n            } else {\r\n              Alerts.showNotification((res.data as ServerError).message)\r\n            }\r\n          })\r\n      } else {\r\n        serverResponseToLocalGame(response, clientType)\r\n      }\r\n    } else {\r\n      const errorResponse = response.data as ServerError\r\n      GamePageUtils.showGameError(game_id, navigate, errorResponse.message)\r\n    }\r\n  }\r\n\r\n  function handleBoardError(err: BoardError) {\r\n    GamePageUtils.showGameError(game_id, navigate, err.message)\r\n  }\r\n\r\n  function serverResponseToLocalGame(serverResponseWithGame: ServerResponse, clientType: CLIENT_TYPE = gameState.client_type) {\r\n    setGameState(GamePageUtils.getInternalGameStateFromRemote(clientType, serverResponseWithGame.data as RemoteGame))\r\n  }\r\n\r\n  async function handleMakeMove(move: string) {\r\n    // Validate Local\r\n    try {\r\n      gameState.game?.simBoard.makeMove(move)\r\n    } catch (err) {\r\n      const boardErr = err as BoardError\r\n      Alerts.showNotification(boardErr.message)\r\n      return\r\n    }\r\n    if (singlePlayer) {\r\n      // const turn = gameState.game!!.simBoard.turn\r\n      // gameState.game!!.simBoard.turn = getOpponent(turn)\r\n      return\r\n    }\r\n    // Validate with server\r\n    const response = await Server.makeMove(game_id, move)\r\n    // Change local state from server game response\r\n    serverResponseToLocalGame(response)\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      {\r\n        gameState.game == null ? (\r\n          null\r\n        ) : (\r\n          <div className=\"game-container\">\r\n            <div className=\"game-container-row\">\r\n              <h1 className=\"game-header id\">Game ID : {game_id}</h1>\r\n              <h3 className=\"game-header state\">({gameState.game.winner_username == null ? \"ongoing\" : \"over\"})</h3>\r\n              <Link to=\"/\">\r\n                <button className=\"go-to-main-page-btn\">Main Page</button>\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"game-container-row\">\r\n              <GameVS\r\n                local_player_username={gameState.game.local_player_username} local_player_pieces={gameState.game.local_player_pieces}\r\n                opponent_username={gameState.game.opponent_username} opponent_pieces={gameState.game.opponent_pieces}\r\n              />\r\n              <GameCountdown initalTime={60} />\r\n            </div>\r\n\r\n            <div className=\"game-container-row\">\r\n\r\n              <Board\r\n                singleplayer={singlePlayer}\r\n                board={gameState.game.simBoard}\r\n                local_player_pieces={gameState.game.local_player_pieces}\r\n\r\n                turn={gameState.game.turn_pieces}\r\n\r\n                gameOver={gameState.game.winner_username != null}\r\n\r\n                onMakeMove={handleMakeMove}\r\n                onError={handleBoardError}\r\n              />\r\n\r\n              <GameChat game_id={game_id} local_player_username={gameState.game.local_player_username} opponent_username={gameState.game.opponent_username} />\r\n            </div>\r\n\r\n            <div className=\"game-container-row\">\r\n              <GameInfo\r\n                turn_username={gameState.game.turn_username}\r\n\r\n                winner_username={gameState.game.winner_username}\r\n\r\n                opponent_username={gameState.game.opponent_username} />\r\n              <GameButtons gameOver={gameState.game.winner_username != null} />\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    </div >\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}