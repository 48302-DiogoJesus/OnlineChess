{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\components\\\\ChessBoard\\\\Board\\\\Board.tsx\";\nimport './board.css';\nimport Tile, { TileColor } from '../Tile/Tile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_WIDTH = 8;\nconst BOARD_HEIGHT = 8; // A non empty board representation\n\nclass BoardObject {\n  constructor() {\n    this.board = Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(null));\n  }\n\n}\n\nexport default function Board(props) {\n  const generateBoard = () => {\n    const calcTileColor = (row, col) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK; // If a board is not passed in draw an empty board\n\n\n    let baseBoard = props.board === undefined ? new BoardObject() : props.board;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: baseBoard.board.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: row.map((col, colIdx) => {\n            return /*#__PURE__*/_jsxDEV(Tile, {\n              color: calcTileColor(rowIdx, colIdx)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: generateBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/TS/OnlineChess/onlinechess/src/components/ChessBoard/Board/Board.tsx"],"names":["Tile","TileColor","BOARD_WIDTH","BOARD_HEIGHT","BoardObject","board","Array","fill","map","Board","props","generateBoard","calcTileColor","row","col","LIGHT","DARK","baseBoard","undefined","rowIdx","colIdx"],"mappings":";AAAA,OAAO,aAAP;AAEA,OAAOA,IAAP,IAAeC,SAAf,QAAgC,cAAhC;;AAEA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,YAAY,GAAG,CAArB,C,CAEA;;AACA,MAAMC,WAAN,CAAkB;AAAA;AAAA,SAEhBC,KAFgB,GAE0BC,KAAK,CAACH,YAAD,CAAL,CAAoBI,IAApB,CAAyB,IAAzB,EAA+BC,GAA/B,CAAmC,MAAIF,KAAK,CAACJ,WAAD,CAAL,CAAmBK,IAAnB,CAAwB,IAAxB,CAAvC,CAF1B;AAAA;;AAAA;;AAKlB,eAAe,SAASE,KAAT,CAAeC,KAAf,EAA8C;AAE3D,QAAMC,aAAa,GAAG,MAAM;AAC1B,UAAMC,aAAa,GAAG,CAACC,GAAD,EAAcC,GAAd,KAA8B,CAACA,GAAG,GAAGD,GAAP,IAAc,CAAd,KAAoB,CAApB,GAAwBZ,SAAS,CAACc,KAAlC,GAA0Cd,SAAS,CAACe,IAAxG,CAD0B,CAE1B;;;AACA,QAAIC,SAAS,GAAGP,KAAK,CAACL,KAAN,KAAgBa,SAAhB,GAA4B,IAAId,WAAJ,EAA5B,GAAgDM,KAAK,CAACL,KAAtE;AACA,wBACE;AAAA,gBAEIY,SAAS,CAACZ,KAAV,CAAgBG,GAAhB,CAAoB,CAACK,GAAD,EAAMM,MAAN,KAAiB;AACnC,4BACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,oBAEEN,GAAG,CAACL,GAAJ,CAAQ,CAACM,GAAD,EAAMM,MAAN,KAAiB;AACvB,gCACE,QAAC,IAAD;AAAM,cAAA,KAAK,EAAER,aAAa,CAACO,MAAD,EAASC,MAAT;AAA1B;AAAA;AAAA;AAAA;AAAA,oBADF;AAGD,WAJD;AAFF;AAAA;AAAA;AAAA;AAAA,gBADF;AAUE,OAXJ;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD,GAvBD;;AA0BA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACKT,aAAa;AADlB;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;KAjCuBF,K","sourcesContent":["import './board.css'\r\n\r\nimport Tile, { TileColor } from '../Tile/Tile';\r\nimport { PieceObject } from '../Piece/Piece';\r\nconst BOARD_WIDTH = 8;\r\nconst BOARD_HEIGHT = 8;\r\n\r\n// A non empty board representation\r\nclass BoardObject {\r\n  // the board itelf. a matrix with 8 rows and 8 columns\r\n  board: Array<Array<PieceObject | null>> = Array(BOARD_HEIGHT).fill(null).map(()=>Array(BOARD_WIDTH).fill(null));\r\n}\r\n\r\nexport default function Board(props: {board ?: BoardObject}) {\r\n\r\n  const generateBoard = () => {\r\n    const calcTileColor = (row: number, col: number) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK\r\n    // If a board is not passed in draw an empty board\r\n    let baseBoard = props.board === undefined ? new BoardObject() : props.board;\r\n    return (\r\n      <div>\r\n        {\r\n          baseBoard.board.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"board-row\">\r\n                {\r\n                row.map((col, colIdx) => {\r\n                  return (\r\n                    <Tile color={calcTileColor(rowIdx, colIdx)}/>\r\n                  )\r\n                }\r\n                )}\r\n              </div>\r\n            )}\r\n            )\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"board\">\r\n        {generateBoard()}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}