{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\components\\\\ChessBoard\\\\Board\\\\Board.tsx\";\nimport './board.css';\nimport Tile, { TileColor } from '../Tile/Tile';\nimport { BoardObject, stringToBoard } from '../../../domain/board';\nimport { Position } from '../../../domain/position';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  const board = getBoardFromProps();\n\n  function getBoardFromProps() {\n    const boardAsString = props.boardString;\n    if (boardAsString == undefined) return new BoardObject();\n\n    try {\n      const convertedBoard = stringToBoard(boardAsString);\n      return convertedBoard;\n    } catch (e) {\n      const err = e;\n      err.message = `[DEBUG] Invalid Board: ${boardAsString.length} => ${boardAsString}\\nOriginal Error: ${err.message}`;\n      props.onError(err);\n    }\n\n    return new BoardObject();\n  }\n\n  function handleTileClick(row, rowPiece, col, colPiece) {}\n\n  const generateBoard = () => {\n    const calcTileColor = (row, col) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK; // If a board is not passed in draw an empty board\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board === null || board === void 0 ? void 0 : board.board.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: row.map((col, colIdx) => {\n            return /*#__PURE__*/_jsxDEV(Tile, {\n              selected: false,\n              column: colIdx,\n              row: rowIdx,\n              onTileClick: () => handleTileClick(rowIdx, row, col),\n              color: calcTileColor(rowIdx, colIdx),\n              piece: board.getPieceAt(Position(colIdx, rowIdx))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 23\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: generateBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/components/ChessBoard/Board/Board.tsx"],"names":["Tile","TileColor","BoardObject","stringToBoard","Position","Board","props","board","getBoardFromProps","boardAsString","boardString","undefined","convertedBoard","e","err","message","length","onError","handleTileClick","row","rowPiece","col","colPiece","generateBoard","calcTileColor","LIGHT","DARK","map","rowIdx","colIdx","getPieceAt"],"mappings":";AAAA,OAAO,aAAP;AAEA,OAAOA,IAAP,IAAeC,SAAf,QAAgC,cAAhC;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,uBAA3C;AACA,SAASC,QAAT,QAAyB,0BAAzB;;AAIA,eAAe,SAASC,KAAT,CACbC,KADa,EAKb;AAEA,QAAMC,KAAK,GAAGC,iBAAiB,EAA/B;;AAEA,WAASA,iBAAT,GAA0C;AACxC,UAAMC,aAAiC,GAAGH,KAAK,CAACI,WAAhD;AAEA,QAAID,aAAa,IAAIE,SAArB,EACE,OAAO,IAAIT,WAAJ,EAAP;;AAEF,QAAI;AACF,YAAMU,cAAc,GAAGT,aAAa,CAACM,aAAD,CAApC;AACA,aAAOG,cAAP;AACD,KAHD,CAGE,OAAOC,CAAP,EAAe;AACf,YAAMC,GAAG,GAAGD,CAAZ;AACAC,MAAAA,GAAG,CAACC,OAAJ,GAAe,0BAAyBN,aAAa,CAACO,MAAO,OAAMP,aAAc,qBAAoBK,GAAG,CAACC,OAAQ,EAAjH;AACAT,MAAAA,KAAK,CAACW,OAAN,CAAcH,GAAd;AACD;;AACD,WAAO,IAAIZ,WAAJ,EAAP;AACD;;AAED,WAASgB,eAAT,CAAyBC,GAAzB,EAAsCC,QAAtC,EAA8DC,GAA9D,EAA2EC,QAA3E,EAAmG,CAElG;;AAED,QAAMC,aAAa,GAAG,MAAM;AAC1B,UAAMC,aAAa,GAAG,CAACL,GAAD,EAAcE,GAAd,KAA8B,CAACA,GAAG,GAAGF,GAAP,IAAc,CAAd,KAAoB,CAApB,GAAwBlB,SAAS,CAACwB,KAAlC,GAA0CxB,SAAS,CAACyB,IAAxG,CAD0B,CAE1B;;;AAEA,wBACE;AAAA,gBAEInB,KAFJ,aAEIA,KAFJ,uBAEIA,KAAK,CAAEA,KAAP,CAAaoB,GAAb,CAAiB,CAACR,GAAD,EAAMS,MAAN,KAAiB;AAChC,4BACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,oBAEIT,GAAG,CAACQ,GAAJ,CAAQ,CAACN,GAAD,EAAMQ,MAAN,KAAiB;AACvB,gCACE,QAAC,IAAD;AACE,cAAA,QAAQ,EAAE,KADZ;AAEE,cAAA,MAAM,EAAEA,MAFV;AAGE,cAAA,GAAG,EAAED,MAHP;AAIE,cAAA,WAAW,EAAE,MAAMV,eAAe,CAACU,MAAD,EAAST,GAAT,EAAcE,GAAd,CAJpC;AAKE,cAAA,KAAK,EAAEG,aAAa,CAACI,MAAD,EAASC,MAAT,CALtB;AAME,cAAA,KAAK,EAAEtB,KAAK,CAACuB,UAAN,CAAiB1B,QAAQ,CAACyB,MAAD,EAASD,MAAT,CAAzB;AANT;AAAA;AAAA;AAAA;AAAA,oBADF;AAUD,WAXD;AAFJ;AAAA;AAAA;AAAA;AAAA,gBADF;AAkBD,OAnBD;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AA2BD,GA/BD;;AAkCA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACGL,aAAa;AADhB;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;KArEuBlB,K","sourcesContent":["import './board.css'\r\n\r\nimport Tile, { TileColor } from '../Tile/Tile';\r\nimport { BoardObject, stringToBoard } from '../../../domain/board'\r\nimport { Position } from '../../../domain/position'\r\nimport { BoardError } from '../../../domain/errors';\r\nimport { Piece } from '../../../domain/piece';\r\n\r\nexport default function Board(\r\n  props: {\r\n    boardString?: string,\r\n    onError: (error: BoardError) => void\r\n  }\r\n) {\r\n\r\n  const board = getBoardFromProps()\r\n\r\n  function getBoardFromProps(): BoardObject {\r\n    const boardAsString: string | undefined = props.boardString\r\n\r\n    if (boardAsString == undefined)\r\n      return new BoardObject()\r\n\r\n    try {\r\n      const convertedBoard = stringToBoard(boardAsString)\r\n      return convertedBoard\r\n    } catch (e: any) {\r\n      const err = e as BoardError\r\n      err.message = `[DEBUG] Invalid Board: ${boardAsString.length} => ${boardAsString}\\nOriginal Error: ${err.message}`\r\n      props.onError(err)\r\n    }\r\n    return new BoardObject()\r\n  }\r\n\r\n  function handleTileClick(row: string, rowPiece: Piece | null, col: string, colPiece: Piece | null) {\r\n\r\n  }\r\n\r\n  const generateBoard = () => {\r\n    const calcTileColor = (row: number, col: number) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK\r\n    // If a board is not passed in draw an empty board\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          board?.board.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"board-row\">\r\n                {\r\n                  row.map((col, colIdx) => {\r\n                    return (\r\n                      <Tile\r\n                        selected={false}\r\n                        column={colIdx}\r\n                        row={rowIdx}\r\n                        onTileClick={() => handleTileClick(rowIdx, row, col)}\r\n                        color={calcTileColor(rowIdx, colIdx)}\r\n                        piece={board.getPieceAt(Position(colIdx, rowIdx))}\r\n                      />\r\n                    )\r\n                  })\r\n                }\r\n              </div>\r\n            )\r\n          }\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {generateBoard()}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}