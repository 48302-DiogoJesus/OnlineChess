{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\chessbackend\\\\react-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import'./board.css';import Tile,{TileColor}from'../Tile/Tile';import{Move,moveToString,Position}from'../../../../../domain/position';import{King}from'../../../../../domain/piece';import{useState}from'react';import Alerts from'../../../../../utils/Alerts/sa-alerts';import{jsx as _jsx}from\"react/jsx-runtime\";var initSelectedTile={tile:null};var initTargetTiles=[];export default function Board(props){var _useState=useState(initSelectedTile),_useState2=_slicedToArray(_useState,2),selectedTile=_useState2[0],setSelectedTile=_useState2[1];var _useState3=useState(initTargetTiles),_useState4=_slicedToArray(_useState3,2),targetTiles=_useState4[0],setTargetTiles=_useState4[1];var board=props.board;function buildTile(row,column,piece){return/*#__PURE__*/_jsx(Tile,{piece:board.getPieceAt(Position(column,row))// Tile state\n,selected:isSelected(row,column),target:isTarget(row,column),lastMove:isFromLastMove(row,column)// DARK or LIGHT \n,color:calcTileColor(row,column)// Position\n,position:Position(column,row)// Events\n,onTileClick:function onTileClick(){return handleTileClick(row,column,piece);}});}var isFromLastMove=function isFromLastMove(row,column){if(board.moves.length==0)return false;var lastMove=board.moves.at(-1);if(lastMove.start.row==row&&lastMove.start.column==column||lastMove.end.row==row&&lastMove.end.column==column){return true;}return false;};var calcTileColor=function calcTileColor(row,col){return(col+row)%2===0?TileColor.LIGHT:TileColor.DARK;};var isTarget=function isTarget(row,col){return!props.game_over&&targetTiles.find(function(pos){return pos.row===row&&pos.column===col;})!=undefined;};var isSelected=function isSelected(row,col){var _selectedTile$tile,_selectedTile$tile2;return!props.game_over&&row==((_selectedTile$tile=selectedTile.tile)===null||_selectedTile$tile===void 0?void 0:_selectedTile$tile.row)&&col==((_selectedTile$tile2=selectedTile.tile)===null||_selectedTile$tile2===void 0?void 0:_selectedTile$tile2.column);};var handleTileClick=function handleTileClick(row,col,pieceClicked){setSelectedTile({tile:null});setTargetTiles([]);if(props.game_over||props.isViewer)return;if(!props.singleplayer&&board.turn!=props.local_player_pieces){Alerts.showNotification(\"Not your turn\");return;}var positionClicked=Position(col,row);// 1. TILE IS SELECTED\nif((selectedTile===null||selectedTile===void 0?void 0:selectedTile.tile)!=null){// CLICKED SELECTED TILE AGAIN. JUST UNSELECT\nif(isSelected(positionClicked.row,positionClicked.column)){return;}// CLICKED A TARGET - MAKE MOVE\nif(isTarget(positionClicked.row,positionClicked.column)){var selectedPiece=board.getPieceAt(selectedTile.tile);// board.makeMove(moveToString(Move(selectedPiece!!.toString(), selectedTile.tile, positionClicked)))\nprops.onMakeMove(moveToString(Move(selectedPiece.toString(),selectedTile.tile,positionClicked)));return;}// Select a tile + Show Possible Targets\nif((pieceClicked===null||pieceClicked===void 0?void 0:pieceClicked.color)==props.local_player_pieces){setSelectedTile({tile:positionClicked});var targets=[];if(pieceClicked instanceof King){targets=Array.from(board.generateSafeKingTargets());}else{targets=Array.from(board.generateAllPossibleTargets(positionClicked));}setTargetTiles(targets);}}// 2. TILE IS NOT SELECTED\nelse{// Select a tile + Show Possible Targets\nif((pieceClicked===null||pieceClicked===void 0?void 0:pieceClicked.color)==props.local_player_pieces){setSelectedTile({tile:positionClicked});var _targets=[];if(pieceClicked instanceof King){_targets=Array.from(board.generateSafeKingTargets());}else{_targets=Array.from(board.generateAllPossibleTargets(positionClicked));}setTargetTiles(_targets);}}};return/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:/*#__PURE__*/_jsx(\"div\",{children:board.board.map(function(row,rowIdx){return/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:row.map(function(piece,colIdx){return buildTile(rowIdx,colIdx,piece);})});})})});}","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/chessbackend/react-ui/src/pages/GamePage/components/ChessBoard/Board/Board.tsx"],"names":["Tile","TileColor","Move","moveToString","Position","King","useState","Alerts","initSelectedTile","tile","initTargetTiles","Board","props","selectedTile","setSelectedTile","targetTiles","setTargetTiles","board","buildTile","row","column","piece","getPieceAt","isSelected","isTarget","isFromLastMove","calcTileColor","handleTileClick","moves","length","lastMove","at","start","end","col","LIGHT","DARK","game_over","find","pos","undefined","pieceClicked","isViewer","singleplayer","turn","local_player_pieces","showNotification","positionClicked","selectedPiece","onMakeMove","toString","color","targets","Array","from","generateSafeKingTargets","generateAllPossibleTargets","map","rowIdx","colIdx"],"mappings":"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","sourcesContent":["import './board.css'\r\n\r\nimport Tile, { TileColor } from '../Tile/Tile';\r\nimport { BoardObject } from '../../../../../domain/board'\r\nimport { Move, moveToString, Position, PositionObject } from '../../../../../domain/position'\r\nimport { BoardError } from '../../../../../domain/errors';\r\nimport { King, Piece, PieceColor } from '../../../../../domain/piece';\r\nimport { useState } from 'react';\r\nimport Alerts from '../../../../../utils/Alerts/sa-alerts';\r\n\r\ninterface TileWrapper { tile: PositionObject | null }\r\n\r\nconst initSelectedTile: TileWrapper = { tile: null }\r\nconst initTargetTiles: PositionObject[] = []\r\n\r\nexport default function Board(\r\n  props: {\r\n    singleplayer: boolean\r\n\r\n    board: BoardObject,\r\n    local_player_pieces: PieceColor\r\n\r\n    isViewer: boolean\r\n    game_over: boolean\r\n\r\n    turn: PieceColor\r\n\r\n    onMakeMove: (move: string) => void\r\n    onError: (error: BoardError) => void\r\n  }\r\n) {\r\n\r\n  const [selectedTile, setSelectedTile] = useState(initSelectedTile)\r\n  const [targetTiles, setTargetTiles] = useState(initTargetTiles)\r\n  const board = props.board\r\n\r\n  function buildTile(row: number, column: number, piece: Piece | null) {\r\n    return (\r\n      <Tile\r\n        piece={board.getPieceAt(Position(column, row))}\r\n\r\n        // Tile state\r\n        selected={isSelected(row, column)}\r\n        target={isTarget(row, column)}\r\n        lastMove={isFromLastMove(row, column)}\r\n\r\n        // DARK or LIGHT \r\n        color={calcTileColor(row, column)}\r\n\r\n        // Position\r\n        position={Position(column, row)}\r\n\r\n        // Events\r\n        onTileClick={() => handleTileClick(row, column, piece)}\r\n      />\r\n    )\r\n  }\r\n\r\n  const isFromLastMove = (row: number, column: number) => {\r\n    if (board.moves.length == 0)\r\n      return false\r\n\r\n    const lastMove = board.moves.at(-1)!!\r\n\r\n    if (\r\n      (lastMove.start.row == row && lastMove.start.column == column)\r\n      ||\r\n      (lastMove.end.row == row && lastMove.end.column == column)\r\n    ) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  const calcTileColor = (row: number, col: number) =>\r\n    (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK\r\n\r\n  const isTarget = (row: number, col: number) =>\r\n    !props.game_over && targetTiles.find((pos) => pos.row === row && pos.column === col) != undefined\r\n\r\n  const isSelected = (row: number, col: number) =>\r\n    !props.game_over && (row == selectedTile.tile?.row && col == selectedTile.tile?.column)\r\n\r\n  const handleTileClick = (row: number, col: number, pieceClicked: Piece | null) => {\r\n    setSelectedTile({ tile: null })\r\n    setTargetTiles([])\r\n\r\n    if (props.game_over || props.isViewer)\r\n      return\r\n\r\n    if (!props.singleplayer && board.turn != props.local_player_pieces) {\r\n      Alerts.showNotification(\"Not your turn\")\r\n      return\r\n    }\r\n\r\n    const positionClicked = Position(col, row)\r\n\r\n    // 1. TILE IS SELECTED\r\n    if (selectedTile?.tile != null) {\r\n\r\n      // CLICKED SELECTED TILE AGAIN. JUST UNSELECT\r\n      if (isSelected(positionClicked.row, positionClicked.column)) {\r\n        return\r\n      }\r\n      // CLICKED A TARGET - MAKE MOVE\r\n      if (isTarget(positionClicked.row, positionClicked.column)) {\r\n        const selectedPiece = board.getPieceAt(selectedTile.tile)\r\n        // board.makeMove(moveToString(Move(selectedPiece!!.toString(), selectedTile.tile, positionClicked)))\r\n        props.onMakeMove(moveToString(Move(selectedPiece!!.toString(), selectedTile.tile, positionClicked)))\r\n        return\r\n      }\r\n\r\n      // Select a tile + Show Possible Targets\r\n      if (pieceClicked?.color == props.local_player_pieces) {\r\n        setSelectedTile({ tile: positionClicked })\r\n        let targets = []\r\n        if (pieceClicked instanceof King) {\r\n          targets = Array.from(board.generateSafeKingTargets())\r\n        } else {\r\n          targets = Array.from(board.generateAllPossibleTargets(positionClicked))\r\n        }\r\n        setTargetTiles(targets)\r\n      }\r\n    }\r\n    // 2. TILE IS NOT SELECTED\r\n    else {\r\n      // Select a tile + Show Possible Targets\r\n      if (pieceClicked?.color == props.local_player_pieces) {\r\n        setSelectedTile({ tile: positionClicked })\r\n        let targets = []\r\n        if (pieceClicked instanceof King) {\r\n          targets = Array.from(board.generateSafeKingTargets())\r\n        } else {\r\n          targets = Array.from(board.generateAllPossibleTargets(positionClicked))\r\n        }\r\n        setTargetTiles(targets)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div>\r\n        {\r\n          board.board.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"board-row\">\r\n                {row.map((piece, colIdx) => buildTile(rowIdx, colIdx, piece))}\r\n              </div>\r\n            )\r\n          }\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}