{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\components\\\\ChessBoard\\\\Board\\\\Board.tsx\";\nimport './board.css';\nimport Tile, { TileColor } from '../Tile/Tile';\nimport { BoardObject, stringToBoard } from '../../../domain/board';\nimport { Position } from '../../../domain/position';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  const baseBoard = props.boardString === undefined ? new BoardObject() : stringToBoard(props.boardString);\n\n  function handleTileClick() {}\n\n  const generateBoard = () => {\n    const calcTileColor = (row, col) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK; // If a board is not passed in draw an empty board\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: baseBoard === null || baseBoard === void 0 ? void 0 : baseBoard.board.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: row.map((col, colIdx) => {\n            return /*#__PURE__*/_jsxDEV(Tile, {\n              selected: false,\n              column: colIdx,\n              row: rowIdx,\n              onTileClick: (col, row) => console.log(\"Captured tile click on board:\", col, row),\n              color: calcTileColor(rowIdx, colIdx),\n              piece: baseBoard.getPieceAt(Position(colIdx, rowIdx))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 23\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: generateBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/components/ChessBoard/Board/Board.tsx"],"names":["Tile","TileColor","BoardObject","stringToBoard","Position","Board","props","baseBoard","boardString","undefined","handleTileClick","generateBoard","calcTileColor","row","col","LIGHT","DARK","board","map","rowIdx","colIdx","console","log","getPieceAt"],"mappings":";AAAA,OAAO,aAAP;AAEA,OAAOA,IAAP,IAAeC,SAAf,QAAgC,cAAhC;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,uBAA3C;AACA,SAASC,QAAT,QAAyB,0BAAzB;;AAEA,eAAe,SAASC,KAAT,CACbC,KADa,EAIb;AAEA,QAAMC,SAAS,GAAGD,KAAK,CAACE,WAAN,KAAsBC,SAAtB,GACd,IAAIP,WAAJ,EADc,GAEdC,aAAa,CAACG,KAAK,CAACE,WAAP,CAFjB;;AAIA,WAASE,eAAT,GAA2B,CAE1B;;AAED,QAAMC,aAAa,GAAG,MAAM;AAC1B,UAAMC,aAAa,GAAG,CAACC,GAAD,EAAcC,GAAd,KAA8B,CAACA,GAAG,GAAGD,GAAP,IAAc,CAAd,KAAoB,CAApB,GAAwBZ,SAAS,CAACc,KAAlC,GAA0Cd,SAAS,CAACe,IAAxG,CAD0B,CAE1B;;;AAEA,wBACE;AAAA,gBAEIT,SAFJ,aAEIA,SAFJ,uBAEIA,SAAS,CAAEU,KAAX,CAAiBC,GAAjB,CAAqB,CAACL,GAAD,EAAMM,MAAN,KAAiB;AACpC,4BACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,oBAEIN,GAAG,CAACK,GAAJ,CAAQ,CAACJ,GAAD,EAAMM,MAAN,KAAiB;AACvB,gCACE,QAAC,IAAD;AACE,cAAA,QAAQ,EAAE,KADZ;AAEE,cAAA,MAAM,EAAEA,MAFV;AAGE,cAAA,GAAG,EAAED,MAHP;AAIE,cAAA,WAAW,EAAE,CAACL,GAAD,EAAMD,GAAN,KAAcQ,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CR,GAA7C,EAAkDD,GAAlD,CAJ7B;AAKE,cAAA,KAAK,EAAED,aAAa,CAACO,MAAD,EAASC,MAAT,CALtB;AAME,cAAA,KAAK,EAAEb,SAAS,CAACgB,UAAV,CAAqBnB,QAAQ,CAACgB,MAAD,EAASD,MAAT,CAA7B;AANT;AAAA;AAAA;AAAA;AAAA,oBADF;AAUD,WAXD;AAFJ;AAAA;AAAA;AAAA;AAAA,gBADF;AAkBD,OAnBD;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AA2BD,GA/BD;;AAkCA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACGR,aAAa;AADhB;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;KArDuBN,K","sourcesContent":["import './board.css'\r\n\r\nimport Tile, { TileColor } from '../Tile/Tile';\r\nimport { BoardObject, stringToBoard } from '../../../domain/board'\r\nimport { Position } from '../../../domain/position'\r\n\r\nexport default function Board(\r\n  props: {\r\n    boardString?: string\r\n  }\r\n) {\r\n\r\n  const baseBoard = props.boardString === undefined\r\n    ? new BoardObject()\r\n    : stringToBoard(props.boardString);\r\n\r\n  function handleTileClick() {\r\n\r\n  }\r\n\r\n  const generateBoard = () => {\r\n    const calcTileColor = (row: number, col: number) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK\r\n    // If a board is not passed in draw an empty board\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          baseBoard?.board.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"board-row\">\r\n                {\r\n                  row.map((col, colIdx) => {\r\n                    return (\r\n                      <Tile\r\n                        selected={false}\r\n                        column={colIdx}\r\n                        row={rowIdx}\r\n                        onTileClick={(col, row) => console.log(\"Captured tile click on board:\", col, row)}\r\n                        color={calcTileColor(rowIdx, colIdx)}\r\n                        piece={baseBoard.getPieceAt(Position(colIdx, rowIdx))}\r\n                      />\r\n                    )\r\n                  })\r\n                }\r\n              </div>\r\n            )\r\n          }\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {generateBoard()}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}