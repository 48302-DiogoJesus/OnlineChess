{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\components\\\\ChessBoard\\\\Board\\\\Board.tsx\";\nimport './board.css';\nimport Tile, { TileColor } from '../Tile/Tile';\nimport { PieceType, PieceColor } from '../Piece/Piece';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_WIDTH = 8;\nconst BOARD_HEIGHT = 8;\n\n// A non empty board representation\nclass BoardObject {\n  constructor() {\n    this.board = Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(null));\n\n    this.setPieceAt = (position, piece) => this.board[position.row][position.column] = piece;\n\n    this.getPieceAt = position => this.board[position.row][position.column];\n  }\n\n  initBoard() {\n    this.board[0][0] = {\n      color: PieceColor.BLACK,\n      type: PieceType.ROOK\n    };\n    this.board[0][1] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KNIGHT\n    };\n    this.board[0][2] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KNIGHT\n    };\n    this.board[0][3] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KNIGHT\n    };\n    this.board[0][4] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KNIGHT\n    };\n    this.board[0][5] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KNIGHT\n    };\n    this.board[0][6] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KNIGHT\n    };\n    this.board[0][7] = {\n      color: PieceColor.BLACK,\n      type: PieceType.KNIGHT\n    };\n  }\n\n}\n\nexport default function Board(props) {\n  const generateBoard = () => {\n    const calcTileColor = (row, col) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK; // If a board is not passed in draw an empty board\n\n\n    let baseBoard = props.board === undefined ? new BoardObject() : props.board;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: baseBoard.board.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: row.map((col, colIdx) => {\n            return /*#__PURE__*/_jsxDEV(Tile, {\n              color: calcTileColor(rowIdx, colIdx),\n              piece: {\n                color: PieceColor.BLACK,\n                type: PieceType.ROOK\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: generateBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/TS/OnlineChess/onlinechess/src/components/ChessBoard/Board/Board.tsx"],"names":["Tile","TileColor","PieceType","PieceColor","BOARD_WIDTH","BOARD_HEIGHT","BoardObject","board","Array","fill","map","setPieceAt","position","piece","row","column","getPieceAt","initBoard","color","BLACK","type","ROOK","KNIGHT","Board","props","generateBoard","calcTileColor","col","LIGHT","DARK","baseBoard","undefined","rowIdx","colIdx"],"mappings":"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","sourcesContent":["import './board.css'\r\n\r\nimport Tile, { TileColor } from '../Tile/Tile';\r\nimport { PieceObject, PieceType, PieceColor } from '../Piece/Piece';\r\nconst BOARD_WIDTH = 8;\r\nconst BOARD_HEIGHT = 8;\r\n\r\ninterface Position {\r\n  column: number,\r\n  row: number\r\n}\r\n\r\n// A non empty board representation\r\nclass BoardObject {\r\n  // the board itelf. a matrix with 8 rows and 8 columns\r\n  board: Array<Array<PieceObject | null>> = Array(BOARD_HEIGHT).fill(null).map(()=>Array(BOARD_WIDTH).fill(null));\r\n\r\n  setPieceAt = (position: Position, piece: PieceObject) => this.board[position.row][position.column] = piece\r\n\r\n  getPieceAt = (position: Position) => this.board[position.row][position.column]\r\n\r\n  initBoard() {\r\n    this.board[0][0] = { color: PieceColor.BLACK, type: PieceType.ROOK }\r\n    this.board[0][1] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }\r\n    this.board[0][2] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }\r\n    this.board[0][3] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }\r\n    this.board[0][4] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }\r\n    this.board[0][5] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }\r\n    this.board[0][6] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }\r\n    this.board[0][7] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }\r\n  }\r\n}\r\n\r\nexport default function Board(props: {board ?: BoardObject}) {\r\n\r\n  const generateBoard = () => {\r\n    const calcTileColor = (row: number, col: number) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK\r\n    // If a board is not passed in draw an empty board\r\n    let baseBoard = props.board === undefined ? new BoardObject() : props.board;\r\n    return (\r\n      <div>\r\n        {\r\n          baseBoard.board.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"board-row\">\r\n                {\r\n                row.map((col, colIdx) => {\r\n                  return (\r\n                    <Tile color={calcTileColor(rowIdx, colIdx)} piece={{color: PieceColor.BLACK, type: PieceType.ROOK}}/>\r\n                  )\r\n                }\r\n                )}\r\n              </div>\r\n            )}\r\n            )\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"board\">\r\n        {generateBoard()}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}