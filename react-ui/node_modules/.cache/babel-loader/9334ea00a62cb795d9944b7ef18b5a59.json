{"ast":null,"code":"import _inherits from\"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\chessbackend\\\\react-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";import _createSuper from\"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\chessbackend\\\\react-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";import _classCallCheck from\"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\chessbackend\\\\react-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";import _createClass from\"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\chessbackend\\\\react-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";import{Position}from\"./position\";/**\r\n * Piece Object\r\n * Schema of a PieceObject\r\n * @property {color} Color of the piece: Black or White\r\n * @property {type} Piece type: Pawn, Rook, Knight, King, Queen, Bishop\r\n\r\n export interface PieceObject {\r\n    color: PieceColor,\r\n    type: PieceType\r\n}\r\n */ /**\r\n * Piece Color\r\n */export var PieceColor;(function(PieceColor){PieceColor[\"BLACK\"]=\"b\";PieceColor[\"WHITE\"]=\"w\";})(PieceColor||(PieceColor={}));export function getOpponent(pieceColor){return pieceColor===PieceColor.BLACK?PieceColor.WHITE:PieceColor.BLACK;}/**\r\n * Select by PieceColor\r\n * @param {piece} PieceObject to evaluate the color from\r\n * @param {ifWhite} Return this value if [piece] is white\r\n * @param {ifBlack} Return this value if [piece] is black\r\n * @returns {ifWhite} if {piece} is white, {ifBlack} if {ifWhite} is black\r\n */export function selectByPieceColor(pieceColor,ifWhite,ifBlack){return pieceColor===PieceColor.WHITE?ifWhite:ifBlack;}/**\r\n * Piece Type\r\n */export var PieceType;(function(PieceType){PieceType[\"PAWN\"]=\"p\";PieceType[\"KING\"]=\"k\";PieceType[\"QUEEN\"]=\"q\";PieceType[\"ROOK\"]=\"r\";PieceType[\"KNIGHT\"]=\"n\";PieceType[\"BISHOP\"]=\"b\";})(PieceType||(PieceType={}));var Direction;(function(Direction){Direction[Direction[\"UP\"]=0]=\"UP\";Direction[Direction[\"DOWN\"]=1]=\"DOWN\";Direction[Direction[\"LEFT\"]=2]=\"LEFT\";Direction[Direction[\"RIGHT\"]=3]=\"RIGHT\";})(Direction||(Direction={}));export var MoveState;(function(MoveState){MoveState[MoveState[\"OK\"]=0]=\"OK\";MoveState[MoveState[\"NO_CHANGE\"]=1]=\"NO_CHANGE\";MoveState[MoveState[\"PATH_INVALID\"]=2]=\"PATH_INVALID\";MoveState[MoveState[\"PATH_BLOCKED\"]=3]=\"PATH_BLOCKED\";MoveState[MoveState[\"DEST_BLOCKED\"]=4]=\"DEST_BLOCKED\";})(MoveState||(MoveState={}));function calculateDirection(move){var result=new Set();if(move.end.row<move.start.row)result.add(Direction.UP);else if(move.end.row>move.start.row)result.add(Direction.DOWN);if(move.end.column<move.start.column)result.add(Direction.LEFT);else if(move.end.column>move.start.column)result.add(Direction.RIGHT);return result;}export var Piece=/*#__PURE__*/function(){function Piece(){var _this=this;_classCallCheck(this,Piece);this.color=void 0;this.validPath=void 0;this.pathBlocked=function(move,board){var direction=calculateDirection(move);var current=Position(move.start.column,move.start.row);while(true){if(direction.has(Direction.UP))current.row--;if(direction.has(Direction.DOWN))current.row++;if(direction.has(Direction.LEFT))current.column--;if(direction.has(Direction.RIGHT))current.column++;if(current.column==move.end.column&&current.row==move.end.row){return false;}if(board.getPieceAt(current)!==null)return true;}};this.destinationBlocked=function(move,board){var other=board.getPieceAt(move.end);if(other==null||other==undefined)return false;return other.color==_this.color;};}_createClass(Piece,[{key:\"checkMove\",value:function checkMove(move,board){if(move.start==move.end)return MoveState.NO_CHANGE;if(!this.validPath(move,board))return MoveState.PATH_INVALID;if(!(board.getPieceAt(move.start)instanceof Knight)&&this.pathBlocked(move,board))return MoveState.PATH_BLOCKED;if(this.destinationBlocked(move,board))return MoveState.DEST_BLOCKED;return MoveState.OK;}}]);return Piece;}();export var King=/*#__PURE__*/function(_Piece){_inherits(King,_Piece);var _super=_createSuper(King);function King(pieceColor){var _this2;_classCallCheck(this,King);_this2=_super.call(this);_this2.color=void 0;_this2.validPath=function(move,board){var absoluteRow=Math.abs(move.start.row-move.end.row);var absoluteColumn=Math.abs(move.start.column-move.end.column);return absoluteRow<=1&&absoluteColumn<=1;};_this2.toString=function(){return _this2.color==PieceColor.WHITE?'K':'k';};_this2.color=pieceColor;return _this2;}return _createClass(King);}(Piece);export var Rook=/*#__PURE__*/function(_Piece2){_inherits(Rook,_Piece2);var _super2=_createSuper(Rook);function Rook(pieceColor){var _this3;_classCallCheck(this,Rook);_this3=_super2.call(this);_this3.color=void 0;_this3.validPath=function(move,board){return move.start.column==move.end.column||move.start.row==move.end.row;};_this3.toString=function(){return _this3.color==PieceColor.WHITE?'R':'r';};_this3.color=pieceColor;return _this3;}return _createClass(Rook);}(Piece);export var Bishop=/*#__PURE__*/function(_Piece3){_inherits(Bishop,_Piece3);var _super3=_createSuper(Bishop);function Bishop(pieceColor){var _this4;_classCallCheck(this,Bishop);_this4=_super3.call(this);_this4.color=void 0;_this4.validPath=function(move,board){return Math.abs(move.start.column-move.end.column)==Math.abs(move.start.row-move.end.row);};_this4.toString=function(){return _this4.color==PieceColor.WHITE?'B':'b';};_this4.color=pieceColor;return _this4;}return _createClass(Bishop);}(Piece);export var Queen=/*#__PURE__*/function(_Piece4){_inherits(Queen,_Piece4);var _super4=_createSuper(Queen);function Queen(pieceColor){var _this5;_classCallCheck(this,Queen);_this5=_super4.call(this);_this5.color=void 0;_this5.validPath=function(move,board){return move.start.row==move.end.row||move.start.column==move.end.column||Math.abs(move.start.row-move.end.row)==Math.abs(move.start.column-move.end.column);};_this5.toString=function(){return _this5.color==PieceColor.WHITE?'Q':'q';};_this5.color=pieceColor;return _this5;}return _createClass(Queen);}(Piece);export var Knight=/*#__PURE__*/function(_Piece5){_inherits(Knight,_Piece5);var _super5=_createSuper(Knight);function Knight(pieceColor){var _this6;_classCallCheck(this,Knight);_this6=_super5.call(this);_this6.color=void 0;_this6.validPath=function(move,board){return Math.abs(move.end.column-move.start.column)==2&&Math.abs(move.end.row-move.start.row)==1||Math.abs(move.end.column-move.start.column)==1&&Math.abs(move.end.row-move.start.row)==2;};_this6.toString=function(){return _this6.color==PieceColor.WHITE?'N':'n';};_this6.color=pieceColor;return _this6;}return _createClass(Knight);}(Piece);export var Pawn=/*#__PURE__*/function(_Piece6){_inherits(Pawn,_Piece6);var _super6=_createSuper(Pawn);function Pawn(pieceColor){var _this7;_classCallCheck(this,Pawn);_this7=_super6.call(this);_this7.hasMoved=false;_this7.color=void 0;_this7.validPath=function(move,board){var steps=_this7.hasMoved?1:2;var direction=selectByPieceColor(_this7.color,-1,1);return(// Vertical movement\nmove.start.column==move.end.column&&(direction==-1?board.getPieceAt(move.end)==null&&move.start.row>move.end.row&&move.start.row-move.end.row<=steps:board.getPieceAt(move.end)==null&&move.end.row>move.start.row&&move.end.row-move.start.row<=steps)||// Horizontal movement\nMath.abs(move.start.column-move.end.column)==1&&move.end.row-move.start.row==direction&&board.getPieceAt(move.end)!=null);};_this7.toString=function(){return _this7.color==PieceColor.WHITE?'P':'p';};_this7.color=pieceColor;return _this7;}return _createClass(Pawn);}(Piece);var charPieceMap={'K':King,'R':Rook,'B':Bishop,'Q':Queen,'N':Knight,'P':Pawn};export var charToPiece=function charToPiece(char){var charUpper=char.toUpperCase();var color=char===char.toUpperCase()?PieceColor.WHITE:PieceColor.BLACK;for(var _i=0,_Object$entries=Object.entries(charPieceMap);_i<_Object$entries.length;_i++){var entry=_Object$entries[_i];var pieceChar=entry[0];var pieceClass=entry[1];if(pieceChar===charUpper){var newPiece=new pieceClass(color);return newPiece;}}return null;};export var pieceToChar=function pieceToChar(piece){var pieceChar;if(piece instanceof Knight){pieceChar='N';}else{pieceChar=piece.constructor.name[0];}return selectByPieceColor(piece.color,pieceChar.toUpperCase(),pieceChar.toLowerCase());};","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/chessbackend/react-ui/src/domain/piece.ts"],"names":["Position","PieceColor","getOpponent","pieceColor","BLACK","WHITE","selectByPieceColor","ifWhite","ifBlack","PieceType","Direction","MoveState","calculateDirection","move","result","Set","end","row","start","add","UP","DOWN","column","LEFT","RIGHT","Piece","color","validPath","pathBlocked","board","direction","current","has","getPieceAt","destinationBlocked","other","undefined","NO_CHANGE","PATH_INVALID","Knight","PATH_BLOCKED","DEST_BLOCKED","OK","King","absoluteRow","Math","abs","absoluteColumn","toString","Rook","Bishop","Queen","Pawn","hasMoved","steps","charPieceMap","charToPiece","char","charUpper","toUpperCase","Object","entries","entry","pieceChar","pieceClass","newPiece","pieceToChar","piece","constructor","name","toLowerCase"],"mappings":"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","sourcesContent":["import { BoardObject } from \"./board\"\r\nimport { MoveObject, Position } from \"./position\"\r\n\r\n/**\r\n * Piece Object\r\n * Schema of a PieceObject\r\n * @property {color} Color of the piece: Black or White\r\n * @property {type} Piece type: Pawn, Rook, Knight, King, Queen, Bishop\r\n\r\n export interface PieceObject {\r\n    color: PieceColor,\r\n    type: PieceType\r\n}\r\n */\r\n/**\r\n * Piece Color\r\n */\r\n\r\nexport enum PieceColor {\r\n    BLACK = 'b',\r\n    WHITE = 'w',\r\n}\r\n\r\nexport function getOpponent(pieceColor: PieceColor) {\r\n    return pieceColor === PieceColor.BLACK ? PieceColor.WHITE : PieceColor.BLACK;\r\n}\r\n\r\n/**\r\n * Select by PieceColor\r\n * @param {piece} PieceObject to evaluate the color from\r\n * @param {ifWhite} Return this value if [piece] is white\r\n * @param {ifBlack} Return this value if [piece] is black\r\n * @returns {ifWhite} if {piece} is white, {ifBlack} if {ifWhite} is black\r\n */\r\nexport function selectByPieceColor<T>(pieceColor: PieceColor, ifWhite: T, ifBlack: T): T {\r\n    return pieceColor === PieceColor.WHITE ? ifWhite : ifBlack\r\n}\r\n\r\n/**\r\n * Piece Type\r\n */\r\nexport enum PieceType {\r\n    PAWN = 'p',\r\n    KING = 'k',\r\n    QUEEN = 'q',\r\n    ROOK = 'r',\r\n    KNIGHT = 'n',\r\n    BISHOP = 'b'\r\n}\r\n\r\nenum Direction { UP, DOWN, LEFT, RIGHT }\r\n\r\nexport enum MoveState { OK, NO_CHANGE, PATH_INVALID, PATH_BLOCKED, DEST_BLOCKED }\r\n\r\nfunction calculateDirection(move: MoveObject) {\r\n    const result = new Set()\r\n\r\n    if (move.end.row < move.start.row)\r\n        result.add(Direction.UP)\r\n    else if (move.end.row > move.start.row)\r\n        result.add(Direction.DOWN)\r\n\r\n    if (move.end.column < move.start.column)\r\n        result.add(Direction.LEFT)\r\n    else if (move.end.column > move.start.column)\r\n        result.add(Direction.RIGHT)\r\n\r\n    return result\r\n}\r\n\r\nexport abstract class Piece {\r\n    abstract color: PieceColor;\r\n    abstract validPath: (move: MoveObject, board: BoardObject) => boolean;\r\n    pathBlocked = (move: MoveObject, board: BoardObject): boolean => {\r\n        const direction = calculateDirection(move)\r\n        const current = Position(move.start.column, move.start.row)\r\n\r\n        while (true) {\r\n            if (direction.has(Direction.UP))\r\n                current.row--\r\n            if (direction.has(Direction.DOWN))\r\n                current.row++\r\n            if (direction.has(Direction.LEFT))\r\n                current.column--\r\n            if (direction.has(Direction.RIGHT))\r\n                current.column++\r\n\r\n            if (current.column == move.end.column && current.row == move.end.row) {\r\n                return false\r\n            }\r\n\r\n            if (board.getPieceAt(current) !== null)\r\n                return true\r\n        }\r\n    };\r\n    destinationBlocked = (move: MoveObject, board: BoardObject): boolean => {\r\n        const other = board.getPieceAt(move.end)\r\n        if (other == null || other == undefined)\r\n            return false\r\n        return other.color == this.color\r\n    };\r\n    checkMove(move: MoveObject, board: BoardObject): MoveState {\r\n        if (move.start == move.end)\r\n            return MoveState.NO_CHANGE\r\n        if (!this.validPath(move, board))\r\n            return MoveState.PATH_INVALID\r\n        if (!(board.getPieceAt(move.start) instanceof Knight) && this.pathBlocked(move, board))\r\n            return MoveState.PATH_BLOCKED\r\n        if (this.destinationBlocked(move, board))\r\n            return MoveState.DEST_BLOCKED\r\n\r\n        return MoveState.OK\r\n    };\r\n    abstract toString(): string;\r\n}\r\n\r\nexport class King extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        const absoluteRow = Math.abs(move.start.row - move.end.row)\r\n        const absoluteColumn = Math.abs(move.start.column - move.end.column)\r\n        return absoluteRow <= 1 && absoluteColumn <= 1\r\n    }\r\n    toString = (): string => this.color == PieceColor.WHITE ? 'K' : 'k'\r\n}\r\n\r\nexport class Rook extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        return move.start.column == move.end.column || move.start.row == move.end.row\r\n    }\r\n    toString = (): string => this.color == PieceColor.WHITE ? 'R' : 'r'\r\n}\r\n\r\nexport class Bishop extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        return Math.abs(move.start.column - move.end.column) == Math.abs(move.start.row - move.end.row)\r\n    }\r\n    toString = (): string => this.color == PieceColor.WHITE ? 'B' : 'b'\r\n}\r\n\r\nexport class Queen extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        return move.start.row == move.end.row\r\n            || move.start.column == move.end.column\r\n            || Math.abs(move.start.row - move.end.row) == Math.abs(move.start.column - move.end.column)\r\n    }\r\n    toString = (): string => this.color == PieceColor.WHITE ? 'Q' : 'q'\r\n}\r\n\r\nexport class Knight extends Piece {\r\n    color: PieceColor\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        return Math.abs(move.end.column - move.start.column) == 2 && Math.abs(move.end.row - move.start.row) == 1\r\n            || Math.abs(move.end.column - move.start.column) == 1 && Math.abs(move.end.row - move.start.row) == 2\r\n    }\r\n    toString = (): string => this.color == PieceColor.WHITE ? 'N' : 'n'\r\n}\r\n\r\nexport class Pawn extends Piece {\r\n\r\n    hasMoved = false\r\n    color: PieceColor\r\n\r\n    constructor(pieceColor: PieceColor) {\r\n        super()\r\n        this.color = pieceColor\r\n    }\r\n    override validPath = (move: MoveObject, board: BoardObject): boolean => {\r\n        const steps = this.hasMoved ? 1 : 2\r\n        const direction = selectByPieceColor(this.color, -1, 1)\r\n\r\n        return (\r\n            // Vertical movement\r\n            move.start.column == move.end.column\r\n            && (direction == -1 ?\r\n                (board.getPieceAt(move.end) == null && move.start.row > move.end.row && move.start.row - move.end.row <= steps)\r\n                :\r\n                (board.getPieceAt(move.end) == null && move.end.row > move.start.row && move.end.row - move.start.row <= steps)\r\n            )\r\n        )\r\n            ||\r\n            (\r\n                // Horizontal movement\r\n                Math.abs(move.start.column - move.end.column) == 1\r\n                && move.end.row - move.start.row == direction\r\n                && board.getPieceAt(move.end) != null\r\n            )\r\n    }\r\n    toString = (): string => this.color == PieceColor.WHITE ? 'P' : 'p'\r\n}\r\n\r\nconst charPieceMap = {\r\n    'K': King,\r\n    'R': Rook,\r\n    'B': Bishop,\r\n    'Q': Queen,\r\n    'N': Knight,\r\n    'P': Pawn,\r\n}\r\n\r\nexport const charToPiece = (char: string) => {\r\n    const charUpper = char.toUpperCase()\r\n    const color = char === char.toUpperCase() ? PieceColor.WHITE : PieceColor.BLACK\r\n\r\n    for (const entry of Object.entries(charPieceMap)) {\r\n        const pieceChar = entry[0]\r\n        const pieceClass = entry[1]\r\n        if (pieceChar === charUpper) {\r\n            const newPiece = new pieceClass(color)\r\n            return newPiece\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport const pieceToChar = (piece: Piece) => {\r\n    let pieceChar\r\n    if (piece instanceof Knight) {\r\n        pieceChar = 'N'\r\n    }\r\n    else {\r\n        pieceChar = piece.constructor.name[0]\r\n    }\r\n    return selectByPieceColor(piece.color, pieceChar.toUpperCase(), pieceChar.toLowerCase())\r\n}"]},"metadata":{},"sourceType":"module"}