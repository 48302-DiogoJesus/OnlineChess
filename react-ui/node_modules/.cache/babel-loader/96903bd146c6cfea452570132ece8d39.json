{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\pages\\\\GamePage\\\\GamePage.tsx\",\n    _s = $RefreshSig$();\n\nimport './GamePage.css';\nimport GameVS from '../../components/GameVS/GameVS';\nimport GameInfo from '../../components/GameInfo/GameInfo';\nimport GameCountdown from '../../components/GameCountdown/GameCountdown';\nimport GameChat from '../../components/GameChat/GameChat';\nimport GameButtons from '../../components/GameButtons/GameButtons';\nimport Board from '../../components/ChessBoard/Board/Board';\nimport State from '../../state/State';\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport Alerts from '../../components/Alerts/sa-alerts';\nimport Server from '../../server/server';\nimport GamePageUtils from './utils';\nimport Multiplayer, { ClientType } from './utils/MultiplayerGS';\nimport GameState from './utils/GameState';\nimport Singleplayer from './utils/Singleplayer'; // LOW TIME BECAUSE ON DEVELOPMENT\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UPDATE_GAME_TIMEOUT = 1000;\nexport default function GamePage(props) {\n  _s();\n\n  const navigate = useNavigate(); // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \n\n  const game_id = useParams().game_id;\n  const [gameState, setGameState] = useState(GameState.defaultGameState);\n  const local_username = State.GetAppState().authentication.username;\n  const singlePlayer = game_id == \"sp\"; // TRY TO SIMPLIFY AS VARIABLE LATER\n\n  function GStoMultiplayerGS() {\n    return gameState;\n  } // FIRST RENDER\n\n\n  useEffect(() => {\n    if (singlePlayer) {\n      startSingleplayerGame();\n    } else {\n      joinMultiplayerGame();\n    }\n\n    return () => {};\n  }, []); // AUTO-REFRESH CALLS\n\n  const [rr, setrr] = useState(true);\n\n  const forceRR = () => {\n    setrr(!rr);\n  };\n\n  useEffect(() => {\n    // Do not refresh if in SINGLEPLAYER || Game is over\n    if (singlePlayer || gameState.winner != null) return;\n    const timer = setTimeout(() => updateMultiplayerGame(), UPDATE_GAME_TIMEOUT);\n    return () => clearTimeout(timer);\n  }, [gameState.board, rr]);\n\n  function startSingleplayerGame() {\n    setGameState(Singleplayer.buildSingleplayerGS());\n  }\n  /**\r\n   * Join Multiplayer Game\r\n   * Attempts to get the game identified by the ID passed as URI param\r\n   * Based of of the [local_username] + the remote game it knows who we are: WHITE_PIECES, BLACK_PIECES or VIEWER\r\n   * If we are supposed to be the black player and there is no black player yet we tell the server it's us\r\n   * We update the local [gameState] based of of the remote Game we get from the server \r\n   */\n\n\n  async function joinMultiplayerGame() {\n    // const response = await State.joinGame(game_id)\n    const response = await Server.getGame(game_id);\n\n    if (!response.success) {\n      Alerts.showNotification(response.data.message);\n      return;\n    }\n\n    const remoteGame = response.data;\n    const clientType = Multiplayer.calcClientType(remoteGame, local_username);\n\n    if (clientType == ClientType.PLAYER_BLACK && remoteGame.player2 == null) {\n      const joinResponse = await Server.connectToGame(game_id);\n\n      if (joinResponse.success) {\n        const remoteGameJoin = joinResponse.data;\n        setGameState(Multiplayer.buildMultiplayerGS(local_username, remoteGameJoin, clientType));\n      } else {\n        Alerts.showNotification(joinResponse.data.message);\n        return;\n      }\n    } else {\n      setGameState(Multiplayer.buildMultiplayerGS(local_username, remoteGame, clientType));\n      return;\n    }\n  }\n  /**\r\n   * Update Multiplayer Game\r\n   * Updates the local game state if the remote game board is different\r\n   */\n\n\n  async function updateMultiplayerGame() {\n    const state = gameState; // My turn. Do not refresh\n\n    if (state.board.turn == state.local_pieces) return;\n    const response = await Server.getGame(state.game_id);\n    forceRR();\n\n    if (response.success) {\n      const remoteGame = response.data;\n      const newMultiplayerGS = Multiplayer.updateFromRemote(state, remoteGame);\n\n      if (!GameState.areGameStatesEqual(state, newMultiplayerGS)) {\n        setGameState(newMultiplayerGS);\n        return;\n      }\n    } else {\n      // On error ignore it and gamestate won't be updated.\n      return;\n    } // On error ignore it and gamestate won't be updated.\n\n\n    return;\n  }\n  /**\r\n   * Handle Make Move\r\n   * Performs a move on the local board and if it succeeds AND we are !singlePlayer validate with the server(updates remote game on success)\r\n   * If on singleplayer just swap the [local_pieces] to play as the opponent\r\n   */\n\n\n  async function handleMakeMove(move) {\n    if (gameState.board.turn != gameState.local_pieces) {\n      Alerts.showNotification(\"Not your turn!\");\n      return;\n    } // Validate move Locally (should never fail)\n\n\n    try {\n      gameState.board.makeMove(move);\n    } catch (err) {\n      Alerts.showNotification(err.message);\n      return;\n    } // SINGLEPLAYER\n\n\n    if (singlePlayer) {\n      setGameState(Singleplayer.switchTurn(gameState));\n      return;\n    } // MULTIPLAYER\n    else {\n      // Validate with server\n      const response = await Server.makeMove(game_id, move);\n\n      if (!response.success) {\n        Alerts.showNotification(`Invalid Move: ${response.data.message}`);\n        return;\n      }\n\n      const remoteGame = response.data;\n      console.log(remoteGame); // Change local state from server game response\n\n      const newGameState = Multiplayer.updateFromRemote(gameState, remoteGame);\n      setGameState(newGameState);\n    }\n  } // MIGHT GET REMOVED\n\n\n  function launchCriticalError(err) {\n    GamePageUtils.showGameError(game_id, navigate, err.message);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"game-header id\",\n          children: [\"Game ID : \", game_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"game-header state\",\n          children: [\"(\", gameState.winner == null ? \"ongoing\" : \"over\", \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"go-to-main-page-btn\",\n            children: \"Main Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameVS, {\n          singleplayer: singlePlayer,\n          local_player_username: GStoMultiplayerGS().local_username,\n          local_player_pieces: GStoMultiplayerGS().local_pieces,\n          opponent_username: GStoMultiplayerGS().opponent_username,\n          opponent_pieces: GStoMultiplayerGS().opponent_pieces\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GameCountdown, {\n          initalTime: 60\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          singleplayer: singlePlayer,\n          board: GStoMultiplayerGS().board,\n          local_player_pieces: GStoMultiplayerGS().local_pieces,\n          turn: GStoMultiplayerGS().board.turn,\n          gameOver: GStoMultiplayerGS().winner_username != null,\n          onMakeMove: handleMakeMove,\n          onError: launchCriticalError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GameChat, {\n          game_id: game_id,\n          local_player_username: GStoMultiplayerGS().local_username,\n          opponent_username: GStoMultiplayerGS().opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameInfo, {\n          game_over: GStoMultiplayerGS().winner_username != null,\n          turn_username: GStoMultiplayerGS().turn_username,\n          winner_username: GStoMultiplayerGS().winner_username,\n          opponent_username: GStoMultiplayerGS().opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GameButtons, {\n          gameOver: GStoMultiplayerGS().winner_username != null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamePage, \"kEM4MEwPvnR7dv8C4ViXIcTbqZw=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = GamePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/GamePage.tsx"],"names":["GameVS","GameInfo","GameCountdown","GameChat","GameButtons","Board","State","useParams","useNavigate","Link","useEffect","useState","Alerts","Server","GamePageUtils","Multiplayer","ClientType","GameState","Singleplayer","UPDATE_GAME_TIMEOUT","GamePage","props","navigate","game_id","gameState","setGameState","defaultGameState","local_username","GetAppState","authentication","username","singlePlayer","GStoMultiplayerGS","startSingleplayerGame","joinMultiplayerGame","rr","setrr","forceRR","winner","timer","setTimeout","updateMultiplayerGame","clearTimeout","board","buildSingleplayerGS","response","getGame","success","showNotification","data","message","remoteGame","clientType","calcClientType","PLAYER_BLACK","player2","joinResponse","connectToGame","remoteGameJoin","buildMultiplayerGS","state","turn","local_pieces","newMultiplayerGS","updateFromRemote","areGameStatesEqual","handleMakeMove","move","makeMove","err","switchTurn","console","log","newGameState","launchCriticalError","showGameError","opponent_username","opponent_pieces","winner_username","turn_username"],"mappings":";;;AAAA,OAAO,gBAAP;AAEA,OAAOA,MAAP,MAAmB,gCAAnB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,OAAOC,KAAP,MAAkB,yCAAlB;AAGA,OAAOC,KAAP,MAAkB,mBAAlB;AAEA,SAASC,SAAT,EAAoBC,WAApB,EAAmDC,IAAnD,QAA+D,kBAA/D;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,MAAP,MAAoC,qBAApC;AAEA,OAAOC,aAAP,MAA0B,SAA1B;AAEA,OAAOC,WAAP,IAAsBC,UAAtB,QAAwD,uBAAxD;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,YAAP,MAAyB,sBAAzB,C,CAEA;;;AACA,MAAMC,mBAAmB,GAAG,IAA5B;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAA8B;AAAA;;AAC3C,QAAMC,QAAQ,GAAGd,WAAW,EAA5B,CAD2C,CAE3C;;AACA,QAAMe,OAAO,GAAGhB,SAAS,GAAGgB,OAA5B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAACM,SAAS,CAACS,gBAAX,CAA1C;AACA,QAAMC,cAAc,GAAGrB,KAAK,CAACsB,WAAN,GAAoBC,cAApB,CAAmCC,QAA1D;AACA,QAAMC,YAAY,GAAGR,OAAO,IAAI,IAAhC,CAN2C,CAQ3C;;AACA,WAASS,iBAAT,GAA6C;AAC3C,WAAOR,SAAP;AACD,GAX0C,CAa3C;;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,YAAJ,EAAkB;AAChBE,MAAAA,qBAAqB;AACtB,KAFD,MAEO;AACLC,MAAAA,mBAAmB;AACpB;;AACD,WAAO,MAAM,CAAG,CAAhB;AACD,GAPQ,EAON,EAPM,CAAT,CAd2C,CAuB3C;;AACA,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAczB,QAAQ,CAAC,IAAD,CAA5B;;AACA,QAAM0B,OAAO,GAAG,MAAM;AAAED,IAAAA,KAAK,CAAC,CAACD,EAAF,CAAL;AAAY,GAApC;;AACAzB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIqB,YAAY,IAAIP,SAAS,CAACc,MAAV,IAAoB,IAAxC,EACE;AAEF,UAAMC,KAAK,GAAGC,UAAU,CAAC,MAAMC,qBAAqB,EAA5B,EAAgCtB,mBAAhC,CAAxB;AAEA,WAAO,MAAMuB,YAAY,CAACH,KAAD,CAAzB;AACD,GARQ,EAQN,CAACf,SAAS,CAACmB,KAAX,EAAkBR,EAAlB,CARM,CAAT;;AAWA,WAASF,qBAAT,GAAiC;AAC/BR,IAAAA,YAAY,CAACP,YAAY,CAAC0B,mBAAb,EAAD,CAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,iBAAeV,mBAAf,GAAqC;AACnC;AACA,UAAMW,QAAQ,GAAG,MAAMhC,MAAM,CAACiC,OAAP,CAAevB,OAAf,CAAvB;;AAEA,QAAI,CAACsB,QAAQ,CAACE,OAAd,EAAuB;AACrBnC,MAAAA,MAAM,CAACoC,gBAAP,CAAyBH,QAAQ,CAACI,IAAV,CAA+BC,OAAvD;AACA;AACD;;AAED,UAAMC,UAAU,GAAGN,QAAQ,CAACI,IAA5B;AACA,UAAMG,UAAU,GAAGrC,WAAW,CAACsC,cAAZ,CAA2BF,UAA3B,EAAuCxB,cAAvC,CAAnB;;AAEA,QAAIyB,UAAU,IAAIpC,UAAU,CAACsC,YAAzB,IAAyCH,UAAU,CAACI,OAAX,IAAsB,IAAnE,EAAyE;AACvE,YAAMC,YAAY,GAAG,MAAM3C,MAAM,CAAC4C,aAAP,CAAqBlC,OAArB,CAA3B;;AAEA,UAAIiC,YAAY,CAACT,OAAjB,EAA0B;AACxB,cAAMW,cAAc,GAAGF,YAAY,CAACP,IAApC;AACAxB,QAAAA,YAAY,CAACV,WAAW,CAAC4C,kBAAZ,CAA+BhC,cAA/B,EAAiD+B,cAAjD,EAAiEN,UAAjE,CAAD,CAAZ;AACD,OAHD,MAGO;AACLxC,QAAAA,MAAM,CAACoC,gBAAP,CAAyBQ,YAAY,CAACP,IAAd,CAAmCC,OAA3D;AACA;AACD;AACF,KAVD,MAUO;AACLzB,MAAAA,YAAY,CAACV,WAAW,CAAC4C,kBAAZ,CAA+BhC,cAA/B,EAAiDwB,UAAjD,EAA6DC,UAA7D,CAAD,CAAZ;AACA;AACD;AACF;AAED;AACF;AACA;AACA;;;AACE,iBAAeX,qBAAf,GAAuC;AACrC,UAAMmB,KAAK,GAAIpC,SAAf,CADqC,CAErC;;AACA,QAAIoC,KAAK,CAACjB,KAAN,CAAYkB,IAAZ,IAAoBD,KAAK,CAACE,YAA9B,EACE;AAEF,UAAMjB,QAAQ,GAAG,MAAMhC,MAAM,CAACiC,OAAP,CAAec,KAAK,CAACrC,OAArB,CAAvB;AAEAc,IAAAA,OAAO;;AAEP,QAAIQ,QAAQ,CAACE,OAAb,EAAsB;AACpB,YAAMI,UAAU,GAAGN,QAAQ,CAACI,IAA5B;AACA,YAAMc,gBAAgB,GAAGhD,WAAW,CAACiD,gBAAZ,CAA6BJ,KAA7B,EAAoCT,UAApC,CAAzB;;AAEA,UAAI,CAAClC,SAAS,CAACgD,kBAAV,CAA6BL,KAA7B,EAAoCG,gBAApC,CAAL,EAA4D;AAC1DtC,QAAAA,YAAY,CAACsC,gBAAD,CAAZ;AACA;AACD;AACF,KARD,MAQO;AACL;AACA;AACD,KArBoC,CAsBrC;;;AACA;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,iBAAeG,cAAf,CAA8BC,IAA9B,EAA4C;AAC1C,QAAI3C,SAAS,CAACmB,KAAV,CAAgBkB,IAAhB,IAAwBrC,SAAS,CAACsC,YAAtC,EAAoD;AAClDlD,MAAAA,MAAM,CAACoC,gBAAP,CAAwB,gBAAxB;AACA;AACD,KAJyC,CAK1C;;;AACA,QAAI;AACFxB,MAAAA,SAAS,CAACmB,KAAV,CAAgByB,QAAhB,CAAyBD,IAAzB;AACD,KAFD,CAEE,OAAOE,GAAP,EAAY;AACZzD,MAAAA,MAAM,CAACoC,gBAAP,CAAyBqB,GAAD,CAAoBnB,OAA5C;AACA;AACD,KAXyC,CAY1C;;;AACA,QAAInB,YAAJ,EAAkB;AAChBN,MAAAA,YAAY,CAACP,YAAY,CAACoD,UAAb,CAAwB9C,SAAxB,CAAD,CAAZ;AACA;AACD,KAHD,CAIA;AAJA,SAKK;AACH;AACA,YAAMqB,QAAQ,GAAG,MAAMhC,MAAM,CAACuD,QAAP,CAAgB7C,OAAhB,EAAyB4C,IAAzB,CAAvB;;AACA,UAAI,CAACtB,QAAQ,CAACE,OAAd,EAAuB;AACrBnC,QAAAA,MAAM,CAACoC,gBAAP,CAAyB,iBAAiBH,QAAQ,CAACI,IAAV,CAA+BC,OAAQ,EAAhF;AACA;AACD;;AACD,YAAMC,UAAU,GAAGN,QAAQ,CAACI,IAA5B;AACAsB,MAAAA,OAAO,CAACC,GAAR,CAAYrB,UAAZ,EARG,CASH;;AACA,YAAMsB,YAAY,GAAG1D,WAAW,CAACiD,gBAAZ,CAA6BxC,SAA7B,EAA0D2B,UAA1D,CAArB;AACA1B,MAAAA,YAAY,CAACgD,YAAD,CAAZ;AACD;AACF,GA9I0C,CAgJ3C;;;AACA,WAASC,mBAAT,CAA6BL,GAA7B,EAA4D;AAC1DvD,IAAAA,aAAa,CAAC6D,aAAd,CAA4BpD,OAA5B,EAAqCD,QAArC,EAA+C+C,GAAG,CAACnB,OAAnD;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,2BAEI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,gBAAd;AAAA,mCAA0C3B,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAI,UAAA,SAAS,EAAC,mBAAd;AAAA,0BAAoCC,SAAS,CAACc,MAAV,IAAoB,IAApB,GAA2B,SAA3B,GAAuC,MAA3E;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,GAAT;AAAA,iCACE;AAAQ,YAAA,SAAS,EAAC,qBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,gCACE,QAAC,MAAD;AACE,UAAA,YAAY,EAAEP,YADhB;AAEE,UAAA,qBAAqB,EAAEC,iBAAiB,GAAGL,cAF7C;AAE6D,UAAA,mBAAmB,EAAEK,iBAAiB,GAAG8B,YAFtG;AAGE,UAAA,iBAAiB,EAAE9B,iBAAiB,GAAG4C,iBAHzC;AAG4D,UAAA,eAAe,EAAE5C,iBAAiB,GAAG6C;AAHjG;AAAA;AAAA;AAAA;AAAA,gBADF,eAME,QAAC,aAAD;AAAe,UAAA,UAAU,EAAE;AAA3B;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAkBE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,gCAEE,QAAC,KAAD;AACE,UAAA,YAAY,EAAE9C,YADhB;AAGE,UAAA,KAAK,EAAEC,iBAAiB,GAAGW,KAH7B;AAIE,UAAA,mBAAmB,EAAEX,iBAAiB,GAAG8B,YAJ3C;AAME,UAAA,IAAI,EAAE9B,iBAAiB,GAAGW,KAApB,CAA0BkB,IANlC;AAQE,UAAA,QAAQ,EAAE7B,iBAAiB,GAAG8C,eAApB,IAAuC,IARnD;AAUE,UAAA,UAAU,EAAEZ,cAVd;AAWE,UAAA,OAAO,EAAEQ;AAXX;AAAA;AAAA;AAAA;AAAA,gBAFF,eAgBE,QAAC,QAAD;AAAU,UAAA,OAAO,EAAEnD,OAAnB;AAA4B,UAAA,qBAAqB,EAAES,iBAAiB,GAAGL,cAAvE;AAAuF,UAAA,iBAAiB,EAAEK,iBAAiB,GAAG4C;AAA9H;AAAA;AAAA;AAAA;AAAA,gBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF,eAqCE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,gCACE,QAAC,QAAD;AACE,UAAA,SAAS,EAAE5C,iBAAiB,GAAG8C,eAApB,IAAuC,IADpD;AAEE,UAAA,aAAa,EAAE9C,iBAAiB,GAAG+C,aAFrC;AAGE,UAAA,eAAe,EAAE/C,iBAAiB,GAAG8C,eAHvC;AAIE,UAAA,iBAAiB,EAAE9C,iBAAiB,GAAG4C;AAJzC;AAAA;AAAA;AAAA;AAAA,gBADF,eAME,QAAC,WAAD;AAAa,UAAA,QAAQ,EAAE5C,iBAAiB,GAAG8C,eAApB,IAAuC;AAA9D;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cArCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD;;GAzMuB1D,Q;UACLZ,W,EAEDD,S;;;KAHMa,Q","sourcesContent":["import './GamePage.css'\r\n\r\nimport GameVS from '../../components/GameVS/GameVS'\r\nimport GameInfo from '../../components/GameInfo/GameInfo'\r\nimport GameCountdown from '../../components/GameCountdown/GameCountdown'\r\nimport GameChat from '../../components/GameChat/GameChat'\r\nimport GameButtons from '../../components/GameButtons/GameButtons'\r\nimport Board from '../../components/ChessBoard/Board/Board'\r\n\r\nimport { RemoteGame } from '../../state/reducers/root'\r\nimport State from '../../state/State'\r\n\r\nimport { useParams, useNavigate, NavigateFunction, Link } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport Alerts from '../../components/Alerts/sa-alerts'\r\nimport Server, { ServerError } from '../../server/server'\r\n\r\nimport GamePageUtils from './utils'\r\nimport { BoardError } from '../../domain/errors'\r\nimport Multiplayer, { ClientType, IMultiplayerGS } from './utils/MultiplayerGS'\r\nimport GameState from './utils/GameState'\r\nimport Singleplayer from './utils/Singleplayer'\r\n\r\n// LOW TIME BECAUSE ON DEVELOPMENT\r\nconst UPDATE_GAME_TIMEOUT = 1000\r\n\r\nexport default function GamePage(props: any) {\r\n  const navigate = useNavigate()\r\n  // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \r\n  const game_id = useParams().game_id!!\r\n  const [gameState, setGameState] = useState(GameState.defaultGameState)\r\n  const local_username = State.GetAppState().authentication.username\r\n  const singlePlayer = game_id == \"sp\"\r\n\r\n  // TRY TO SIMPLIFY AS VARIABLE LATER\r\n  function GStoMultiplayerGS(): IMultiplayerGS {\r\n    return gameState as IMultiplayerGS\r\n  }\r\n\r\n  // FIRST RENDER\r\n  useEffect(() => {\r\n    if (singlePlayer) {\r\n      startSingleplayerGame()\r\n    } else {\r\n      joinMultiplayerGame()\r\n    }\r\n    return () => { }\r\n  }, [])\r\n\r\n  // AUTO-REFRESH CALLS\r\n  const [rr, setrr] = useState(true)\r\n  const forceRR = () => { setrr(!rr) }\r\n  useEffect(() => {\r\n    // Do not refresh if in SINGLEPLAYER || Game is over\r\n    if (singlePlayer || gameState.winner != null)\r\n      return\r\n\r\n    const timer = setTimeout(() => updateMultiplayerGame(), UPDATE_GAME_TIMEOUT)\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [gameState.board, rr])\r\n\r\n\r\n  function startSingleplayerGame() {\r\n    setGameState(Singleplayer.buildSingleplayerGS())\r\n  }\r\n\r\n  /**\r\n   * Join Multiplayer Game\r\n   * Attempts to get the game identified by the ID passed as URI param\r\n   * Based of of the [local_username] + the remote game it knows who we are: WHITE_PIECES, BLACK_PIECES or VIEWER\r\n   * If we are supposed to be the black player and there is no black player yet we tell the server it's us\r\n   * We update the local [gameState] based of of the remote Game we get from the server \r\n   */\r\n  async function joinMultiplayerGame() {\r\n    // const response = await State.joinGame(game_id)\r\n    const response = await Server.getGame(game_id)\r\n\r\n    if (!response.success) {\r\n      Alerts.showNotification((response.data as ServerError).message)\r\n      return\r\n    }\r\n\r\n    const remoteGame = response.data as RemoteGame\r\n    const clientType = Multiplayer.calcClientType(remoteGame, local_username)\r\n\r\n    if (clientType == ClientType.PLAYER_BLACK && remoteGame.player2 == null) {\r\n      const joinResponse = await Server.connectToGame(game_id)\r\n\r\n      if (joinResponse.success) {\r\n        const remoteGameJoin = joinResponse.data as RemoteGame\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGameJoin, clientType))\r\n      } else {\r\n        Alerts.showNotification((joinResponse.data as ServerError).message)\r\n        return\r\n      }\r\n    } else {\r\n      setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGame, clientType))\r\n      return\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update Multiplayer Game\r\n   * Updates the local game state if the remote game board is different\r\n   */\r\n  async function updateMultiplayerGame() {\r\n    const state = (gameState as IMultiplayerGS)\r\n    // My turn. Do not refresh\r\n    if (state.board.turn == state.local_pieces)\r\n      return\r\n\r\n    const response = await Server.getGame(state.game_id)\r\n\r\n    forceRR()\r\n\r\n    if (response.success) {\r\n      const remoteGame = response.data as RemoteGame\r\n      const newMultiplayerGS = Multiplayer.updateFromRemote(state, remoteGame)\r\n\r\n      if (!GameState.areGameStatesEqual(state, newMultiplayerGS)) {\r\n        setGameState(newMultiplayerGS)\r\n        return\r\n      }\r\n    } else {\r\n      // On error ignore it and gamestate won't be updated.\r\n      return\r\n    }\r\n    // On error ignore it and gamestate won't be updated.\r\n    return\r\n  }\r\n\r\n  /**\r\n   * Handle Make Move\r\n   * Performs a move on the local board and if it succeeds AND we are !singlePlayer validate with the server(updates remote game on success)\r\n   * If on singleplayer just swap the [local_pieces] to play as the opponent\r\n   */\r\n  async function handleMakeMove(move: string) {\r\n    if (gameState.board.turn != gameState.local_pieces) {\r\n      Alerts.showNotification(\"Not your turn!\")\r\n      return\r\n    }\r\n    // Validate move Locally (should never fail)\r\n    try {\r\n      gameState.board.makeMove(move)\r\n    } catch (err) {\r\n      Alerts.showNotification((err as BoardError).message)\r\n      return\r\n    }\r\n    // SINGLEPLAYER\r\n    if (singlePlayer) {\r\n      setGameState(Singleplayer.switchTurn(gameState))\r\n      return\r\n    }\r\n    // MULTIPLAYER\r\n    else {\r\n      // Validate with server\r\n      const response = await Server.makeMove(game_id, move)\r\n      if (!response.success) {\r\n        Alerts.showNotification(`Invalid Move: ${(response.data as ServerError).message}`)\r\n        return\r\n      }\r\n      const remoteGame = response.data as RemoteGame\r\n      console.log(remoteGame)\r\n      // Change local state from server game response\r\n      const newGameState = Multiplayer.updateFromRemote(gameState as IMultiplayerGS, remoteGame)\r\n      setGameState(newGameState)\r\n    }\r\n  }\r\n\r\n  // MIGHT GET REMOVED\r\n  function launchCriticalError(err: BoardError | ServerError) {\r\n    GamePageUtils.showGameError(game_id, navigate, err.message)\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      {(\r\n        <div className=\"game-container\">\r\n          <div className=\"game-container-row\">\r\n            <h1 className=\"game-header id\">Game ID : {game_id}</h1>\r\n            <h3 className=\"game-header state\">({gameState.winner == null ? \"ongoing\" : \"over\"})</h3>\r\n            <Link to=\"/\">\r\n              <button className=\"go-to-main-page-btn\">Main Page</button>\r\n            </Link>\r\n          </div>\r\n\r\n          <div className=\"game-container-row\">\r\n            <GameVS\r\n              singleplayer={singlePlayer}\r\n              local_player_username={GStoMultiplayerGS().local_username} local_player_pieces={GStoMultiplayerGS().local_pieces}\r\n              opponent_username={GStoMultiplayerGS().opponent_username} opponent_pieces={GStoMultiplayerGS().opponent_pieces}\r\n            />\r\n            <GameCountdown initalTime={60} />\r\n          </div>\r\n\r\n          <div className=\"game-container-row\">\r\n\r\n            <Board\r\n              singleplayer={singlePlayer}\r\n\r\n              board={GStoMultiplayerGS().board}\r\n              local_player_pieces={GStoMultiplayerGS().local_pieces}\r\n\r\n              turn={GStoMultiplayerGS().board.turn}\r\n\r\n              gameOver={GStoMultiplayerGS().winner_username != null}\r\n\r\n              onMakeMove={handleMakeMove}\r\n              onError={launchCriticalError}\r\n            />\r\n\r\n            <GameChat game_id={game_id} local_player_username={GStoMultiplayerGS().local_username} opponent_username={GStoMultiplayerGS().opponent_username} />\r\n          </div>\r\n\r\n          <div className=\"game-container-row\">\r\n            <GameInfo\r\n              game_over={GStoMultiplayerGS().winner_username != null}\r\n              turn_username={GStoMultiplayerGS().turn_username}\r\n              winner_username={GStoMultiplayerGS().winner_username}\r\n              opponent_username={GStoMultiplayerGS().opponent_username} />\r\n            <GameButtons gameOver={GStoMultiplayerGS().winner_username != null} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div >\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}