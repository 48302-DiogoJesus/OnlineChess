{"ast":null,"code":"import { PieceColor, charToPiece } from './piece';\nimport { Position } from './position';\nexport const BOARD_WIDTH = 8;\nexport const BOARD_HEIGHT = 8;\nexport class BoardObject {\n  constructor() {\n    let initBoard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.board = Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(null));\n\n    this.setPieceAt = (position, piece) => this.board[position.row][position.column] = piece;\n\n    this.getPieceAt = position => this.board[position.row][position.column];\n\n    this.setRow = (rowStr, rowNum) => {\n      for (let colNum = 0; colNum < BOARD_WIDTH; colNum++) {\n        this.setPieceAt(Position(colNum, rowNum), charToPiece(rowStr[colNum]));\n      }\n    };\n\n    if (initBoard) {\n      this.initBoard();\n    }\n  } // the board itelf. a matrix with 8 rows and 8 columns\n\n\n  // * Also a string.toBoard would be good\n  toString() {\n    var boardAsString = \"\";\n    this.board.map((row, rowIdx) => row.map((col, colIdx) => {\n      const piece = this.getPieceAt(Position(colIdx, rowIdx));\n\n      if (piece == null) {\n        boardAsString += \" \";\n      } else {\n        boardAsString += piece.color == PieceColor.WHITE ? piece.type.toUpperCase() : piece.type;\n      }\n    }));\n    return boardAsString;\n  } // Spread pieces through a row\n\n\n  initBoard() {\n    this.setRow(\"rnbqkbn\", 0); // SET BLACK PIECES\n    // this.board[0][0] = { color: PieceColor.BLACK, type: PieceType.ROOK }; this.board[0][1] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }; this.board[0][2] = { color: PieceColor.BLACK, type: PieceType.BISHOP }; this.board[0][3] = { color: PieceColor.BLACK, type: PieceType.QUEEN }; this.board[0][4] = { color: PieceColor.BLACK, type: PieceType.KING }; this.board[0][5] = { color: PieceColor.BLACK, type: PieceType.BISHOP }; this.board[0][6] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }; this.board[0][7] = { color: PieceColor.BLACK, type: PieceType.ROOK }; this.board[1][0] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][1] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][2] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][3] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][4] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][5] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][6] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][7] = { color: PieceColor.BLACK, type: PieceType.PAWN };\n    // SET WHITE PIECES\n    // this.board[6][0] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][1] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][2] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][3] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][4] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][5] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][6] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][7] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[7][0] = { color: PieceColor.WHITE, type: PieceType.ROOK }; this.board[7][1] = { color: PieceColor.WHITE, type: PieceType.KNIGHT }; this.board[7][2] = { color: PieceColor.WHITE, type: PieceType.BISHOP }; this.board[7][3] = { color: PieceColor.WHITE, type: PieceType.QUEEN }; this.board[7][4] = { color: PieceColor.WHITE, type: PieceType.KING }; this.board[7][5] = { color: PieceColor.WHITE, type: PieceType.BISHOP }; this.board[7][6] = { color: PieceColor.WHITE, type: PieceType.KNIGHT }; this.board[7][7] = { color: PieceColor.WHITE, type: PieceType.ROOK };\n  }\n\n}\n\nfunction stringToBoard(boardAsString) {\n  if (boardAsString.length < BOARD_WIDTH * BOARD_HEIGHT) return null;\n  const newBoard = new BoardObject();\n\n  for (let row = 0, currChar = 0; row < BOARD_HEIGHT; row++) {\n    for (let col = 0; col < BOARD_WIDTH; col++, currChar++) {\n      const pieceChar = boardAsString[currChar];\n      const piece = charToPiece(pieceChar); // [piece] will be null if char does not correspond to a piece. Case of the \" \" representing an empty Tile\n\n      newBoard.setPieceAt(Position(col, row), piece);\n    }\n  }\n\n  return newBoard;\n}\n\nconst B1 = new BoardObject();\nconst B1s = B1.toString();\nconst B2 = stringToBoard(B1s);\nconst B2s = B2.toString();\nconsole.log(B2s == B1s);","map":{"version":3,"sources":["C:/Users/jesus/Desktop/TS/OnlineChess/onlinechess/src/domain/board.tsx"],"names":["PieceColor","charToPiece","Position","BOARD_WIDTH","BOARD_HEIGHT","BoardObject","constructor","initBoard","board","Array","fill","map","setPieceAt","position","piece","row","column","getPieceAt","setRow","rowStr","rowNum","colNum","toString","boardAsString","rowIdx","col","colIdx","color","WHITE","type","toUpperCase","stringToBoard","length","newBoard","currChar","pieceChar","B1","B1s","B2","B2s","console","log"],"mappings":"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","sourcesContent":["import { PieceObject, PieceColor, PieceType, charToPiece } from './piece'\r\nimport { PositionObject, Position } from './position'\r\n\r\nexport const BOARD_WIDTH = 8;\r\nexport const BOARD_HEIGHT = 8;\r\n\r\nexport class BoardObject {\r\n\r\n  constructor(initBoard: boolean = true) {\r\n    if (initBoard) {\r\n      this.initBoard()\r\n    }\r\n  }\r\n\r\n  // the board itelf. a matrix with 8 rows and 8 columns\r\n  board: Array<Array<PieceObject | null>> = Array(BOARD_HEIGHT).fill(null).map(()=>Array(BOARD_WIDTH).fill(null));\r\n\r\n  setPieceAt = (position: PositionObject, piece: PieceObject | null) => this.board[position.row][position.column] = piece\r\n\r\n  getPieceAt = (position: PositionObject) => this.board[position.row][position.column]\r\n\r\n  // * Also a string.toBoard would be good\r\n  toString() {\r\n    var boardAsString: string = \"\"\r\n    this.board.map((row, rowIdx) => row.map((col, colIdx) => { \r\n      const piece = this.getPieceAt(Position(colIdx, rowIdx))\r\n      if (piece == null) {\r\n        boardAsString += \" \"\r\n      } else { \r\n        boardAsString += piece.color == PieceColor.WHITE ? piece.type.toUpperCase() : piece.type\r\n      }\r\n    }))\r\n    return boardAsString\r\n  }\r\n\r\n  // Spread pieces through a row\r\n  setRow = (rowStr: string, rowNum: number) => {\r\n    for (let colNum = 0; colNum < BOARD_WIDTH; colNum++) {\r\n       this.setPieceAt(Position(colNum, rowNum), charToPiece(rowStr[colNum]))\r\n    }\r\n  }\r\n\r\n  initBoard() {\r\n    \r\n    this.setRow(\"rnbqkbn\", 0)\r\n    // SET BLACK PIECES\r\n    // this.board[0][0] = { color: PieceColor.BLACK, type: PieceType.ROOK }; this.board[0][1] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }; this.board[0][2] = { color: PieceColor.BLACK, type: PieceType.BISHOP }; this.board[0][3] = { color: PieceColor.BLACK, type: PieceType.QUEEN }; this.board[0][4] = { color: PieceColor.BLACK, type: PieceType.KING }; this.board[0][5] = { color: PieceColor.BLACK, type: PieceType.BISHOP }; this.board[0][6] = { color: PieceColor.BLACK, type: PieceType.KNIGHT }; this.board[0][7] = { color: PieceColor.BLACK, type: PieceType.ROOK }; this.board[1][0] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][1] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][2] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][3] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][4] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][5] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][6] = { color: PieceColor.BLACK, type: PieceType.PAWN }; this.board[1][7] = { color: PieceColor.BLACK, type: PieceType.PAWN };\r\n\r\n    // SET WHITE PIECES\r\n    // this.board[6][0] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][1] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][2] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][3] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][4] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][5] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][6] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[6][7] = { color: PieceColor.WHITE, type: PieceType.PAWN }; this.board[7][0] = { color: PieceColor.WHITE, type: PieceType.ROOK }; this.board[7][1] = { color: PieceColor.WHITE, type: PieceType.KNIGHT }; this.board[7][2] = { color: PieceColor.WHITE, type: PieceType.BISHOP }; this.board[7][3] = { color: PieceColor.WHITE, type: PieceType.QUEEN }; this.board[7][4] = { color: PieceColor.WHITE, type: PieceType.KING }; this.board[7][5] = { color: PieceColor.WHITE, type: PieceType.BISHOP }; this.board[7][6] = { color: PieceColor.WHITE, type: PieceType.KNIGHT }; this.board[7][7] = { color: PieceColor.WHITE, type: PieceType.ROOK };\r\n  }\r\n}\r\n\r\nfunction stringToBoard(boardAsString: string): BoardObject | null {\r\n  if (boardAsString.length < BOARD_WIDTH * BOARD_HEIGHT)\r\n    return null\r\n  const newBoard = new BoardObject()\r\n  for (let row = 0, currChar = 0; row < BOARD_HEIGHT; row++) {\r\n    for (let col = 0; col < BOARD_WIDTH; col++, currChar++) {\r\n      const pieceChar = boardAsString[currChar]\r\n        const piece: PieceObject | null = charToPiece(pieceChar)\r\n        // [piece] will be null if char does not correspond to a piece. Case of the \" \" representing an empty Tile\r\n        newBoard.setPieceAt(Position(col, row), piece)\r\n    }\r\n  }\r\n  return newBoard\r\n}\r\n\r\nconst B1 = new BoardObject()\r\nconst B1s = B1.toString()\r\nconst B2 = stringToBoard(B1s)!\r\nconst B2s = B2.toString()\r\n\r\nconsole.log(B2s == B1s)"]},"metadata":{},"sourceType":"module"}