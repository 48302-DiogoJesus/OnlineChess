{"ast":null,"code":"import CONFIG from './config';\nimport Alerts from '../components/Alerts/sa-alerts';\nconst AXIOSI = CONFIG.AXIOSINSTANCE; // Private\n\nfunction responseIntercept(response) {\n  if (response.status > 200 || response.status >= 400) {\n    const responseAsError = response.data;\n    Alerts.showNotification(responseAsError.message);\n    return {\n      success: false,\n      data: responseAsError\n    };\n  }\n\n  return {\n    success: true,\n    data: response.data.data\n  };\n} // PUBLIC FUNCTIONS\n\n\nconst logout = () => AXIOSI.get('/logout').then(res => responseIntercept(res));\n\nconst getGame = game_id => AXIOSI.get(`/games?id=${game_id}`).then(res => responseIntercept(res));\n\nconst tryLogin = (username, password) => AXIOSI.post('/auth', {\n  username: username,\n  password: password\n}).then(res => responseIntercept(res));\n\nconst trySignup = (username, password) => AXIOSI.post('/users', {\n  username: username,\n  password: password\n}).then(res => responseIntercept(res));\n\nconst createGame = game_id => AXIOSI.post(`/games/`, {\n  id: game_id\n}).then(res => responseIntercept(res));\n\nconst Server = {\n  logout,\n  getGame,\n  tryLogin,\n  trySignup,\n  createGame\n};\nexport default Server;","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/server/server.ts"],"names":["CONFIG","Alerts","AXIOSI","AXIOSINSTANCE","responseIntercept","response","status","responseAsError","data","showNotification","message","success","logout","get","then","res","getGame","game_id","tryLogin","username","password","post","trySignup","createGame","id","Server"],"mappings":"AACA,OAAOA,MAAP,MAAmB,UAAnB;AAIA,OAAOC,MAAP,MAAmB,gCAAnB;AAEA,MAAMC,MAAM,GAAGF,MAAM,CAACG,aAAtB,C,CAEA;;AAiBA,SAASC,iBAAT,CAA2BC,QAA3B,EAAoE;AAChE,MAAIA,QAAQ,CAACC,MAAT,GAAkB,GAAlB,IAAyBD,QAAQ,CAACC,MAAT,IAAmB,GAAhD,EAAqD;AACjD,UAAMC,eAAe,GAAGF,QAAQ,CAACG,IAAjC;AACAP,IAAAA,MAAM,CAACQ,gBAAP,CAAwBF,eAAe,CAACG,OAAxC;AACA,WAAO;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBH,MAAAA,IAAI,EAAED;AAAxB,KAAP;AACH;;AACD,SAAO;AAAEI,IAAAA,OAAO,EAAE,IAAX;AAAiBH,IAAAA,IAAI,EAAEH,QAAQ,CAACG,IAAT,CAAcA;AAArC,GAAP;AACH,C,CAGD;;;AACA,MAAMI,MAAM,GAAG,MACXV,MAAM,CAACW,GAAP,CAAW,SAAX,EACKC,IADL,CACWC,GAAD,IAAwBX,iBAAiB,CAACW,GAAD,CADnD,CADJ;;AAMA,MAAMC,OAAO,GAAIC,OAAD,IACZf,MAAM,CAACW,GAAP,CAAY,aAAYI,OAAQ,EAAhC,EACKH,IADL,CACWC,GAAD,IAAwBX,iBAAiB,CAACW,GAAD,CADnD,CADJ;;AAKA,MAAMG,QAAQ,GAAG,CAACC,QAAD,EAAmBC,QAAnB,KACblB,MAAM,CAACmB,IAAP,CAAY,OAAZ,EAAqB;AACjBF,EAAAA,QAAQ,EAAEA,QADO;AAEjBC,EAAAA,QAAQ,EAAEA;AAFO,CAArB,EAGGN,IAHH,CAGSC,GAAD,IAAwBX,iBAAiB,CAACW,GAAD,CAHjD,CADJ;;AAOA,MAAMO,SAAS,GAAG,CAACH,QAAD,EAAmBC,QAAnB,KACdlB,MAAM,CAACmB,IAAP,CAAY,QAAZ,EAAsB;AAClBF,EAAAA,QAAQ,EAAEA,QADQ;AAElBC,EAAAA,QAAQ,EAAEA;AAFQ,CAAtB,EAGGN,IAHH,CAGSC,GAAD,IAAwBX,iBAAiB,CAACW,GAAD,CAHjD,CADJ;;AAOA,MAAMQ,UAAU,GAAIN,OAAD,IACff,MAAM,CAACmB,IAAP,CAAa,SAAb,EAAuB;AACnBG,EAAAA,EAAE,EAAEP;AADe,CAAvB,EAEGH,IAFH,CAESC,GAAD,IAAwBX,iBAAiB,CAACW,GAAD,CAFjD,CADJ;;AAKA,MAAMU,MAAM,GAAG;AACXb,EAAAA,MADW;AAEXI,EAAAA,OAFW;AAGXE,EAAAA,QAHW;AAIXI,EAAAA,SAJW;AAMXC,EAAAA;AANW,CAAf;AASA,eAAeE,MAAf","sourcesContent":["import { AxiosResponse } from 'axios'\r\nimport CONFIG from './config'\r\nimport { BoardObject } from '../domain/board'\r\nimport { Game } from '../state/reducers/root'\r\n\r\nimport Alerts from '../components/Alerts/sa-alerts'\r\n\r\nconst AXIOSI = CONFIG.AXIOSINSTANCE\r\n\r\n// Private\r\ninterface ServerError {\r\n    http_code: number,\r\n    message: string\r\n}\r\n\r\n// Private\r\ninterface OriginalServerRespose {\r\n    data: any\r\n}\r\n\r\nexport interface ServerResponse {\r\n    success: boolean,\r\n    data: any | ServerError\r\n}\r\n\r\n\r\nfunction responseIntercept(response: AxiosResponse): ServerResponse {\r\n    if (response.status > 200 || response.status >= 400) {\r\n        const responseAsError = response.data as ServerError\r\n        Alerts.showNotification(responseAsError.message)\r\n        return { success: false, data: responseAsError }\r\n    }\r\n    return { success: true, data: response.data.data }\r\n}\r\n\r\n\r\n// PUBLIC FUNCTIONS\r\nconst logout = (): Promise<ServerResponse> =>\r\n    AXIOSI.get('/logout')\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n\r\n\r\n\r\nconst getGame = (game_id: string): Promise<ServerResponse> =>\r\n    AXIOSI.get(`/games?id=${game_id}`)\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n\r\n\r\nconst tryLogin = (username: string, password: string): Promise<ServerResponse> =>\r\n    AXIOSI.post('/auth', {\r\n        username: username,\r\n        password: password\r\n    }).then((res: AxiosResponse) => responseIntercept(res))\r\n\r\n\r\nconst trySignup = (username: string, password: string): Promise<ServerResponse> =>\r\n    AXIOSI.post('/users', {\r\n        username: username,\r\n        password: password\r\n    }).then((res: AxiosResponse) => responseIntercept(res))\r\n\r\n\r\nconst createGame = (game_id: string): Promise<ServerResponse> =>\r\n    AXIOSI.post(`/games/`, {\r\n        id: game_id\r\n    }).then((res: AxiosResponse) => responseIntercept(res))\r\n\r\nconst Server = {\r\n    logout,\r\n    getGame,\r\n    tryLogin,\r\n    trySignup,\r\n\r\n    createGame\r\n}\r\n\r\nexport default Server"]},"metadata":{},"sourceType":"module"}