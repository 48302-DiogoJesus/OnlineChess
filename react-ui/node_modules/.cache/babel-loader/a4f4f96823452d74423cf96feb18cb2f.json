{"ast":null,"code":"// Utilitary functions for the GamePage component\nimport Alerts from \"../../components/Alerts/sa-alerts\";\nimport { PieceColor } from \"../../domain/piece\";\nimport { CLIENT_TYPE } from \"./GamePage\";\nexport function showGameError(game_id, navigate, message) {\n  Alerts.showMessage(`Game Error: \"${game_id}\"`, message, {\n    goBackBtn: {\n      text: 'Go Back',\n      className: 'go-back-btn',\n      visible: true\n    }\n  }, [{\n    className: \"go-back-btn\",\n    eventName: \"click\",\n    execute: () => {\n      navigate('../');\n    }\n  }]);\n}\nexport function calcClientType(gameState, username) {\n  if (username == null) {\n    return CLIENT_TYPE.VIEWER;\n  } else if (username == gameState.player1) {\n    return CLIENT_TYPE.PLAYER_WHITE;\n  } else {\n    // If i am not a viewer and not the game creator (WHITE) then auto join the game as BLACK\n    return CLIENT_TYPE.PLAYER_BLACK;\n  }\n}\nexport function setInternalGameStateFromRemote(gameStateSetter, local, remoteGS) {\n  var local_player_username;\n\n  if (local == CLIENT_TYPE.PLAYER_WHITE) {\n    local_player_username = remoteGS.player1;\n  } else if (local == CLIENT_TYPE.PLAYER_BLACK) {\n    local_player_username = remoteGS.player2;\n  } else {\n    local_player_username = remoteGS.player1;\n  }\n\n  var local_player_pieces = remoteGS.player1 == local_player_username ? PieceColor.WHITE : PieceColor.BLACK;\n  const opponent_pieces = local_player_pieces == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\n  const opponent_username = remoteGS.player1 == local_player_username ? remoteGS.player2 : remoteGS.player1;\n  var winner_pieces = null;\n\n  if (remoteGS.winner != null) {\n    if (remoteGS.winner == local_player_username) {\n      winner_pieces = local_player_pieces;\n    } else {\n      winner_pieces = opponent_pieces;\n    }\n  }\n\n  const turn_username = remoteGS.turn == local_player_pieces ? local_player_username : opponent_username;\n  gameStateSetter({\n    game: {\n      id: remoteGS._id,\n      local_player_username: local_player_username,\n      local_player_pieces: local_player_pieces,\n      opponent_username: opponent_username,\n      opponent_pieces: opponent_pieces,\n      winner_username: remoteGS.winner,\n      winner_pieces: winner_pieces,\n      turn_username: turn_username != null ? turn_username : 'Opponent'\n    }\n  });\n}\nconst GamePageUtils = {\n  showGameError,\n  calcClientType,\n  setInternalGameStateFromRemote\n};\nexport default GamePageUtils;","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/utils.ts"],"names":["Alerts","PieceColor","CLIENT_TYPE","showGameError","game_id","navigate","message","showMessage","goBackBtn","text","className","visible","eventName","execute","calcClientType","gameState","username","VIEWER","player1","PLAYER_WHITE","PLAYER_BLACK","setInternalGameStateFromRemote","gameStateSetter","local","remoteGS","local_player_username","player2","local_player_pieces","WHITE","BLACK","opponent_pieces","opponent_username","winner_pieces","winner","turn_username","turn","game","id","_id","winner_username","GamePageUtils"],"mappings":"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","sourcesContent":["// Utilitary functions for the GamePage component\r\n\r\nimport { NavigateFunction } from \"react-router-dom\"\r\nimport Alerts from \"../../components/Alerts/sa-alerts\"\r\nimport { PieceColor } from \"../../domain/piece\"\r\nimport { RemoteGame } from \"../../state/reducers/root\"\r\nimport { CLIENT_TYPE, InternalGameStateWrapper } from \"./GamePage\"\r\n\r\nexport function showGameError(game_id: string, navigate: NavigateFunction, message: string) {\r\n    Alerts.showMessage(`Game Error: \"${game_id}\"`, message,\r\n        {\r\n            goBackBtn: {\r\n                text: 'Go Back',\r\n                className: 'go-back-btn',\r\n                visible: true\r\n            }\r\n        }, [\r\n        {\r\n            className: \"go-back-btn\",\r\n            eventName: \"click\",\r\n            execute: () => { navigate('../') }\r\n        }\r\n    ])\r\n}\r\n\r\nexport function calcClientType(gameState: RemoteGame, username: string | null): CLIENT_TYPE {\r\n    if (username == null) {\r\n        return CLIENT_TYPE.VIEWER\r\n    } else if (username == gameState.player1) {\r\n        return CLIENT_TYPE.PLAYER_WHITE\r\n    } else {\r\n        // If i am not a viewer and not the game creator (WHITE) then auto join the game as BLACK\r\n        return CLIENT_TYPE.PLAYER_BLACK\r\n    }\r\n}\r\n\r\n\r\nexport function setInternalGameStateFromRemote(\r\n    gameStateSetter: React.Dispatch<React.SetStateAction<InternalGameStateWrapper>>,\r\n    local: CLIENT_TYPE,\r\n    remoteGS: RemoteGame\r\n) {\r\n    var local_player_username: string | null\r\n\r\n    if (local == CLIENT_TYPE.PLAYER_WHITE) {\r\n        local_player_username = remoteGS.player1\r\n    }\r\n    else if (local == CLIENT_TYPE.PLAYER_BLACK) {\r\n        local_player_username = remoteGS.player2!!\r\n    } else {\r\n        local_player_username = remoteGS.player1\r\n    }\r\n\r\n    var local_player_pieces = remoteGS.player1 == local_player_username ? PieceColor.WHITE : PieceColor.BLACK\r\n    const opponent_pieces = local_player_pieces == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE\r\n\r\n    const opponent_username = remoteGS.player1 == local_player_username ? remoteGS.player2 : remoteGS.player1\r\n\r\n    var winner_pieces = null\r\n\r\n    if (remoteGS.winner != null) {\r\n        if (remoteGS.winner == local_player_username) {\r\n            winner_pieces = local_player_pieces\r\n        } else {\r\n            winner_pieces = opponent_pieces\r\n        }\r\n    }\r\n\r\n    const turn_username = remoteGS.turn == local_player_pieces ? local_player_username : opponent_username\r\n\r\n    gameStateSetter({\r\n        game: {\r\n            id: remoteGS._id,\r\n\r\n            local_player_username: local_player_username,\r\n            local_player_pieces: local_player_pieces,\r\n\r\n            opponent_username: opponent_username,\r\n            opponent_pieces: opponent_pieces,\r\n\r\n            winner_username: remoteGS.winner,\r\n            winner_pieces: winner_pieces,\r\n\r\n            turn_username: turn_username != null ? turn_username : 'Opponent',\r\n        }\r\n    })\r\n}\r\n\r\nconst GamePageUtils = {\r\n    showGameError,\r\n    calcClientType,\r\n    setInternalGameStateFromRemote\r\n}\r\n\r\nexport default GamePageUtils\r\n"]},"metadata":{},"sourceType":"module"}