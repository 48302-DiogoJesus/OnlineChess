{"ast":null,"code":"import CONFIG from './config';\nimport Alerts from '../components/Alerts/sa-alerts';\nconst AXIOSI = CONFIG.AXIOSINSTANCE; // Private\n\nfunction errorWrapper(block) {\n  try {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return block(args);\n  } catch (e) {\n    alert(\"SERVER ERROR: \" + e);\n  }\n}\n\nfunction responseIntercept(response) {\n  if (response.status > 200 || response.status >= 400) {\n    const responseAsError = response.data;\n    Alerts.showNotification(responseAsError.message);\n    return {\n      success: false,\n      data: responseAsError\n    };\n  }\n\n  return {\n    success: true,\n    data: response.data.data\n  };\n} // PUBLIC FUNCTIONS\n\n\nconst logout = () => errorWrapper(() => {\n  AXIOSI.get('/logout');\n});\n\nconst getGame = game_id => errorWrapper(() => {\n  AXIOSI.get(`/games?id=${game_id}`).then(res => responseIntercept(res));\n});\n\nconst tryLogin = (username, password) => errorWrapper(() => {\n  AXIOSI.post('/auth', {\n    'username': username,\n    'password': password\n  }).then(res => responseIntercept(res));\n});\n\nfunction trySignup(username, password) {\n  return CONFIG.AXIOSINSTANCE.post('/users', {\n    'username': username,\n    'password': password\n  }).then(res => responseIntercept(res));\n}\n\nasync function createGame(game_id) {\n  const response = await CONFIG.AXIOSINSTANCE.post(`/games/`, {\n    id: game_id\n  });\n\n  if (response.status === 201) {\n    const gameObject = response.data.data;\n    return gameObject;\n  } else {\n    return response.data.error;\n  }\n}\n\nconst Server = {\n  logout,\n  getGame,\n  tryLogin,\n  trySignup,\n  createGame\n};\nexport default Server;","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/server/server.ts"],"names":["CONFIG","Alerts","AXIOSI","AXIOSINSTANCE","errorWrapper","block","args","e","alert","responseIntercept","response","status","responseAsError","data","showNotification","message","success","logout","get","getGame","game_id","then","res","tryLogin","username","password","post","trySignup","createGame","id","gameObject","error","Server"],"mappings":"AACA,OAAOA,MAAP,MAAmB,UAAnB;AAIA,OAAOC,MAAP,MAAmB,gCAAnB;AAEA,MAAMC,MAAM,GAAGF,MAAM,CAACG,aAAtB,C,CAEA;;AAgBA,SAASC,YAAT,CAAsBC,KAAtB,EAAwE;AACpE,MAAI;AAAA,sCAD8CC,IAC9C;AAD8CA,MAAAA,IAC9C;AAAA;;AACA,WAAOD,KAAK,CAACC,IAAD,CAAZ;AACH,GAFD,CAEE,OAAOC,CAAP,EAAU;AACRC,IAAAA,KAAK,CAAC,mBAAmBD,CAApB,CAAL;AACH;AACJ;;AAID,SAASE,iBAAT,CAA2BC,QAA3B,EAAoE;AAChE,MAAIA,QAAQ,CAACC,MAAT,GAAkB,GAAlB,IAAyBD,QAAQ,CAACC,MAAT,IAAmB,GAAhD,EAAqD;AACjD,UAAMC,eAAe,GAAGF,QAAQ,CAACG,IAAjC;AACAZ,IAAAA,MAAM,CAACa,gBAAP,CAAwBF,eAAe,CAACG,OAAxC;AACA,WAAO;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBH,MAAAA,IAAI,EAAED;AAAxB,KAAP;AACH;;AACD,SAAO;AAAEI,IAAAA,OAAO,EAAE,IAAX;AAAiBH,IAAAA,IAAI,EAAEH,QAAQ,CAACG,IAAT,CAAcA;AAArC,GAAP;AACH,C,CAGD;;;AACA,MAAMI,MAAM,GAAG,MAAMb,YAAY,CAAC,MAAM;AACpCF,EAAAA,MAAM,CAACgB,GAAP,CAAW,SAAX;AACH,CAFgC,CAAjC;;AAIA,MAAMC,OAAO,GAAIC,OAAD,IAA8ChB,YAAY,CAAC,MAAM;AAC7EF,EAAAA,MAAM,CAACgB,GAAP,CAAY,aAAYE,OAAQ,EAAhC,EACKC,IADL,CACUC,GAAG,IAAIb,iBAAiB,CAACa,GAAD,CADlC;AAEH,CAHyE,CAA1E;;AAKA,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAmBC,QAAnB,KAAwCrB,YAAY,CAAC,MAAM;AACxEF,EAAAA,MAAM,CAACwB,IAAP,CAAY,OAAZ,EAAqB;AACjB,gBAAYF,QADK;AAEjB,gBAAYC;AAFK,GAArB,EAGGJ,IAHH,CAGQC,GAAG,IAAIb,iBAAiB,CAACa,GAAD,CAHhC;AAIH,CALoE,CAArE;;AAOA,SAASK,SAAT,CAAmBH,QAAnB,EAAqCC,QAArC,EAAuD;AACnD,SAAOzB,MAAM,CAACG,aAAP,CAAqBuB,IAArB,CAA0B,QAA1B,EAAoC;AACvC,gBAAYF,QAD2B;AAEvC,gBAAYC;AAF2B,GAApC,EAGJJ,IAHI,CAGCC,GAAG,IAAIb,iBAAiB,CAACa,GAAD,CAHzB,CAAP;AAIH;;AAED,eAAeM,UAAf,CAA0BR,OAA1B,EAA2C;AACvC,QAAMV,QAAQ,GAAG,MAAMV,MAAM,CAACG,aAAP,CAAqBuB,IAArB,CAA2B,SAA3B,EAAqC;AACxDG,IAAAA,EAAE,EAAET;AADoD,GAArC,CAAvB;;AAIA,MAAIV,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,UAAMmB,UAAU,GAAGpB,QAAQ,CAACG,IAAT,CAAcA,IAAjC;AACA,WAAOiB,UAAP;AACH,GAHD,MAGO;AACH,WAAOpB,QAAQ,CAACG,IAAT,CAAckB,KAArB;AACH;AACJ;;AAED,MAAMC,MAAM,GAAG;AACXf,EAAAA,MADW;AAEXE,EAAAA,OAFW;AAGXI,EAAAA,QAHW;AAIXI,EAAAA,SAJW;AAMXC,EAAAA;AANW,CAAf;AASA,eAAeI,MAAf","sourcesContent":["import { AxiosResponse } from 'axios'\r\nimport CONFIG from './config'\r\nimport { BoardObject } from '../domain/board'\r\nimport { Game } from '../state/reducers/root'\r\n\r\nimport Alerts from '../components/Alerts/sa-alerts'\r\n\r\nconst AXIOSI = CONFIG.AXIOSINSTANCE\r\n\r\n// Private\r\ninterface ServerError {\r\n    http_code: number,\r\n    message: string\r\n}\r\n\r\n// Private\r\ninterface OriginalServerRespose {\r\n    data: any\r\n}\r\n\r\nexport interface ServerResponse {\r\n    success: boolean,\r\n    data: any | ServerError\r\n}\r\n\r\nfunction errorWrapper(block: (...a: any[]) => any, ...args: any[]): any {\r\n    try {\r\n        return block(args)\r\n    } catch (e) {\r\n        alert(\"SERVER ERROR: \" + e)\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction responseIntercept(response: AxiosResponse): ServerResponse {\r\n    if (response.status > 200 || response.status >= 400) {\r\n        const responseAsError = response.data as ServerError\r\n        Alerts.showNotification(responseAsError.message)\r\n        return { success: false, data: responseAsError }\r\n    }\r\n    return { success: true, data: response.data.data }\r\n}\r\n\r\n\r\n// PUBLIC FUNCTIONS\r\nconst logout = () => errorWrapper(() => {\r\n    AXIOSI.get('/logout')\r\n})\r\n\r\nconst getGame = (game_id: string): Promise<ServerResponse> => errorWrapper(() => {\r\n    AXIOSI.get(`/games?id=${game_id}`)\r\n        .then(res => responseIntercept(res))\r\n})\r\n\r\nconst tryLogin = (username: string, password: string) => errorWrapper(() => {\r\n    AXIOSI.post('/auth', {\r\n        'username': username,\r\n        'password': password\r\n    }).then(res => responseIntercept(res))\r\n})\r\n\r\nfunction trySignup(username: string, password: string) {\r\n    return CONFIG.AXIOSINSTANCE.post('/users', {\r\n        'username': username,\r\n        'password': password\r\n    }).then(res => responseIntercept(res))\r\n}\r\n\r\nasync function createGame(game_id: string) {\r\n    const response = await CONFIG.AXIOSINSTANCE.post(`/games/`, {\r\n        id: game_id\r\n    })\r\n\r\n    if (response.status === 201) {\r\n        const gameObject = response.data.data\r\n        return gameObject as Game\r\n    } else {\r\n        return response.data.error\r\n    }\r\n}\r\n\r\nconst Server = {\r\n    logout,\r\n    getGame,\r\n    tryLogin,\r\n    trySignup,\r\n\r\n    createGame\r\n}\r\n\r\nexport default Server"]},"metadata":{},"sourceType":"module"}