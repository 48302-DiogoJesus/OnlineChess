{"ast":null,"code":"import CONFIG from './config';\nimport Alerts from '../components/Alerts/sa-alerts';\nconst AXIOSI = CONFIG.AXIOSINSTANCE; // Private\n\nfunction responseIntercept(response) {\n  if (response.status === 401) {\n    logout();\n  }\n\n  if (response.status < 200 || response.status >= 400) {\n    const responseAsError = response.data.error;\n    Alerts.showNotification(responseAsError.message);\n    return {\n      success: false,\n      data: responseAsError\n    };\n  }\n\n  return {\n    success: true,\n    data: response.data.data\n  };\n} // PUBLIC FUNCTIONS\n\n\nconst logout = () => AXIOSI.get('/auth/logout').then(res => responseIntercept(res));\n\nconst getGame = game_id => AXIOSI.get(`/games?id=${game_id}`).then(res => responseIntercept(res));\n\nconst tryLogin = (username, password) => AXIOSI.post('/auth', {\n  username: username,\n  password: password\n}).then(res => responseIntercept(res));\n\nconst trySignup = (username, password) => AXIOSI.post('/users', {\n  username: username,\n  password: password\n}).then(res => responseIntercept(res));\n\nconst createGame = game_id => AXIOSI.post(`/games`, {\n  id: game_id\n}).then(res => responseIntercept(res));\n\nconst Server = {\n  logout,\n  getGame,\n  tryLogin,\n  trySignup,\n  createGame\n};\nexport default Server;","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/server/server.ts"],"names":["CONFIG","Alerts","AXIOSI","AXIOSINSTANCE","responseIntercept","response","status","logout","responseAsError","data","error","showNotification","message","success","get","then","res","getGame","game_id","tryLogin","username","password","post","trySignup","createGame","id","Server"],"mappings":"AACA,OAAOA,MAAP,MAAmB,UAAnB;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AAEA,MAAMC,MAAM,GAAGF,MAAM,CAACG,aAAtB,C,CAEA;;AAiBA,SAASC,iBAAT,CAA2BC,QAA3B,EAAoE;AAChE,MAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzBC,IAAAA,MAAM;AACT;;AACD,MAAIF,QAAQ,CAACC,MAAT,GAAkB,GAAlB,IAAyBD,QAAQ,CAACC,MAAT,IAAmB,GAAhD,EAAqD;AACjD,UAAME,eAAe,GAAGH,QAAQ,CAACI,IAAT,CAAcC,KAAtC;AACAT,IAAAA,MAAM,CAACU,gBAAP,CAAwBH,eAAe,CAACI,OAAxC;AACA,WAAO;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBJ,MAAAA,IAAI,EAAED;AAAxB,KAAP;AACH;;AACD,SAAO;AAAEK,IAAAA,OAAO,EAAE,IAAX;AAAiBJ,IAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAAT,CAAcA;AAArC,GAAP;AACH,C,CAGD;;;AACA,MAAMF,MAAM,GAAG,MACXL,MAAM,CAACY,GAAP,CAAW,cAAX,EACKC,IADL,CACWC,GAAD,IAAwBZ,iBAAiB,CAACY,GAAD,CADnD,CADJ;;AAKA,MAAMC,OAAO,GAAIC,OAAD,IACZhB,MAAM,CAACY,GAAP,CAAY,aAAYI,OAAQ,EAAhC,EACKH,IADL,CACWC,GAAD,IAAwBZ,iBAAiB,CAACY,GAAD,CADnD,CADJ;;AAKA,MAAMG,QAAQ,GAAG,CAACC,QAAD,EAAmBC,QAAnB,KACbnB,MAAM,CAACoB,IAAP,CAAY,OAAZ,EAAqB;AACjBF,EAAAA,QAAQ,EAAEA,QADO;AAEjBC,EAAAA,QAAQ,EAAEA;AAFO,CAArB,EAGGN,IAHH,CAGSC,GAAD,IAAwBZ,iBAAiB,CAACY,GAAD,CAHjD,CADJ;;AAOA,MAAMO,SAAS,GAAG,CAACH,QAAD,EAAmBC,QAAnB,KACdnB,MAAM,CAACoB,IAAP,CAAY,QAAZ,EAAsB;AAClBF,EAAAA,QAAQ,EAAEA,QADQ;AAElBC,EAAAA,QAAQ,EAAEA;AAFQ,CAAtB,EAGGN,IAHH,CAGSC,GAAD,IAAwBZ,iBAAiB,CAACY,GAAD,CAHjD,CADJ;;AAOA,MAAMQ,UAAU,GAAIN,OAAD,IACfhB,MAAM,CAACoB,IAAP,CAAa,QAAb,EAAsB;AAClBG,EAAAA,EAAE,EAAEP;AADc,CAAtB,EAEGH,IAFH,CAESC,GAAD,IAAwBZ,iBAAiB,CAACY,GAAD,CAFjD,CADJ;;AAKA,MAAMU,MAAM,GAAG;AACXnB,EAAAA,MADW;AAEXU,EAAAA,OAFW;AAGXE,EAAAA,QAHW;AAIXI,EAAAA,SAJW;AAMXC,EAAAA;AANW,CAAf;AASA,eAAeE,MAAf","sourcesContent":["import { AxiosResponse } from 'axios'\r\nimport CONFIG from './config'\r\n\r\nimport Alerts from '../components/Alerts/sa-alerts'\r\n\r\nconst AXIOSI = CONFIG.AXIOSINSTANCE\r\n\r\n// Private\r\ninterface ServerError {\r\n    http_code: number,\r\n    message: string\r\n}\r\n\r\n// Private - Remove later if still unused\r\ninterface OriginalServerRespose {\r\n    data: any\r\n}\r\n\r\nexport interface ServerResponse {\r\n    success: boolean,\r\n    data: any | ServerError\r\n}\r\n\r\n\r\nfunction responseIntercept(response: AxiosResponse): ServerResponse {\r\n    if (response.status === 401) {\r\n        logout()\r\n    }\r\n    if (response.status < 200 || response.status >= 400) {\r\n        const responseAsError = response.data.error as ServerError\r\n        Alerts.showNotification(responseAsError.message)\r\n        return { success: false, data: responseAsError }\r\n    }\r\n    return { success: true, data: response.data.data }\r\n}\r\n\r\n\r\n// PUBLIC FUNCTIONS\r\nconst logout = (): Promise<ServerResponse> =>\r\n    AXIOSI.get('/auth/logout')\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n\r\n\r\nconst getGame = (game_id: string): Promise<ServerResponse> =>\r\n    AXIOSI.get(`/games?id=${game_id}`)\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n\r\n\r\nconst tryLogin = (username: string, password: string): Promise<ServerResponse> =>\r\n    AXIOSI.post('/auth', {\r\n        username: username,\r\n        password: password\r\n    }).then((res: AxiosResponse) => responseIntercept(res))\r\n\r\n\r\nconst trySignup = (username: string, password: string): Promise<ServerResponse> =>\r\n    AXIOSI.post('/users', {\r\n        username: username,\r\n        password: password\r\n    }).then((res: AxiosResponse) => responseIntercept(res))\r\n\r\n\r\nconst createGame = (game_id: string): Promise<ServerResponse> =>\r\n    AXIOSI.post(`/games`, {\r\n        id: game_id\r\n    }).then((res: AxiosResponse) => responseIntercept(res))\r\n\r\nconst Server = {\r\n    logout,\r\n    getGame,\r\n    tryLogin,\r\n    trySignup,\r\n\r\n    createGame\r\n}\r\n\r\nexport default Server"]},"metadata":{},"sourceType":"module"}