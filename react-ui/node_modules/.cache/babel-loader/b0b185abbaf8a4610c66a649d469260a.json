{"ast":null,"code":"import { BoardObject } from \"../../../domain/board\";\nimport { getOpponent, PieceColor } from \"../../../domain/piece\";\nimport GameState from \"./GameState\";\nexport let ClientType;\n\n(function (ClientType) {\n  ClientType[ClientType[\"PLAYER_WHITE\"] = 0] = \"PLAYER_WHITE\";\n  ClientType[ClientType[\"PLAYER_BLACK\"] = 1] = \"PLAYER_BLACK\";\n  ClientType[ClientType[\"VIEWER\"] = 2] = \"VIEWER\";\n  ClientType[ClientType[\"UNKNOWN\"] = 3] = \"UNKNOWN\";\n})(ClientType || (ClientType = {}));\n\nfunction buildMultiplayerGS(local_username, remoteGame, clientType) {\n  const local_pieces = clientType === ClientType.PLAYER_BLACK ? PieceColor.BLACK : PieceColor.WHITE;\n  const opponent_pieces = getOpponent(local_pieces);\n  const opponent_username = remoteGame.player_w == local_username ? remoteGame.player_b : remoteGame.player_w;\n  const curr_turn = BoardObject.fromMoves(remoteGame.moves).turn;\n  const turn_username = curr_turn == local_pieces ? local_username : opponent_username;\n  var winner_username = null;\n\n  if (remoteGame.winner != null) {\n    if (remoteGame.winner == local_pieces) {\n      winner_username = local_username;\n    } else {\n      winner_username = opponent_username;\n    }\n  }\n\n  return {\n    board: BoardObject.fromMoves(remoteGame.moves),\n    winner: remoteGame.winner,\n    local_pieces: local_pieces,\n    game_id: remoteGame._id,\n    opponent_pieces: opponent_pieces,\n    client_type: clientType,\n    local_username,\n    opponent_username,\n    turn_username,\n    winner_username,\n    views: remoteGame.views\n  };\n}\n\nfunction updateFromRemote(prevState, remoteGame) {\n  const board = BoardObject.fromMoves(remoteGame.moves);\n  const winner = board.winner;\n  const local_pieces = prevState.local_pieces;\n  const game_id = prevState.game_id;\n  const opponent_pieces = getOpponent(prevState.local_pieces);\n  const client_type = prevState.client_type;\n  const local_username = prevState.local_username;\n  const opponent_username = prevState.opponent_username;\n  const turn_username = board.turn === local_pieces ? local_username : opponent_username;\n  var winner_username = null;\n\n  if (remoteGame.winner != null) {\n    if (remoteGame.winner == local_pieces) {\n      winner_username = local_username;\n    } else {\n      winner_username = opponent_username;\n    }\n  }\n\n  return {\n    board,\n    winner,\n    local_pieces,\n    game_id,\n    opponent_pieces,\n    client_type,\n    local_username,\n    opponent_username,\n    turn_username,\n    winner_username,\n    views: remoteGame.views\n  };\n}\n\nfunction calcClientType(gameState, username) {\n  if (username == gameState.player_w) {\n    return ClientType.PLAYER_WHITE;\n  } else if (gameState.player_b == username || gameState.player_b == null) {\n    // If im player2 join like that. If no one is player2 and i am not player1 join\n    return ClientType.PLAYER_BLACK;\n  } else {\n    return ClientType.VIEWER;\n  }\n}\n\nfunction isMultiplayerGS(gs) {\n  return Object.keys(gs).length === Object.keys(defaultGameState).length;\n} // Private. Just useful to isMultiplayerGS function\n\n\nconst defaultGameState = { ...GameState.defaultGameState,\n  game_id: \"\",\n  opponent_pieces: PieceColor.BLACK,\n  client_type: ClientType.PLAYER_WHITE,\n  local_username: \"\",\n  opponent_username: \"\",\n  turn_username: \"\",\n  winner_username: \"\",\n  views: 0\n};\nconst Multiplayer = {\n  buildMultiplayerGS,\n  updateFromRemote,\n  calcClientType,\n  isMultiplayerGS\n};\nexport default Multiplayer;","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/GameState/MultiplayerGS.ts"],"names":["BoardObject","getOpponent","PieceColor","GameState","ClientType","buildMultiplayerGS","local_username","remoteGame","clientType","local_pieces","PLAYER_BLACK","BLACK","WHITE","opponent_pieces","opponent_username","player_w","player_b","curr_turn","fromMoves","moves","turn","turn_username","winner_username","winner","board","game_id","_id","client_type","views","updateFromRemote","prevState","calcClientType","gameState","username","PLAYER_WHITE","VIEWER","isMultiplayerGS","gs","Object","keys","length","defaultGameState","Multiplayer"],"mappings":"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","sourcesContent":["import { BoardObject } from \"../../../domain/board\";\r\nimport { getOpponent, PieceColor } from \"../../../domain/piece\";\r\nimport { RemoteGame } from \"../../../server/server\";\r\nimport GameState, { IGameState } from \"./GameState\";\r\n\r\nexport enum ClientType {\r\n    PLAYER_WHITE,\r\n    PLAYER_BLACK,\r\n    VIEWER,\r\n    UNKNOWN\r\n}\r\n\r\nexport interface IMultiplayerGS extends IGameState {\r\n    /* Has all the GameState properties + opponent_pieces */\r\n    game_id: string\r\n    opponent_pieces: PieceColor,\r\n    client_type: ClientType,\r\n\r\n    local_username: string\r\n    opponent_username: string | null\r\n    turn_username: string\r\n    winner_username: string | null\r\n\r\n    views: number\r\n}\r\n\r\nfunction buildMultiplayerGS(\r\n    local_username: string,\r\n    remoteGame: RemoteGame,\r\n    clientType: ClientType\r\n): IMultiplayerGS {\r\n    const local_pieces = clientType === ClientType.PLAYER_BLACK\r\n        ? PieceColor.BLACK\r\n        : PieceColor.WHITE\r\n\r\n    const opponent_pieces = getOpponent(local_pieces)\r\n\r\n    const opponent_username = remoteGame.player_w == local_username\r\n        ? remoteGame.player_b\r\n        : remoteGame.player_w\r\n\r\n    const curr_turn = BoardObject.fromMoves(remoteGame.moves).turn\r\n\r\n    const turn_username = curr_turn == local_pieces\r\n        ? local_username\r\n        : opponent_username!!\r\n\r\n    var winner_username = null\r\n    if (remoteGame.winner != null) {\r\n        if (remoteGame.winner == local_pieces) {\r\n            winner_username = local_username\r\n        } else {\r\n            winner_username = opponent_username\r\n        }\r\n    }\r\n\r\n    return {\r\n        board: BoardObject.fromMoves(remoteGame.moves),\r\n        winner: remoteGame.winner,\r\n        local_pieces: local_pieces,\r\n\r\n        game_id: remoteGame._id,\r\n        opponent_pieces: opponent_pieces,\r\n        client_type: clientType,\r\n\r\n        local_username,\r\n        opponent_username,\r\n        turn_username,\r\n        winner_username,\r\n\r\n        views: remoteGame.views\r\n    }\r\n}\r\n\r\nfunction updateFromRemote(\r\n    prevState: IMultiplayerGS,\r\n    remoteGame: RemoteGame\r\n): IMultiplayerGS {\r\n\r\n    const board: BoardObject = BoardObject.fromMoves(remoteGame.moves)\r\n    const winner: PieceColor | null = board.winner\r\n    const local_pieces: PieceColor = prevState.local_pieces\r\n\r\n    const game_id = prevState.game_id\r\n    const opponent_pieces: PieceColor = getOpponent(prevState.local_pieces)\r\n    const client_type: ClientType = prevState.client_type\r\n\r\n    const local_username = prevState.local_username\r\n    const opponent_username = prevState.opponent_username\r\n    const turn_username = board.turn === local_pieces\r\n        ? local_username\r\n        : opponent_username!!\r\n\r\n    var winner_username = null\r\n    if (remoteGame.winner != null) {\r\n        if (remoteGame.winner == local_pieces) {\r\n            winner_username = local_username\r\n        } else {\r\n            winner_username = opponent_username\r\n        }\r\n    }\r\n\r\n    return {\r\n        board,\r\n        winner,\r\n        local_pieces,\r\n\r\n        game_id,\r\n        opponent_pieces,\r\n        client_type,\r\n\r\n        local_username,\r\n        opponent_username,\r\n        turn_username,\r\n        winner_username,\r\n\r\n        views: remoteGame.views\r\n    }\r\n}\r\n\r\nfunction calcClientType(gameState: RemoteGame, username: string | null): ClientType {\r\n    if (username == gameState.player_w) {\r\n        return ClientType.PLAYER_WHITE\r\n    } else if (gameState.player_b == username || gameState.player_b == null) {\r\n        // If im player2 join like that. If no one is player2 and i am not player1 join\r\n        return ClientType.PLAYER_BLACK\r\n    } else {\r\n        return ClientType.VIEWER\r\n    }\r\n}\r\n\r\nfunction isMultiplayerGS(gs: object) {\r\n    return (Object.keys(gs).length === (Object.keys(defaultGameState).length))\r\n}\r\n\r\n// Private. Just useful to isMultiplayerGS function\r\nconst defaultGameState: IMultiplayerGS = {\r\n    ...GameState.defaultGameState,\r\n    game_id: \"\",\r\n    opponent_pieces: PieceColor.BLACK,\r\n    client_type: ClientType.PLAYER_WHITE,\r\n\r\n    local_username: \"\",\r\n    opponent_username: \"\",\r\n    turn_username: \"\",\r\n    winner_username: \"\",\r\n\r\n    views: 0\r\n}\r\n\r\nconst Multiplayer = {\r\n    buildMultiplayerGS,\r\n    updateFromRemote,\r\n\r\n    calcClientType,\r\n    isMultiplayerGS\r\n}\r\n\r\nexport default Multiplayer\r\n\r\n"]},"metadata":{},"sourceType":"module"}