{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\chessbackend\\\\react-ui\\\\src\\\\pages\\\\GamePage\\\\GamePage.tsx\",\n    _s = $RefreshSig$();\n\nimport './GamePage.css';\nimport GameVS from './components/GameVS/GameVS';\nimport GameInfo from './components/GameInfo/GameInfo';\nimport GameCountdown from './components/GameCountdown/GameCountdown';\nimport GameChat from './components/GameChat/GameChat';\nimport GameButtons from './components/GameButtons/GameButtons';\nimport Board from './components/ChessBoard/Board/Board';\nimport GameHeader from './components/GameHeader/GameHeader';\nimport State from '../../state/State';\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport Alerts from '../../utils/Alerts/sa-alerts';\nimport Server from '../../server/server';\nimport GamePageUtils from './utils';\nimport Multiplayer, { ClientType } from './GameState/MultiplayerGS';\nimport GameState from './GameState/GameState';\nimport Singleplayer from './GameState/Singleplayer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// LOW TIME BECAUSE ON DEVELOPMENT\nconst UPDATE_GAME_TIMEOUT = 700;\nexport default function GamePage(props) {\n  _s();\n\n  const navigate = useNavigate(); // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \n\n  const game_id = useParams().game_id; // Am i waiting for the game info to be retreived from the server ?\n\n  const [waiting, setWaiting] = useState(true);\n  const [gameState, setGameState] = useState(GameState.defaultGameState);\n  const singleplayer = game_id == \"sp\";\n  const multiplayerGS = gameState;\n  const local_username = State.getAppState().authentication.username; // FIRST RENDER\n\n  useEffect(() => {\n    new Promise((resolve, reject) => {\n      if (singleplayer) {\n        startSingleplayerGame();\n        resolve(null);\n      } else {\n        joinMultiplayerGame().then(() => resolve(null));\n      }\n    }).then(() => setWaiting(false));\n    return () => {};\n  }, []); // AUTO-REFRESH CALLS\n\n  const [rr, setrr] = useState(true);\n\n  const forceRR = () => {\n    setrr(!rr);\n  };\n\n  useEffect(() => {\n    while (true) {\n      if (singleplayer) return; // It is Multiplayer Game\n      // Dont try update while i dont have the game\n\n      if (waiting) return; // I'm not a viewer\n      // If game is Over\n\n      if (gameState.winner != null) return; // Always Update if i'm a viewer\n\n      if (multiplayerGS.client_type == ClientType.VIEWER) break; // Opponent has not been defined yet\n\n      if (multiplayerGS.opponent_username == null) break; // Game has started + I am a player\n      // It's my turn AND \n\n      if (multiplayerGS.board.turn == multiplayerGS.local_pieces) return;\n      break;\n    }\n\n    const timer = setTimeout(() => updateMultiplayerGame(), UPDATE_GAME_TIMEOUT);\n    return () => clearTimeout(timer);\n  }, [gameState.board, waiting, rr]);\n\n  function startSingleplayerGame() {\n    setGameState(Singleplayer.buildSingleplayerGS());\n  }\n  /**\r\n   * Join Multiplayer Game\r\n   * Attempts to get the game identified by the ID passed as URI param\r\n   * Based of of the [local_username] + the remote game it knows who we are: WHITE_PIECES, BLACK_PIECES or VIEWER\r\n   * If we are supposed to be the black player and there is no black player yet we tell the server it's us\r\n   * We update the local [gameState] based of of the remote Game we get from the server \r\n   */\n\n\n  async function joinMultiplayerGame() {\n    // const response = await State.joinGame(game_id)\n    const response = await Server.getGame(game_id);\n\n    if (!response.success) {\n      await launchCriticalError(response.data);\n      return;\n    }\n\n    const remoteGame = response.data;\n    const clientType = Multiplayer.calcClientType(remoteGame, local_username);\n\n    if (clientType == ClientType.PLAYER_BLACK && remoteGame.player_b == null) {\n      // JOIN AS BLACK\n      const joinResponse = await Server.joinAsPlayerB(game_id);\n\n      if (joinResponse.success) {\n        const remoteGameJoin = joinResponse.data;\n        setGameState(Multiplayer.buildMultiplayerGS(local_username, remoteGameJoin, clientType));\n      } else {\n        await launchCriticalError(joinResponse.data);\n        return;\n      }\n    } else {\n      if (clientType == ClientType.VIEWER) {\n        // Increment viewer count\n        setGameState(Multiplayer.buildMultiplayerGS(remoteGame.player_w, remoteGame, clientType));\n        Server.incrementViewers(game_id);\n      } else {\n        // WHITE_PIECES PLAYER\n        setGameState(Multiplayer.buildMultiplayerGS(local_username, remoteGame, clientType));\n        return;\n      }\n    }\n  }\n  /**\r\n   * Update Multiplayer Game\r\n   * Updates the local game state if the remote game board is different\r\n   */\n\n\n  async function updateMultiplayerGame() {\n    const state = gameState;\n    const response = await Server.getGame(state.game_id);\n    forceRR();\n\n    if (response.success) {\n      const remoteGame = response.data;\n      const newMultiplayerGS = Multiplayer.updateFromRemote(state, remoteGame);\n\n      if (!GameState.areGameStatesEqual(state, newMultiplayerGS)) {\n        setGameState(newMultiplayerGS);\n        return;\n      }\n    } else {\n      // On error ignore it and gamestate won't be updated.\n      return;\n    } // On error ignore it and gamestate won't be updated.\n\n\n    return;\n  }\n  /**\r\n   * Handle Make Move\r\n   * Performs a move on the local board and if it succeeds AND we are !singlePlayer validate with the server(updates remote game on success)\r\n   * If on singleplayer just swap the [local_pieces] to play as the opponent\r\n   */\n\n\n  async function handleMakeMove(move) {\n    if (gameState.board.turn != gameState.local_pieces) {\n      Alerts.showNotification(\"Not your turn!\");\n      return;\n    }\n\n    let finalMove = move;\n    const promotion = gameState.board.isPromotionMove(move);\n\n    if (promotion) {\n      const pieceAsString = await GamePageUtils.askPromotionPiece(gameState.local_pieces);\n      finalMove = pieceAsString + move.substring(1);\n    } // Validate + Execute move locally\n\n\n    try {\n      gameState.board.makeMove(finalMove);\n    } catch (err) {\n      Alerts.showNotification(err.message);\n      return;\n    } // SINGLEPLAYER\n\n\n    if (singleplayer) {\n      setGameState(Singleplayer.switchTurn(gameState));\n    } // MULTIPLAYER\n    else {\n      // Validate with server\n      const response = await Server.makeMove(game_id, finalMove);\n\n      if (!response.success) {\n        Alerts.showNotification(`Invalid Move: ${response.data.message}`);\n        return;\n      }\n\n      const remoteGame = response.data; // Change local state from server game response\n\n      const newGameState = Multiplayer.updateFromRemote(gameState, remoteGame);\n      setGameState(newGameState);\n    }\n\n    playPieceSound();\n  }\n\n  function playPieceSound() {\n    var audio = new Audio(`${window.location.host}/place_piece.wav`);\n    console.log(`${window.location.host}/place_piece.wav`);\n    audio.loop = false;\n    audio.play();\n  }\n\n  function launchCriticalError(err) {\n    return GamePageUtils.showGameError(game_id, navigate, err.message);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global-container\",\n    children: !waiting ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: /*#__PURE__*/_jsxDEV(GameHeader, {\n          singleplayer: singleplayer,\n          game_id: game_id,\n          game_over: gameState.board.winner != null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"separator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }, this), singleplayer ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"singleplayer-piece-turn\",\n        children: gameState.board.winner === null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Turn : \", gameState.board.turn === 'w' ? 'WHITE' : 'BLACK']\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [gameState.board.winner === 'w' ? 'WHITE' : 'BLACK', \" pieces won!\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: startSingleplayerGame,\n            className: \"green-btn restart\",\n            children: \"RESTART\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 19\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: !singleplayer ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(GameVS, {\n            singleplayer: singleplayer,\n            local_player_username: multiplayerGS.local_username,\n            local_player_pieces: multiplayerGS.local_pieces,\n            opponent_username: multiplayerGS.opponent_username,\n            opponent_pieces: multiplayerGS.opponent_pieces\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(GameCountdown, {\n            game_over: gameState.board.winner != null,\n            initalTime: 60\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          singleplayer: singleplayer,\n          board: gameState.board,\n          local_player_pieces: multiplayerGS.local_pieces,\n          isViewer: multiplayerGS.client_type === ClientType.VIEWER,\n          turn: gameState.board.turn,\n          game_over: gameState.board.winner != null,\n          onMakeMove: handleMakeMove,\n          onError: launchCriticalError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 17\n        }, this), !singleplayer ? /*#__PURE__*/_jsxDEV(GameChat, {\n          game_id: game_id,\n          local_player_username: multiplayerGS.local_username,\n          opponent_username: multiplayerGS.opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameInfo, {\n          singleplayer: singleplayer,\n          game_over: multiplayerGS.winner_username != null,\n          turn_username: multiplayerGS.turn_username,\n          winner_username: multiplayerGS.winner_username,\n          winner_pieces: multiplayerGS.winner,\n          opponent_username: multiplayerGS.opponent_username,\n          views: multiplayerGS.views\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 17\n        }, this), !singleplayer ? /*#__PURE__*/_jsxDEV(GameButtons, {\n          gameOver: multiplayerGS.winner_username != null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamePage, \"let8Tbldld5iadX8Xn/ApGkvoaA=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = GamePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/chessbackend/react-ui/src/pages/GamePage/GamePage.tsx"],"names":["GameVS","GameInfo","GameCountdown","GameChat","GameButtons","Board","GameHeader","State","useParams","useNavigate","useEffect","useState","Alerts","Server","GamePageUtils","Multiplayer","ClientType","GameState","Singleplayer","UPDATE_GAME_TIMEOUT","GamePage","props","navigate","game_id","waiting","setWaiting","gameState","setGameState","defaultGameState","singleplayer","multiplayerGS","local_username","getAppState","authentication","username","Promise","resolve","reject","startSingleplayerGame","joinMultiplayerGame","then","rr","setrr","forceRR","winner","client_type","VIEWER","opponent_username","board","turn","local_pieces","timer","setTimeout","updateMultiplayerGame","clearTimeout","buildSingleplayerGS","response","getGame","success","launchCriticalError","data","remoteGame","clientType","calcClientType","PLAYER_BLACK","player_b","joinResponse","joinAsPlayerB","remoteGameJoin","buildMultiplayerGS","player_w","incrementViewers","state","newMultiplayerGS","updateFromRemote","areGameStatesEqual","handleMakeMove","move","showNotification","finalMove","promotion","isPromotionMove","pieceAsString","askPromotionPiece","substring","makeMove","err","message","switchTurn","newGameState","playPieceSound","audio","Audio","window","location","host","console","log","loop","play","showGameError","opponent_pieces","winner_username","turn_username","views"],"mappings":"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","sourcesContent":["import './GamePage.css'\r\n\r\nimport GameVS from './components/GameVS/GameVS'\r\nimport GameInfo from './components/GameInfo/GameInfo'\r\nimport GameCountdown from './components/GameCountdown/GameCountdown'\r\nimport GameChat from './components/GameChat/GameChat'\r\nimport GameButtons from './components/GameButtons/GameButtons'\r\nimport Board from './components/ChessBoard/Board/Board'\r\nimport GameHeader from './components/GameHeader/GameHeader'\r\n\r\nimport State from '../../state/State'\r\n\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport Alerts from '../../utils/Alerts/sa-alerts'\r\nimport Server, { RemoteGame, ServerError } from '../../server/server'\r\n\r\nimport GamePageUtils from './utils'\r\nimport { BoardError } from '../../domain/errors'\r\nimport Multiplayer, { ClientType, IMultiplayerGS } from './GameState/MultiplayerGS'\r\nimport GameState from './GameState/GameState'\r\nimport Singleplayer from './GameState/Singleplayer'\r\nimport { MoveObject } from '../../domain/position'\r\n\r\n// LOW TIME BECAUSE ON DEVELOPMENT\r\nconst UPDATE_GAME_TIMEOUT = 700\r\n\r\nexport default function GamePage(props: any) {\r\n  const navigate = useNavigate()\r\n\r\n  // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \r\n  const game_id = useParams().game_id!!\r\n  // Am i waiting for the game info to be retreived from the server ?\r\n  const [waiting, setWaiting] = useState(true)\r\n  const [gameState, setGameState] = useState(GameState.defaultGameState)\r\n  const singleplayer = game_id == \"sp\"\r\n  const multiplayerGS = gameState as IMultiplayerGS\r\n\r\n  const local_username = State.getAppState().authentication.username\r\n\r\n  // FIRST RENDER\r\n  useEffect(() => {\r\n    new Promise((resolve, reject) => {\r\n      if (singleplayer) {\r\n        startSingleplayerGame()\r\n        resolve(null)\r\n      } else {\r\n        joinMultiplayerGame().then(() => resolve(null))\r\n      }\r\n    }).then(() => setWaiting(false))\r\n    return () => { }\r\n  }, [])\r\n\r\n  // AUTO-REFRESH CALLS\r\n  const [rr, setrr] = useState(true)\r\n  const forceRR = () => { setrr(!rr) }\r\n  useEffect(() => {\r\n\r\n    while (true) {\r\n      if (singleplayer)\r\n        return\r\n\r\n      // It is Multiplayer Game\r\n      // Dont try update while i dont have the game\r\n      if (waiting)\r\n        return\r\n\r\n      // I'm not a viewer\r\n      // If game is Over\r\n      if (gameState.winner != null)\r\n        return\r\n\r\n      // Always Update if i'm a viewer\r\n      if (multiplayerGS.client_type == ClientType.VIEWER)\r\n        break\r\n\r\n      // Opponent has not been defined yet\r\n      if (multiplayerGS.opponent_username == null)\r\n        break\r\n\r\n      // Game has started + I am a player\r\n      // It's my turn AND \r\n      if (multiplayerGS.board.turn == multiplayerGS.local_pieces)\r\n        return\r\n\r\n      break\r\n    }\r\n    const timer = setTimeout(() => updateMultiplayerGame(), UPDATE_GAME_TIMEOUT)\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [gameState.board, waiting, rr])\r\n\r\n  function startSingleplayerGame() {\r\n    setGameState(Singleplayer.buildSingleplayerGS())\r\n  }\r\n\r\n  /**\r\n   * Join Multiplayer Game\r\n   * Attempts to get the game identified by the ID passed as URI param\r\n   * Based of of the [local_username] + the remote game it knows who we are: WHITE_PIECES, BLACK_PIECES or VIEWER\r\n   * If we are supposed to be the black player and there is no black player yet we tell the server it's us\r\n   * We update the local [gameState] based of of the remote Game we get from the server \r\n   */\r\n  async function joinMultiplayerGame() {\r\n    // const response = await State.joinGame(game_id)\r\n    const response = await Server.getGame(game_id)\r\n\r\n    if (!response.success) {\r\n      await launchCriticalError(response.data)\r\n      return\r\n    }\r\n\r\n    const remoteGame = response.data as RemoteGame\r\n    const clientType = Multiplayer.calcClientType(remoteGame, local_username)\r\n\r\n    if (clientType == ClientType.PLAYER_BLACK && remoteGame.player_b == null) {\r\n      // JOIN AS BLACK\r\n      const joinResponse = await Server.joinAsPlayerB(game_id)\r\n\r\n      if (joinResponse.success) {\r\n        const remoteGameJoin = joinResponse.data as RemoteGame\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGameJoin, clientType))\r\n      } else {\r\n        await launchCriticalError(joinResponse.data)\r\n        return\r\n      }\r\n    } else {\r\n      if (clientType == ClientType.VIEWER) {\r\n        // Increment viewer count\r\n        setGameState(Multiplayer.buildMultiplayerGS(remoteGame.player_w, remoteGame, clientType))\r\n        Server.incrementViewers(game_id)\r\n      } else {\r\n        // WHITE_PIECES PLAYER\r\n        setGameState(Multiplayer.buildMultiplayerGS(local_username!!, remoteGame, clientType))\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update Multiplayer Game\r\n   * Updates the local game state if the remote game board is different\r\n   */\r\n  async function updateMultiplayerGame() {\r\n    const state = (gameState as IMultiplayerGS)\r\n\r\n    const response = await Server.getGame(state.game_id)\r\n\r\n    forceRR()\r\n\r\n    if (response.success) {\r\n      const remoteGame = response.data as RemoteGame\r\n      const newMultiplayerGS = Multiplayer.updateFromRemote(state, remoteGame)\r\n      if (!GameState.areGameStatesEqual(state, newMultiplayerGS)) {\r\n        setGameState(newMultiplayerGS)\r\n        return\r\n      }\r\n    } else {\r\n      // On error ignore it and gamestate won't be updated.\r\n      return\r\n    }\r\n    // On error ignore it and gamestate won't be updated.\r\n    return\r\n  }\r\n\r\n  /**\r\n   * Handle Make Move\r\n   * Performs a move on the local board and if it succeeds AND we are !singlePlayer validate with the server(updates remote game on success)\r\n   * If on singleplayer just swap the [local_pieces] to play as the opponent\r\n   */\r\n  async function handleMakeMove(move: string) {\r\n    if (gameState.board.turn != gameState.local_pieces) {\r\n      Alerts.showNotification(\"Not your turn!\")\r\n      return\r\n    }\r\n    let finalMove = move\r\n\r\n    const promotion: boolean = gameState.board.isPromotionMove(move)\r\n    if (promotion) {\r\n      const pieceAsString = await GamePageUtils.askPromotionPiece(gameState.local_pieces)\r\n      finalMove = pieceAsString + move.substring(1)\r\n    }\r\n    // Validate + Execute move locally\r\n    try {\r\n      gameState.board.makeMove(finalMove)\r\n    } catch (err) {\r\n      Alerts.showNotification((err as BoardError).message)\r\n      return\r\n    }\r\n    // SINGLEPLAYER\r\n    if (singleplayer) {\r\n      setGameState(Singleplayer.switchTurn(gameState))\r\n    }\r\n    // MULTIPLAYER\r\n    else {\r\n      // Validate with server\r\n      const response = await Server.makeMove(game_id, finalMove)\r\n      if (!response.success) {\r\n        Alerts.showNotification(`Invalid Move: ${(response.data as ServerError).message}`)\r\n        return\r\n      }\r\n      const remoteGame = response.data as RemoteGame\r\n      // Change local state from server game response\r\n      const newGameState = Multiplayer.updateFromRemote(gameState as IMultiplayerGS, remoteGame)\r\n      setGameState(newGameState)\r\n    }\r\n    playPieceSound()\r\n  }\r\n\r\n  function playPieceSound() {\r\n    var audio = new Audio(`${window.location.host}/place_piece.wav`);\r\n    console.log(`${window.location.host}/place_piece.wav`)\r\n    audio.loop = false;\r\n    audio.play();\r\n  }\r\n\r\n  function launchCriticalError(err: BoardError | ServerError) {\r\n    return GamePageUtils.showGameError(game_id, navigate, err.message)\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      {\r\n        !waiting ?\r\n          (\r\n            <div className=\"game-container\">\r\n\r\n              <div className=\"game-container-row\">\r\n                <GameHeader singleplayer={singleplayer} game_id={game_id} game_over={gameState.board.winner != null} />\r\n              </div>\r\n\r\n              <hr className=\"separator\" />\r\n\r\n              {\r\n                singleplayer ?\r\n                  <div className=\"singleplayer-piece-turn\">\r\n                    {\r\n                      gameState.board.winner === null ?\r\n                        <>Turn : {gameState.board.turn === 'w' ? 'WHITE' : 'BLACK'}</>\r\n                        :\r\n                        <>\r\n                          {gameState.board.winner === 'w' ? 'WHITE' : 'BLACK'} pieces won!\r\n                          <button onClick={startSingleplayerGame} className=\"green-btn restart\">RESTART</button>\r\n                        </>\r\n                    }\r\n                  </div>\r\n                  : null\r\n              }\r\n\r\n              <div className=\"game-container-row\">\r\n                {\r\n                  !singleplayer ?\r\n                    <>\r\n                      <GameVS\r\n                        singleplayer={singleplayer}\r\n                        local_player_username={multiplayerGS.local_username} local_player_pieces={multiplayerGS.local_pieces}\r\n                        opponent_username={multiplayerGS.opponent_username} opponent_pieces={multiplayerGS.opponent_pieces}\r\n                      />\r\n                      <GameCountdown game_over={gameState.board.winner != null} initalTime={60} />\r\n                    </>\r\n                    : null\r\n                }\r\n              </div>\r\n\r\n              <div className=\"game-container-row\">\r\n                <Board\r\n                  singleplayer={singleplayer}\r\n                  board={gameState.board}\r\n                  local_player_pieces={multiplayerGS.local_pieces}\r\n                  isViewer={multiplayerGS.client_type === ClientType.VIEWER}\r\n                  turn={gameState.board.turn}\r\n                  game_over={gameState.board.winner != null}\r\n                  onMakeMove={handleMakeMove}\r\n                  onError={launchCriticalError}\r\n                />\r\n                {\r\n                  !singleplayer ?\r\n                    <GameChat game_id={game_id} local_player_username={multiplayerGS.local_username} opponent_username={multiplayerGS.opponent_username} />\r\n                    : null\r\n                }\r\n              </div>\r\n\r\n              <div className=\"game-container-row\">\r\n                <GameInfo\r\n                  singleplayer={singleplayer}\r\n                  game_over={multiplayerGS.winner_username != null}\r\n                  turn_username={multiplayerGS.turn_username}\r\n                  winner_username={multiplayerGS.winner_username}\r\n                  winner_pieces={multiplayerGS.winner}\r\n                  opponent_username={multiplayerGS.opponent_username}\r\n                  views={multiplayerGS.views}\r\n                />\r\n\r\n                {\r\n                  !singleplayer ?\r\n                    <GameButtons gameOver={multiplayerGS.winner_username != null} />\r\n                    : null\r\n                }\r\n              </div>\r\n            </div>\r\n          )\r\n          : null\r\n      }\r\n    </div >\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}