{"ast":null,"code":"import CONFIG from './config';\nconst AXIOSI = CONFIG.AXIOSINSTANCE;\n\nfunction responseIntercept(response) {\n  if (response.status != 200) {\n    alert(response.data);\n    throw response.data;\n  }\n\n  return response.data.data;\n}\n\nfunction errorWrapper(block) {\n  try {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return block(args);\n  } catch (e) {\n    alert(\"SERVER ERROR: \" + e);\n  }\n} // PUBLIC FUNCTIONS\n\n\nconst logout = () => errorWrapper(() => {\n  AXIOSI.get('/logout');\n});\n\nconst getGame = game_id => errorWrapper(() => {\n  AXIOSI.get(`/games?id=${game_id}`).then(res => responseIntercept(res)).then(data => {\n    return data;\n  });\n});\n\nconst Server = {\n  logout,\n  getGame\n};\nexport default Server;","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/server/server.ts"],"names":["CONFIG","AXIOSI","AXIOSINSTANCE","responseIntercept","response","status","alert","data","errorWrapper","block","args","e","logout","get","getGame","game_id","then","res","Server"],"mappings":"AACA,OAAOA,MAAP,MAAmB,UAAnB;AAIA,MAAMC,MAAM,GAAGD,MAAM,CAACE,aAAtB;;AAEA,SAASC,iBAAT,CAA2BC,QAA3B,EAAoD;AAChD,MAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AACxBC,IAAAA,KAAK,CAACF,QAAQ,CAACG,IAAV,CAAL;AACA,UAAMH,QAAQ,CAACG,IAAf;AACH;;AACD,SAAOH,QAAQ,CAACG,IAAT,CAAcA,IAArB;AACH;;AAED,SAASC,YAAT,CAAsBC,KAAtB,EAAmE;AAC/D,MAAI;AAAA,sCAD8CC,IAC9C;AAD8CA,MAAAA,IAC9C;AAAA;;AACA,WAAOD,KAAK,CAACC,IAAD,CAAZ;AACH,GAFD,CAEE,OAAOC,CAAP,EAAU;AACRL,IAAAA,KAAK,CAAC,mBAAmBK,CAApB,CAAL;AACH;AACJ,C,CAED;;;AACA,MAAMC,MAAM,GAAG,MAAMJ,YAAY,CAAC,MAAM;AACpCP,EAAAA,MAAM,CAACY,GAAP,CAAW,SAAX;AACH,CAFgC,CAAjC;;AAIA,MAAMC,OAAO,GAAIC,OAAD,IAAoCP,YAAY,CAAC,MAAM;AACnEP,EAAAA,MAAM,CAACY,GAAP,CAAY,aAAYE,OAAQ,EAAhC,EACKC,IADL,CACUC,GAAG,IAAId,iBAAiB,CAACc,GAAD,CADlC,EAEKD,IAFL,CAEUT,IAAI,IAAI;AACV,WAAQA,IAAR;AACH,GAJL;AAKH,CAN+D,CAAhE;;AAQA,MAAMW,MAAM,GAAG;AACXN,EAAAA,MADW;AAEXE,EAAAA;AAFW,CAAf;AAKA,eAAeI,MAAf","sourcesContent":["import { AxiosResponse } from 'axios'\r\nimport CONFIG from './config'\r\nimport { BoardObject } from '../domain/board'\r\nimport { Game } from '../state/reducers/root'\r\n\r\nconst AXIOSI = CONFIG.AXIOSINSTANCE\r\n\r\nfunction responseIntercept(response: AxiosResponse) {\r\n    if (response.status != 200) {\r\n        alert(response.data)\r\n        throw response.data\r\n    }\r\n    return response.data.data\r\n}\r\n\r\nfunction errorWrapper(block: (...a: any[]) => any, ...args: any[]) {\r\n    try {\r\n        return block(args)\r\n    } catch (e) {\r\n        alert(\"SERVER ERROR: \" + e)\r\n    }\r\n}\r\n\r\n// PUBLIC FUNCTIONS\r\nconst logout = () => errorWrapper(() => {\r\n    AXIOSI.get('/logout')\r\n})\r\n\r\nconst getGame = (game_id: string): Promise<Game> => errorWrapper(() => {\r\n    AXIOSI.get(`/games?id=${game_id}`)\r\n        .then(res => responseIntercept(res))\r\n        .then(data => {\r\n            return (data as Game)\r\n        })\r\n})\r\n\r\nconst Server = {\r\n    logout,\r\n    getGame\r\n}\r\n\r\nexport default Server"]},"metadata":{},"sourceType":"module"}