{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\components\\\\ChessBoard\\\\Board\\\\Board.tsx\";\nimport './board.css';\nimport Tile, { TileColor } from '../Tile/Tile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_WIDTH = 8;\nconst BOARD_HEIGHT = 8;\n\n// An empty board representation\nclass DefaultBoard {} // A non empty board representation\n\n\nclass BoardObject {}\n\nexport default function Board() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    board: BoardObject\n  };\n\n  const generateBoard = () => {\n    const calcTileColor = (row, col) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK;\n\n    const rowContents = [];\n    const board = Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(null));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: row.map((col, colIdx) => {\n            return /*#__PURE__*/_jsxDEV(Tile, {\n              color: calcTileColor(rowIdx, colIdx)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: generateBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/TS/OnlineChess/onlinechess/src/components/ChessBoard/Board/Board.tsx"],"names":["Tile","TileColor","BOARD_WIDTH","BOARD_HEIGHT","DefaultBoard","BoardObject","Board","props","board","generateBoard","calcTileColor","row","col","LIGHT","DARK","rowContents","Array","fill","map","rowIdx","colIdx"],"mappings":";AAAA,OAAO,aAAP;AAEA,OAAOA,IAAP,IAAeC,SAAf,QAAgC,cAAhC;;AACA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,YAAY,GAAG,CAArB;;AAMA;AACA,MAAMC,YAAN,CAA6C,E,CAE7C;;;AACA,MAAMC,WAAN,CAA4C;;AAI5C,eAAe,SAASC,KAAT,GAAwE;AAAA,MAAzDC,KAAyD,uEAAtB;AAACC,IAAAA,KAAK,EAAEH;AAAR,GAAsB;;AAErF,QAAMI,aAAa,GAAG,MAAM;AAC1B,UAAMC,aAAa,GAAG,CAACC,GAAD,EAAcC,GAAd,KAA8B,CAACA,GAAG,GAAGD,GAAP,IAAc,CAAd,KAAoB,CAApB,GAAwBV,SAAS,CAACY,KAAlC,GAA0CZ,SAAS,CAACa,IAAxG;;AACA,UAAMC,WAAW,GAAG,EAApB;AACA,UAAMP,KAAwB,GAAGQ,KAAK,CAACb,YAAD,CAAL,CAAoBc,IAApB,CAAyB,IAAzB,EAA+BC,GAA/B,CAAmC,MAAIF,KAAK,CAACd,WAAD,CAAL,CAAmBe,IAAnB,CAAwB,IAAxB,CAAvC,CAAjC;AACA,wBACE;AAAA,gBAEIT,KAAK,CAACU,GAAN,CAAU,CAACP,GAAD,EAAMQ,MAAN,KAAiB;AACzB,4BACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,oBAEER,GAAG,CAACO,GAAJ,CAAQ,CAACN,GAAD,EAAMQ,MAAN,KAAiB;AACvB,gCACE,QAAC,IAAD;AAAM,cAAA,KAAK,EAAEV,aAAa,CAACS,MAAD,EAASC,MAAT;AAA1B;AAAA;AAAA;AAAA;AAAA,oBADF;AAGD,WAJD;AAFF;AAAA;AAAA;AAAA;AAAA,gBADF;AAUE,OAXJ;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD,GAvBD;;AA0BA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACKX,aAAa;AADlB;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;KAjCuBH,K","sourcesContent":["import './board.css'\r\n\r\nimport Tile, { TileColor } from '../Tile/Tile';\r\nconst BOARD_WIDTH = 8;\r\nconst BOARD_HEIGHT = 8;\r\n\r\ninterface BoardInterface {\r\n\r\n}\r\n\r\n// An empty board representation\r\nclass DefaultBoard implements BoardInterface {}\r\n\r\n// A non empty board representation\r\nclass BoardObject implements BoardInterface {\r\n\r\n}\r\n\r\nexport default function Board(props : {board : BoardInterface} = {board: BoardObject}) {\r\n\r\n  const generateBoard = () => {\r\n    const calcTileColor = (row: number, col: number) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK\r\n    const rowContents = []\r\n    const board: Array<Array<any>> = Array(BOARD_HEIGHT).fill(null).map(()=>Array(BOARD_WIDTH).fill(null));\r\n    return (\r\n      <div>\r\n        {\r\n          board.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"board-row\">\r\n                {\r\n                row.map((col, colIdx) => {\r\n                  return (\r\n                    <Tile color={calcTileColor(rowIdx, colIdx)}/>\r\n                  )\r\n                }\r\n                )}\r\n              </div>\r\n            )}\r\n            )\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"board\">\r\n        {generateBoard()}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}