{"ast":null,"code":"import Actions from './actions/action';\nimport { store as Store } from '../index';\nimport Server from '../server/server';\nexport function GetAppState() {\n  return Store.getState();\n}\n_c = GetAppState;\nexport function joinGame(game_id, callback) {\n  // Since we are joining a new game \n  Store.dispatch(Actions.leaveGame());\n  Store.dispatch(function (dispatch, getState) {\n    Server.getGame(game_id).then(response => {\n      // Game Exists\n      if (response.success) {\n        const gameObject = response.data;\n        dispatch(Actions.joinGame(gameObject));\n        callback(true, gameObject);\n      } else {\n        callback(false, null);\n      }\n    });\n  });\n}\nexport function login(username) {\n  Store.dispatch(Actions.doLogin(username));\n}\nexport function logout() {\n  Store.dispatch(Actions.clearState());\n}\nexport function leaveGame() {\n  Store.dispatch(Actions.leaveGame());\n}\nexport function clearState() {\n  Store.dispatch(Actions.clearState());\n}\nconst State = {\n  GetAppState,\n  joinGame,\n  login,\n  logout,\n  leaveGame\n};\nexport default State;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetAppState\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/state/State.ts"],"names":["Actions","store","Store","Server","GetAppState","getState","joinGame","game_id","callback","dispatch","leaveGame","getGame","then","response","success","gameObject","data","login","username","doLogin","logout","clearState","State"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,kBAApB;AACA,SAASC,KAAK,IAAIC,KAAlB,QAA+B,UAA/B;AACA,OAAOC,MAAP,MAAuC,kBAAvC;AAGA,OAAO,SAASC,WAAT,GAAiC;AACpC,SAAOF,KAAK,CAACG,QAAN,EAAP;AACH;KAFeD,W;AAIhB,OAAO,SAASE,QAAT,CAAkBC,OAAlB,EAAmCC,QAAnC,EAAqI;AACxI;AACAN,EAAAA,KAAK,CAACO,QAAN,CAAeT,OAAO,CAACU,SAAR,EAAf;AAEAR,EAAAA,KAAK,CAACO,QAAN,CAAe,UAAUA,QAAV,EAAyBJ,QAAzB,EAAwC;AACnDF,IAAAA,MAAM,CAACQ,OAAP,CAAeJ,OAAf,EACKK,IADL,CACWC,QAAD,IAA8B;AAChC;AACA,UAAIA,QAAQ,CAACC,OAAb,EAAsB;AAClB,cAAMC,UAAU,GAAGF,QAAQ,CAACG,IAA5B;AACAP,QAAAA,QAAQ,CAACT,OAAO,CAACM,QAAR,CAAiBS,UAAjB,CAAD,CAAR;AACAP,QAAAA,QAAQ,CAAC,IAAD,EAAOO,UAAP,CAAR;AACH,OAJD,MAIO;AACHP,QAAAA,QAAQ,CAAC,KAAD,EAAQ,IAAR,CAAR;AACH;AACJ,KAVL;AAWH,GAZD;AAaH;AAED,OAAO,SAASS,KAAT,CAAeC,QAAf,EAAiC;AACpChB,EAAAA,KAAK,CAACO,QAAN,CAAeT,OAAO,CAACmB,OAAR,CAAgBD,QAAhB,CAAf;AACH;AAED,OAAO,SAASE,MAAT,GAAkB;AACrBlB,EAAAA,KAAK,CAACO,QAAN,CAAeT,OAAO,CAACqB,UAAR,EAAf;AACH;AAED,OAAO,SAASX,SAAT,GAAqB;AACxBR,EAAAA,KAAK,CAACO,QAAN,CAAeT,OAAO,CAACU,SAAR,EAAf;AACH;AAED,OAAO,SAASW,UAAT,GAAsB;AACzBnB,EAAAA,KAAK,CAACO,QAAN,CAAeT,OAAO,CAACqB,UAAR,EAAf;AACH;AAED,MAAMC,KAAK,GAAG;AACVlB,EAAAA,WADU;AAEVE,EAAAA,QAFU;AAGVW,EAAAA,KAHU;AAIVG,EAAAA,MAJU;AAKVV,EAAAA;AALU,CAAd;AAQA,eAAeY,KAAf","sourcesContent":["import Actions from './actions/action'\r\nimport { store as Store } from '../index'\r\nimport Server, { ServerResponse } from '../server/server'\r\nimport { AppState, RemoteGame } from './reducers/root'\r\n\r\nexport function GetAppState(): AppState {\r\n    return Store.getState()\r\n}\r\n\r\nexport function joinGame(game_id: string, callback: (success: boolean, game: RemoteGame | null, original_response: ServerResponse) => void) {\r\n    // Since we are joining a new game \r\n    Store.dispatch(Actions.leaveGame())\r\n\r\n    Store.dispatch(function (dispatch: any, getState: any) {\r\n        Server.getGame(game_id)\r\n            .then((response: ServerResponse) => {\r\n                // Game Exists\r\n                if (response.success) {\r\n                    const gameObject = response.data as RemoteGame\r\n                    dispatch(Actions.joinGame(gameObject))\r\n                    callback(true, gameObject)\r\n                } else {\r\n                    callback(false, null)\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function login(username: string) {\r\n    Store.dispatch(Actions.doLogin(username))\r\n}\r\n\r\nexport function logout() {\r\n    Store.dispatch(Actions.clearState())\r\n}\r\n\r\nexport function leaveGame() {\r\n    Store.dispatch(Actions.leaveGame())\r\n}\r\n\r\nexport function clearState() {\r\n    Store.dispatch(Actions.clearState())\r\n}\r\n\r\nconst State = {\r\n    GetAppState,\r\n    joinGame,\r\n    login,\r\n    logout,\r\n    leaveGame\r\n}\r\n\r\nexport default State"]},"metadata":{},"sourceType":"module"}