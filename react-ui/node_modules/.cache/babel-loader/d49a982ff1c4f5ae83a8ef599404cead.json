{"ast":null,"code":"import Actions from'./actions/action';import{store as Store}from'../index';export function getAppState(){return Store.getState();}/* export function joinGame(\r\n    game_id: string,\r\n    // callback: (success: boolean, game: RemoteGame | null, original_response: ServerResponse) => void\r\n): Promise<ServerResponse> {\r\n    // Since we are joining a new game \r\n    Store.dispatch(Actions.leaveGame())\r\n\r\n    return new Promise((resolve, reject) => {\r\n        Store.dispatch(function (dispatch: any, getState: any) {\r\n            Server.getGame(game_id)\r\n                .then((response: ServerResponse) => {\r\n                    // Game Exists\r\n                    if (response.success) {\r\n                        const gameObject = response.data as RemoteGame\r\n                        dispatch(Actions.joinGame(gameObject))\r\n                    }\r\n                    resolve(response)\r\n                })\r\n        })\r\n    })\r\n} */export function login(username){Store.dispatch(Actions.doLogin(username));}export function logout(){Store.dispatch(Actions.clearState());}export function clearState(){Store.dispatch(Actions.clearState());}var State={getAppState:getAppState,login:login,logout:logout};export default State;","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/state/State.ts"],"names":["Actions","store","Store","getAppState","getState","login","username","dispatch","doLogin","logout","clearState","State"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,kBAApB,CACA,OAASC,KAAK,GAAIC,CAAAA,KAAlB,KAA+B,UAA/B,CAGA,MAAO,SAASC,CAAAA,WAAT,EAAiC,CACpC,MAAOD,CAAAA,KAAK,CAACE,QAAN,EAAP,CACH,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAEA,MAAO,SAASC,CAAAA,KAAT,CAAeC,QAAf,CAAiC,CACpCJ,KAAK,CAACK,QAAN,CAAeP,OAAO,CAACQ,OAAR,CAAgBF,QAAhB,CAAf,EACH,CAED,MAAO,SAASG,CAAAA,MAAT,EAAkB,CACrBP,KAAK,CAACK,QAAN,CAAeP,OAAO,CAACU,UAAR,EAAf,EACH,CAED,MAAO,SAASA,CAAAA,UAAT,EAAsB,CACzBR,KAAK,CAACK,QAAN,CAAeP,OAAO,CAACU,UAAR,EAAf,EACH,CAED,GAAMC,CAAAA,KAAK,CAAG,CACVR,WAAW,CAAXA,WADU,CAEVE,KAAK,CAALA,KAFU,CAGVI,MAAM,CAANA,MAHU,CAAd,CAMA,cAAeE,CAAAA,KAAf","sourcesContent":["import Actions from './actions/action'\r\nimport { store as Store } from '../index'\r\nimport { AppState } from './reducers/root'\r\n\r\nexport function getAppState(): AppState {\r\n    return Store.getState()\r\n}\r\n\r\n/* export function joinGame(\r\n    game_id: string,\r\n    // callback: (success: boolean, game: RemoteGame | null, original_response: ServerResponse) => void\r\n): Promise<ServerResponse> {\r\n    // Since we are joining a new game \r\n    Store.dispatch(Actions.leaveGame())\r\n\r\n    return new Promise((resolve, reject) => {\r\n        Store.dispatch(function (dispatch: any, getState: any) {\r\n            Server.getGame(game_id)\r\n                .then((response: ServerResponse) => {\r\n                    // Game Exists\r\n                    if (response.success) {\r\n                        const gameObject = response.data as RemoteGame\r\n                        dispatch(Actions.joinGame(gameObject))\r\n                    }\r\n                    resolve(response)\r\n                })\r\n        })\r\n    })\r\n} */\r\n\r\nexport function login(username: string) {\r\n    Store.dispatch(Actions.doLogin(username))\r\n}\r\n\r\nexport function logout() {\r\n    Store.dispatch(Actions.clearState())\r\n}\r\n\r\nexport function clearState() {\r\n    Store.dispatch(Actions.clearState())\r\n}\r\n\r\nconst State = {\r\n    getAppState,\r\n    login,\r\n    logout,\r\n}\r\n\r\nexport default State"]},"metadata":{},"sourceType":"module"}