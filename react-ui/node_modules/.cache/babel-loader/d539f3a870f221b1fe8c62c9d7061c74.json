{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\chessbackend\\\\react-ui\\\\src\\\\pages\\\\GamePage\\\\components\\\\ChessBoard\\\\Board\\\\Board.tsx\",\n    _s = $RefreshSig$();\n\nimport './board.css';\nimport Tile, { TileColor } from '../Tile/Tile';\nimport { Move, moveToString, Position } from '../../../../../domain/position';\nimport { useState } from 'react';\nimport Alerts from '../../../../../utils/Alerts/sa-alerts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initSelectedTile = {\n  tile: null\n};\nconst initTargetTiles = [];\nexport default function Board(props) {\n  _s();\n\n  const [selectedTile, setSelectedTile] = useState(initSelectedTile);\n  const [targetTiles, setTargetTiles] = useState(initTargetTiles);\n  const board = props.board;\n\n  function buildTile(row, column, piece) {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      piece: board.getPieceAt(Position(column, row)) // Tile state\n      ,\n      selected: isSelected(row, column),\n      target: isTarget(row, column),\n      lastMove: isFromLastMove(row, column) // DARK or LIGHT \n      ,\n      color: calcTileColor(row, column) // Position\n      ,\n      position: Position(column, row) // Events\n      ,\n      onTileClick: () => handleTileClick(row, column, piece)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n  const isFromLastMove = (row, column) => {\n    if (board.moves.length == 0) return false;\n    console.log(board.moves.values());\n    const lastMove = board.moves[-1];\n    console.log(lastMove);\n\n    if (lastMove.start.row == row && lastMove.start.column == column || lastMove.end.row == row && lastMove.end.column == column) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const calcTileColor = (row, col) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK;\n\n  const isTarget = (row, col) => !props.game_over && targetTiles.find(pos => pos.row === row && pos.column === col) != undefined;\n\n  const isSelected = (row, col) => {\n    var _selectedTile$tile, _selectedTile$tile2;\n\n    return !props.game_over && row == ((_selectedTile$tile = selectedTile.tile) === null || _selectedTile$tile === void 0 ? void 0 : _selectedTile$tile.row) && col == ((_selectedTile$tile2 = selectedTile.tile) === null || _selectedTile$tile2 === void 0 ? void 0 : _selectedTile$tile2.column);\n  };\n\n  const handleTileClick = (row, col, pieceClicked) => {\n    setSelectedTile({\n      tile: null\n    });\n    setTargetTiles([]);\n    if (props.game_over || props.isViewer) return;\n\n    if (!props.singleplayer && board.turn != props.local_player_pieces) {\n      Alerts.showNotification(\"Not your turn\");\n      return;\n    }\n\n    const positionClicked = Position(col, row); // 1. TILE IS SELECTED\n\n    if ((selectedTile === null || selectedTile === void 0 ? void 0 : selectedTile.tile) != null) {\n      // CLICKED SELECTED TILE AGAIN. JUST UNSELECT\n      if (isSelected(positionClicked.row, positionClicked.column)) {\n        return;\n      } // CLICKED A TARGET - MAKE MOVE\n\n\n      if (isTarget(positionClicked.row, positionClicked.column)) {\n        const selectedPiece = board.getPieceAt(selectedTile.tile); // board.makeMove(moveToString(Move(selectedPiece!!.toString(), selectedTile.tile, positionClicked)))\n\n        props.onMakeMove(moveToString(Move(selectedPiece.toString(), selectedTile.tile, positionClicked)));\n        return;\n      } // Select a tile + Show Possible Targets\n\n\n      if ((pieceClicked === null || pieceClicked === void 0 ? void 0 : pieceClicked.color) == props.local_player_pieces) {\n        setSelectedTile({\n          tile: positionClicked\n        });\n        const targets = Array.from(board.generateAllPossibleTargets(positionClicked));\n        setTargetTiles(targets);\n      }\n    } // 2. TILE IS NOT SELECTED\n    else {\n      // Select a tile + Show Possible Targets\n      if ((pieceClicked === null || pieceClicked === void 0 ? void 0 : pieceClicked.color) == props.local_player_pieces) {\n        setSelectedTile({\n          tile: positionClicked\n        });\n        const targets = Array.from(board.generateAllPossibleTargets(positionClicked));\n        setTargetTiles(targets);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board.board.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: row.map((piece, colIdx) => buildTile(rowIdx, colIdx, piece))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"m1vie7Op5i4AWdUuS5CIu49/DZ8=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/chessbackend/react-ui/src/pages/GamePage/components/ChessBoard/Board/Board.tsx"],"names":["Tile","TileColor","Move","moveToString","Position","useState","Alerts","initSelectedTile","tile","initTargetTiles","Board","props","selectedTile","setSelectedTile","targetTiles","setTargetTiles","board","buildTile","row","column","piece","getPieceAt","isSelected","isTarget","isFromLastMove","calcTileColor","handleTileClick","moves","length","console","log","values","lastMove","start","end","col","LIGHT","DARK","game_over","find","pos","undefined","pieceClicked","isViewer","singleplayer","turn","local_player_pieces","showNotification","positionClicked","selectedPiece","onMakeMove","toString","color","targets","Array","from","generateAllPossibleTargets","map","rowIdx","colIdx"],"mappings":"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","sourcesContent":["import './board.css'\r\n\r\nimport Tile, { TileColor } from '../Tile/Tile';\r\nimport { BoardObject } from '../../../../../domain/board'\r\nimport { Move, moveToString, Position, PositionObject } from '../../../../../domain/position'\r\nimport { BoardError } from '../../../../../domain/errors';\r\nimport { Piece, PieceColor } from '../../../../../domain/piece';\r\nimport { useState } from 'react';\r\nimport Alerts from '../../../../../utils/Alerts/sa-alerts';\r\n\r\ninterface TileWrapper { tile: PositionObject | null }\r\n\r\nconst initSelectedTile: TileWrapper = { tile: null }\r\nconst initTargetTiles: PositionObject[] = []\r\n\r\nexport default function Board(\r\n  props: {\r\n    singleplayer: boolean\r\n\r\n    board: BoardObject,\r\n    local_player_pieces: PieceColor\r\n\r\n    isViewer: boolean\r\n    game_over: boolean\r\n\r\n    turn: PieceColor\r\n\r\n    onMakeMove: (move: string) => void\r\n    onError: (error: BoardError) => void\r\n  }\r\n) {\r\n\r\n  const [selectedTile, setSelectedTile] = useState(initSelectedTile)\r\n  const [targetTiles, setTargetTiles] = useState(initTargetTiles)\r\n  const board = props.board\r\n\r\n  function buildTile(row: number, column: number, piece: Piece | null) {\r\n    return (\r\n      <Tile\r\n        piece={board.getPieceAt(Position(column, row))}\r\n\r\n        // Tile state\r\n        selected={isSelected(row, column)}\r\n        target={isTarget(row, column)}\r\n        lastMove={isFromLastMove(row, column)}\r\n\r\n        // DARK or LIGHT \r\n        color={calcTileColor(row, column)}\r\n\r\n        // Position\r\n        position={Position(column, row)}\r\n\r\n        // Events\r\n        onTileClick={() => handleTileClick(row, column, piece)}\r\n      />\r\n    )\r\n  }\r\n\r\n  const isFromLastMove = (row: number, column: number) => {\r\n    if (board.moves.length == 0)\r\n      return false\r\n    console.log(board.moves.values())\r\n    const lastMove = board.moves[-1]\r\n    console.log(lastMove)\r\n    if (\r\n      (lastMove.start.row == row && lastMove.start.column == column)\r\n      ||\r\n      (lastMove.end.row == row && lastMove.end.column == column)\r\n    ) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  const calcTileColor = (row: number, col: number) =>\r\n    (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK\r\n\r\n  const isTarget = (row: number, col: number) =>\r\n    !props.game_over && targetTiles.find((pos) => pos.row === row && pos.column === col) != undefined\r\n\r\n  const isSelected = (row: number, col: number) =>\r\n    !props.game_over && (row == selectedTile.tile?.row && col == selectedTile.tile?.column)\r\n\r\n  const handleTileClick = (row: number, col: number, pieceClicked: Piece | null) => {\r\n    setSelectedTile({ tile: null })\r\n    setTargetTiles([])\r\n\r\n    if (props.game_over || props.isViewer)\r\n      return\r\n\r\n    if (!props.singleplayer && board.turn != props.local_player_pieces) {\r\n      Alerts.showNotification(\"Not your turn\")\r\n      return\r\n    }\r\n\r\n    const positionClicked = Position(col, row)\r\n\r\n    // 1. TILE IS SELECTED\r\n    if (selectedTile?.tile != null) {\r\n\r\n      // CLICKED SELECTED TILE AGAIN. JUST UNSELECT\r\n      if (isSelected(positionClicked.row, positionClicked.column)) {\r\n        return\r\n      }\r\n      // CLICKED A TARGET - MAKE MOVE\r\n      if (isTarget(positionClicked.row, positionClicked.column)) {\r\n        const selectedPiece = board.getPieceAt(selectedTile.tile)\r\n        // board.makeMove(moveToString(Move(selectedPiece!!.toString(), selectedTile.tile, positionClicked)))\r\n        props.onMakeMove(moveToString(Move(selectedPiece!!.toString(), selectedTile.tile, positionClicked)))\r\n        return\r\n      }\r\n\r\n      // Select a tile + Show Possible Targets\r\n      if (pieceClicked?.color == props.local_player_pieces) {\r\n        setSelectedTile({ tile: positionClicked })\r\n        const targets = Array.from(board.generateAllPossibleTargets(positionClicked))\r\n        setTargetTiles(targets)\r\n      }\r\n    }\r\n    // 2. TILE IS NOT SELECTED\r\n    else {\r\n      // Select a tile + Show Possible Targets\r\n      if (pieceClicked?.color == props.local_player_pieces) {\r\n        setSelectedTile({ tile: positionClicked })\r\n        const targets = Array.from(board.generateAllPossibleTargets(positionClicked))\r\n        setTargetTiles(targets)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div>\r\n        {\r\n          board.board.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"board-row\">\r\n                {row.map((piece, colIdx) => buildTile(rowIdx, colIdx, piece))}\r\n              </div>\r\n            )\r\n          }\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}