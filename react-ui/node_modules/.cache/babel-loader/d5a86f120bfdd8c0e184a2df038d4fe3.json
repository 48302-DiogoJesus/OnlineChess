{"ast":null,"code":"import { BOARD_HEIGHT, BOARD_WIDTH } from './board';\nimport ERRORS from './errors';\nimport { charToPiece } from './piece';\nexport function range(x, min, max) {\n  return x >= min && x <= max;\n}\n/**\r\n * Position Object\r\n * Represents a position in a 2D environment such as a matrix\r\n * @property {column}\r\n * @property {row}\r\n */\n\nexport function positionToString(position) {\n  return `${String.fromCharCode('a'.charCodeAt(0) + position.column)}${BOARD_HEIGHT - position.row}`;\n}\nexport function stringToPosition(string) {\n  if (string.length != 2) throw ERRORS.INVALID_POSITION_CONVERSION;\n  const column = string.charCodeAt(0) - 'a'.charCodeAt(0);\n  console.log(BOARD_HEIGHT.toString() + 1);\n  const row = '0'.charCodeAt(0) + BOARD_HEIGHT - string.charCodeAt(1);\n  if (!range(column, 0, BOARD_WIDTH - 1) || !range(row, 0, BOARD_HEIGHT - 1)) throw ERRORS.INVALID_POSITION_CONVERSION;\n  return Position(column, row);\n}\n/**\r\n * Position\r\n * Build a position object\r\n * @param {column}\r\n * @param {row}\r\n * @returns a new PositionObject with the given {column} and {row}\r\n */\n\nexport const Position = (column, row) => {\n  return {\n    column,\n    row\n  };\n};\n_c = Position;\n\n/**\r\n * Move\r\n * Build a move object\r\n * @param {pieceChar}\r\n * @param {start} position\r\n * @param {end} position\r\n * @returns a new move object\r\n*/\nexport const Move = (pieceChar, start, end) => {\n  return {\n    pieceChar,\n    start,\n    end\n  };\n};\n_c2 = Move;\nexport function stringToMove(string) {\n  if (string.length != 5) throw ERRORS.INVALID_MOVE_CONVERSION;\n  const piece = string[0];\n  const start = stringToPosition(string.substring(1, 3));\n  const end = stringToPosition(string.substring(3, 5));\n  if (start === null || end === null || charToPiece(piece) === null) throw ERRORS.INVALID_MOVE_CONVERSION;\n  return Move(piece, start, end);\n}\nexport function moveToString(move) {\n  return move.pieceChar + positionToString(move.start) + positionToString(move.end);\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Position\");\n$RefreshReg$(_c2, \"Move\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/domain/position.ts"],"names":["BOARD_HEIGHT","BOARD_WIDTH","ERRORS","charToPiece","range","x","min","max","positionToString","position","String","fromCharCode","charCodeAt","column","row","stringToPosition","string","length","INVALID_POSITION_CONVERSION","console","log","toString","Position","Move","pieceChar","start","end","stringToMove","INVALID_MOVE_CONVERSION","piece","substring","moveToString","move"],"mappings":"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","sourcesContent":["import {\r\n    BOARD_HEIGHT,\r\n    BOARD_WIDTH\r\n} from './board'\r\nimport ERRORS from './errors'\r\nimport { charToPiece } from './piece';\r\n\r\nexport function range(x: number, min: number, max: number) {\r\n    return x >= min && x <= max;\r\n}\r\n\r\n/**\r\n * Position Object\r\n * Represents a position in a 2D environment such as a matrix\r\n * @property {column}\r\n * @property {row}\r\n */\r\nexport interface PositionObject {\r\n    column: number,\r\n    row: number\r\n}\r\n\r\nexport function positionToString(position: PositionObject): string {\r\n    return `${String.fromCharCode('a'.charCodeAt(0) + position.column)}${BOARD_HEIGHT - position.row}`\r\n}\r\n\r\nexport function stringToPosition(string: string): PositionObject {\r\n    if (string.length != 2)\r\n        throw ERRORS.INVALID_POSITION_CONVERSION\r\n\r\n    const column = string.charCodeAt(0) - 'a'.charCodeAt(0)\r\n    console.log(BOARD_HEIGHT.toString() + 1)\r\n    const row = ('0'.charCodeAt(0) + BOARD_HEIGHT) - string.charCodeAt(1)\r\n\r\n    if (!range(column, 0, BOARD_WIDTH - 1) || !range(row, 0, BOARD_HEIGHT - 1))\r\n        throw ERRORS.INVALID_POSITION_CONVERSION\r\n\r\n    return Position(column, row)\r\n}\r\n\r\n/**\r\n * Position\r\n * Build a position object\r\n * @param {column}\r\n * @param {row}\r\n * @returns a new PositionObject with the given {column} and {row}\r\n */\r\nexport const Position = (column: number, row: number): PositionObject => {\r\n    return { column, row }\r\n}\r\n\r\nexport interface MoveObject {\r\n    pieceChar: string,\r\n    start: PositionObject,\r\n    end: PositionObject\r\n}\r\n\r\n/**\r\n * Move\r\n * Build a move object\r\n * @param {pieceChar}\r\n * @param {start} position\r\n * @param {end} position\r\n * @returns a new move object\r\n*/\r\nexport const Move = (pieceChar: string, start: PositionObject, end: PositionObject): MoveObject => {\r\n    return { pieceChar, start, end }\r\n}\r\n\r\nexport function stringToMove(string: string) {\r\n    if (string.length != 5)\r\n        throw ERRORS.INVALID_MOVE_CONVERSION\r\n\r\n    const piece = string[0]\r\n    const start = stringToPosition(string.substring(1, 3))\r\n    const end = stringToPosition(string.substring(3, 5))\r\n\r\n    if (start === null || end === null || charToPiece(piece) === null)\r\n        throw ERRORS.INVALID_MOVE_CONVERSION\r\n\r\n    return Move(piece, start, end)\r\n}\r\n\r\nexport function moveToString(move: MoveObject): string {\r\n    return move.pieceChar + positionToString(move.start) + positionToString(move.end)\r\n}"]},"metadata":{},"sourceType":"module"}