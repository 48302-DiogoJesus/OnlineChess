{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\components\\\\ChessBoard\\\\Board\\\\Board.tsx\",\n    _s = $RefreshSig$();\n\nimport './board.css';\nimport Tile, { TileColor } from '../Tile/Tile';\nimport { Move, moveToString, Position } from '../../../domain/position';\nimport { useState } from 'react';\nimport Alerts from '../../Alerts/sa-alerts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initSelectedTile = {\n  tile: null\n};\nconst initTargetTiles = [];\nexport default function Board(props) {\n  _s();\n\n  const [selectedTile, setSelectedTile] = useState(initSelectedTile);\n  const [targetTiles, setTargetTiles] = useState(initTargetTiles);\n  const board = getBoardFromProps();\n  /*\r\n  function getBoardFromProps(): BoardObject {\r\n    const boardAsString: string | undefined = props.boardString\r\n      if (boardAsString == undefined)\r\n      return new BoardObject(props.turn)\r\n      try {\r\n      return stringToBoard(boardAsString, props.turn)\r\n    } catch (e: any) {\r\n      const err = e as BoardError\r\n      err.message = `[DEBUG] Invalid Board: ${boardAsString.length} => ${boardAsString}\\nOriginal Error: ${err.message}`\r\n      props.onError(err)\r\n    }\r\n    return new BoardObject(props.turn)\r\n  }\r\n  */\n\n  function buildTile(row, column, piece) {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      piece: board.getPieceAt(Position(column, row)) // Tile state\n      ,\n      selected: isSelected(row, column),\n      target: isTarget(row, column) // DARK or LIGHT \n      ,\n      color: calcTileColor(row, column) // Position\n      ,\n      position: Position(column, row) // Events\n      ,\n      onTileClick: () => handleTileClick(row, column, piece)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n  const calcTileColor = (row, col) => (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK;\n\n  const isTarget = (row, col) => targetTiles.find(pos => pos.row === row && pos.column === col) != undefined;\n\n  const isSelected = (row, col) => {\n    var _selectedTile$tile, _selectedTile$tile2;\n\n    return row == ((_selectedTile$tile = selectedTile.tile) === null || _selectedTile$tile === void 0 ? void 0 : _selectedTile$tile.row) && col == ((_selectedTile$tile2 = selectedTile.tile) === null || _selectedTile$tile2 === void 0 ? void 0 : _selectedTile$tile2.column);\n  };\n\n  const handleTileClick = (row, col, pieceClicked) => {\n    setSelectedTile({\n      tile: null\n    });\n    setTargetTiles([]);\n\n    if (board.turn != props.local_player_pieces) {\n      Alerts.showNotification(\"Not your turn\");\n      return;\n    }\n\n    const positionClicked = Position(col, row); // 1. TILE IS SELECTED\n\n    if ((selectedTile === null || selectedTile === void 0 ? void 0 : selectedTile.tile) != null) {\n      // CLICKED SELECTED TILE AGAIN. JUST UNSELECT\n      if (isSelected(positionClicked.row, positionClicked.column)) {\n        return;\n      } // CLICKED A TARGET - MAKE MOVE\n\n\n      if (isTarget(positionClicked.row, positionClicked.column)) {\n        console.log(\"TARGET\");\n        const selectedPiece = board.getPieceAt(selectedTile.tile); // board.makeMove(moveToString(Move(selectedPiece!!.toString(), selectedTile.tile, positionClicked)))\n\n        props.onMakeMove(moveToString(Move(selectedPiece.toString(), selectedTile.tile, positionClicked)));\n        return;\n      }\n\n      if ((pieceClicked === null || pieceClicked === void 0 ? void 0 : pieceClicked.color) == props.local_player_pieces) {\n        setSelectedTile({\n          tile: positionClicked\n        });\n        const targets = Array.from(board.generateAllPossibleTargets(positionClicked));\n        setTargetTiles(targets);\n      }\n    } // 2. TILE IS NOT SELECTED\n    else {\n      // ONE OF MY TILES\n      if ((pieceClicked === null || pieceClicked === void 0 ? void 0 : pieceClicked.color) == props.local_player_pieces) {\n        setSelectedTile({\n          tile: positionClicked\n        });\n        const targets = Array.from(board.generateAllPossibleTargets(positionClicked));\n        setTargetTiles(targets);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: board === null || board === void 0 ? void 0 : board.board.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: row.map((piece, colIdx) => buildTile(rowIdx, colIdx, piece))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"m1vie7Op5i4AWdUuS5CIu49/DZ8=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/components/ChessBoard/Board/Board.tsx"],"names":["Tile","TileColor","Move","moveToString","Position","useState","Alerts","initSelectedTile","tile","initTargetTiles","Board","props","selectedTile","setSelectedTile","targetTiles","setTargetTiles","board","getBoardFromProps","buildTile","row","column","piece","getPieceAt","isSelected","isTarget","calcTileColor","handleTileClick","col","LIGHT","DARK","find","pos","undefined","pieceClicked","turn","local_player_pieces","showNotification","positionClicked","console","log","selectedPiece","onMakeMove","toString","color","targets","Array","from","generateAllPossibleTargets","map","rowIdx","colIdx"],"mappings":"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","sourcesContent":["import './board.css'\r\n\r\nimport Tile, { TileColor } from '../Tile/Tile';\r\nimport { BoardObject, stringToBoard } from '../../../domain/board'\r\nimport { Move, moveToString, Position, PositionObject } from '../../../domain/position'\r\nimport { BoardError } from '../../../domain/errors';\r\nimport { Piece, PieceColor } from '../../../domain/piece';\r\nimport { useState } from 'react';\r\nimport Alerts from '../../Alerts/sa-alerts';\r\nimport { parseJsonSourceFileConfigFileContent } from 'typescript';\r\nimport Server from '../../../server/server';\r\n\r\ninterface TileWrapper { tile: PositionObject | null }\r\n\r\nconst initSelectedTile: TileWrapper = { tile: null }\r\nconst initTargetTiles: PositionObject[] = []\r\n\r\nexport default function Board(\r\n  props: {\r\n    board: BoardObject,\r\n    local_player_pieces: PieceColor\r\n\r\n    turn: PieceColor\r\n\r\n    onMakeMove: (move: string) => void\r\n    onError: (error: BoardError) => void\r\n  }\r\n) {\r\n\r\n  const [selectedTile, setSelectedTile] = useState(initSelectedTile)\r\n  const [targetTiles, setTargetTiles] = useState(initTargetTiles)\r\n\r\n  const board = getBoardFromProps()\r\n\r\n  /*\r\n  function getBoardFromProps(): BoardObject {\r\n    const boardAsString: string | undefined = props.boardString\r\n\r\n    if (boardAsString == undefined)\r\n      return new BoardObject(props.turn)\r\n\r\n    try {\r\n      return stringToBoard(boardAsString, props.turn)\r\n    } catch (e: any) {\r\n      const err = e as BoardError\r\n      err.message = `[DEBUG] Invalid Board: ${boardAsString.length} => ${boardAsString}\\nOriginal Error: ${err.message}`\r\n      props.onError(err)\r\n    }\r\n    return new BoardObject(props.turn)\r\n  }\r\n  */\r\n\r\n  function buildTile(row: number, column: number, piece: Piece | null) {\r\n    return (\r\n      <Tile\r\n        piece={board.getPieceAt(Position(column, row))}\r\n\r\n        // Tile state\r\n        selected={isSelected(row, column)}\r\n        target={isTarget(row, column)}\r\n\r\n        // DARK or LIGHT \r\n        color={calcTileColor(row, column)}\r\n\r\n        // Position\r\n        position={Position(column, row)}\r\n\r\n        // Events\r\n        onTileClick={() => handleTileClick(row, column, piece)}\r\n      />\r\n    )\r\n  }\r\n\r\n  const calcTileColor = (row: number, col: number) =>\r\n    (col + row) % 2 === 0 ? TileColor.LIGHT : TileColor.DARK\r\n\r\n  const isTarget = (row: number, col: number) =>\r\n    targetTiles.find((pos) => pos.row === row && pos.column === col) != undefined\r\n\r\n  const isSelected = (row: number, col: number) =>\r\n    (row == selectedTile.tile?.row && col == selectedTile.tile?.column)\r\n\r\n  const handleTileClick = (row: number, col: number, pieceClicked: Piece | null) => {\r\n    setSelectedTile({ tile: null })\r\n    setTargetTiles([])\r\n\r\n    if (board.turn != props.local_player_pieces) {\r\n      Alerts.showNotification(\"Not your turn\")\r\n      return\r\n    }\r\n\r\n    const positionClicked = Position(col, row)\r\n\r\n    // 1. TILE IS SELECTED\r\n    if (selectedTile?.tile != null) {\r\n\r\n      // CLICKED SELECTED TILE AGAIN. JUST UNSELECT\r\n      if (isSelected(positionClicked.row, positionClicked.column)) {\r\n        return\r\n      }\r\n      // CLICKED A TARGET - MAKE MOVE\r\n      if (isTarget(positionClicked.row, positionClicked.column)) {\r\n        console.log(\"TARGET\")\r\n        const selectedPiece = board.getPieceAt(selectedTile.tile)\r\n        // board.makeMove(moveToString(Move(selectedPiece!!.toString(), selectedTile.tile, positionClicked)))\r\n        props.onMakeMove(moveToString(Move(selectedPiece!!.toString(), selectedTile.tile, positionClicked)))\r\n        return\r\n      }\r\n\r\n      if (pieceClicked?.color == props.local_player_pieces) {\r\n        setSelectedTile({ tile: positionClicked })\r\n        const targets = Array.from(board.generateAllPossibleTargets(positionClicked))\r\n        setTargetTiles(targets)\r\n      }\r\n    }\r\n    // 2. TILE IS NOT SELECTED\r\n    else {\r\n      // ONE OF MY TILES\r\n      if (pieceClicked?.color == props.local_player_pieces) {\r\n        setSelectedTile({ tile: positionClicked })\r\n        const targets = Array.from(board.generateAllPossibleTargets(positionClicked))\r\n        setTargetTiles(targets)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div>\r\n        {\r\n          board?.board.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"board-row\">\r\n                {row.map((piece, colIdx) => buildTile(rowIdx, colIdx, piece))}\r\n              </div>\r\n            )\r\n          }\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}