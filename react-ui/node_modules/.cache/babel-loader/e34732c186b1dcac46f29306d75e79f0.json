{"ast":null,"code":"import CONFIG from './config';\nimport Alerts from '../components/Alerts/sa-alerts';\nimport State from '../state/State';\nconst AXIOSI = CONFIG.AXIOSINSTANCE; // Private\n\nfunction responseIntercept(response) {\n  let showPopupOnError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (response.status < 200 || response.status >= 400) {\n    // If not authorized logout to avoid visual bugs\n    if (response.status == 401) {\n      State.logout();\n    }\n\n    const responseAsError = response.data.error;\n    if (showPopupOnError) Alerts.showNotification(responseAsError.message);\n    return {\n      success: false,\n      data: responseAsError\n    };\n  }\n\n  return {\n    success: true,\n    data: response.data.data\n  };\n}\n\nfunction handleRequestError(err) {\n  return {\n    success: false,\n    data: {\n      http_code: 503,\n      message: err\n    }\n  };\n} // PUBLIC FUNCTIONS\n\n\nconst logout = () => AXIOSI.get('/auth/logout').then(res => responseIntercept(res, false)).catch(err => handleRequestError(err));\n\nconst getGame = game_id => AXIOSI.get(`/games?id=${game_id}`).then(res => responseIntercept(res, false));\n\nconst tryLogin = (username, password) => AXIOSI.post('/auth', {\n  username: username,\n  password: password\n}).then(res => responseIntercept(res));\n\nconst trySignup = (username, password) => AXIOSI.post('/users', {\n  username: username,\n  password: password\n}).then(res => responseIntercept(res));\n\nconst createGame = game_id => AXIOSI.post(`/games`, {\n  id: game_id\n}).then(res => responseIntercept(res));\n\nconst connectToGame = game_id => AXIOSI.get(`/games/connect?id=${game_id}`).then(res => responseIntercept(res));\n\nconst Server = {\n  getGame,\n  connectToGame,\n  logout,\n  tryLogin,\n  trySignup,\n  createGame\n};\nexport default Server;","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/server/server.ts"],"names":["CONFIG","Alerts","State","AXIOSI","AXIOSINSTANCE","responseIntercept","response","showPopupOnError","status","logout","responseAsError","data","error","showNotification","message","success","handleRequestError","err","http_code","get","then","res","catch","getGame","game_id","tryLogin","username","password","post","trySignup","createGame","id","connectToGame","Server"],"mappings":"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","sourcesContent":["import { AxiosResponse } from 'axios'\r\nimport CONFIG from './config'\r\n\r\nimport Alerts from '../components/Alerts/sa-alerts'\r\nimport State from '../state/State'\r\nimport { emitWarning } from 'process'\r\n\r\nconst AXIOSI = CONFIG.AXIOSINSTANCE\r\n\r\n// Private\r\nexport interface ServerError {\r\n    http_code: number,\r\n    message: string\r\n}\r\n\r\n// Private - Remove later if still unused\r\ninterface OriginalServerRespose {\r\n    data: any\r\n}\r\n\r\nexport interface ServerResponse {\r\n    success: boolean,\r\n    data: any | ServerError\r\n}\r\n\r\n\r\nfunction responseIntercept(response: AxiosResponse, showPopupOnError: boolean = true): ServerResponse {\r\n    if (response.status < 200 || response.status >= 400) {\r\n        // If not authorized logout to avoid visual bugs\r\n        if (response.status == 401) {\r\n            State.logout()\r\n        }\r\n        const responseAsError = response.data.error as ServerError\r\n        if (showPopupOnError)\r\n            Alerts.showNotification(responseAsError.message)\r\n        return { success: false, data: responseAsError }\r\n    }\r\n    return { success: true, data: response.data.data }\r\n}\r\n\r\nfunction handleRequestError(err: any): ServerResponse {\r\n    return {\r\n        success: false,\r\n        data: {\r\n            http_code: 503,\r\n            message: err,\r\n        }\r\n    }\r\n}\r\n\r\n// PUBLIC FUNCTIONS\r\nconst logout = (): Promise<ServerResponse> =>\r\n    AXIOSI.get('/auth/logout')\r\n        .then((res: AxiosResponse) => responseIntercept(res, false))\r\n        .catch(err => handleRequestError(err))\r\n\r\n\r\nconst getGame = (game_id: string): Promise<ServerResponse> =>\r\n    AXIOSI.get(`/games?id=${game_id}`)\r\n        .then((res: AxiosResponse) => responseIntercept(res, false))\r\n\r\n\r\nconst tryLogin = (username: string, password: string): Promise<ServerResponse> =>\r\n    AXIOSI.post('/auth', {\r\n        username: username,\r\n        password: password\r\n    }).then((res: AxiosResponse) => responseIntercept(res))\r\n\r\n\r\nconst trySignup = (username: string, password: string): Promise<ServerResponse> =>\r\n    AXIOSI.post('/users', {\r\n        username: username,\r\n        password: password\r\n    }).then((res: AxiosResponse) => responseIntercept(res))\r\n\r\n\r\nconst createGame = (game_id: string): Promise<ServerResponse> =>\r\n    AXIOSI.post(`/games`, {\r\n        id: game_id\r\n    }).then((res: AxiosResponse) => responseIntercept(res))\r\n\r\n\r\nconst connectToGame = (game_id: string): Promise<ServerResponse> =>\r\n    AXIOSI.get(`/games/connect?id=${game_id}`)\r\n        .then((res: AxiosResponse) => responseIntercept(res))\r\n\r\n\r\nconst Server = {\r\n    getGame,\r\n    connectToGame,\r\n\r\n    logout,\r\n    tryLogin,\r\n    trySignup,\r\n\r\n\r\n    createGame\r\n}\r\n\r\nexport default Server"]},"metadata":{},"sourceType":"module"}