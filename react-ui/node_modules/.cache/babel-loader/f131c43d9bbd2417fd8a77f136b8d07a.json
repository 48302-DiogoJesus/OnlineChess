{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jesus\\\\Desktop\\\\PG\\\\Personal\\\\1-Web\\\\TS\\\\OnlineChess\\\\onlinechess\\\\src\\\\pages\\\\GamePage\\\\GamePage.tsx\",\n    _s = $RefreshSig$();\n\nimport './GamePage.css';\nimport GameVS from '../../components/GameVS/GameVS';\nimport GameInfo from '../../components/GameInfo/GameInfo';\nimport GameCountdown from '../../components/GameCountdown/GameCountdown';\nimport GameChat from '../../components/GameChat/GameChat';\nimport GameButtons from '../../components/GameButtons/GameButtons';\nimport Board from '../../components/ChessBoard/Board/Board';\nimport State from '../../state/State';\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport Alerts from '../../components/Alerts/sa-alerts';\nimport Server from '../../server/server';\nimport GamePageUtils from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let CLIENT_TYPE;\n\n(function (CLIENT_TYPE) {\n  CLIENT_TYPE[CLIENT_TYPE[\"PLAYER_WHITE\"] = 0] = \"PLAYER_WHITE\";\n  CLIENT_TYPE[CLIENT_TYPE[\"PLAYER_BLACK\"] = 1] = \"PLAYER_BLACK\";\n  CLIENT_TYPE[CLIENT_TYPE[\"VIEWER\"] = 2] = \"VIEWER\";\n  CLIENT_TYPE[CLIENT_TYPE[\"UNKNOWN\"] = 3] = \"UNKNOWN\";\n})(CLIENT_TYPE || (CLIENT_TYPE = {}));\n\nconst initialGameState = {\n  game: null,\n  client_type: CLIENT_TYPE.VIEWER\n}; // LOW TIME BECAUSE ON DEVELOPMENT\n\nconst UPDATE_GAME_TIMEOUT = 1000;\nexport default function GamePage(props) {\n  _s();\n\n  const navigate = useNavigate(); // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \n\n  const game_id = useParams().game_id;\n  const [gameState, setGameState] = useState(initialGameState);\n  const username = State.GetAppState().authentication.username;\n  const singlePlayer = game_id == \"sp\";\n  console.log(gameState.game); // FIRST RENDER\n\n  useEffect(() => {\n    joinGame();\n    return () => {};\n  }, []); // AUTO-REFRESH CALLS\n\n  const [rr, setrr] = useState(true);\n\n  const forceRR = () => {\n    setrr(!rr);\n  };\n\n  useEffect(() => {\n    var _gameState$game;\n\n    if (((_gameState$game = gameState.game) === null || _gameState$game === void 0 ? void 0 : _gameState$game.winner_username) != null) return;\n    const timer = setTimeout(() => {\n      updateFromRemote();\n    }, UPDATE_GAME_TIMEOUT);\n    return () => clearTimeout(timer);\n  }, [gameState.game, rr]);\n\n  async function updateFromRemote() {\n    var _gameState$game2;\n\n    if (((_gameState$game2 = gameState.game) === null || _gameState$game2 === void 0 ? void 0 : _gameState$game2.id) == null) return; // Do not auto-refresh if there is an OPPONENT AND it's MY turn. If no opponent wait for him to join\n\n    if (gameState.game.turn_username == username && gameState.game.opponent_username != null) return;\n    forceRR();\n    const response = await Server.getGame(game_id);\n\n    if (response.success) {\n      const updatedGame = GamePageUtils.getInternalGameStateFromRemote(gameState.client_type, response.data);\n\n      if (!GamePageUtils.areGamesEqual(gameState.game, updatedGame.game)) {\n        setGameState(updatedGame);\n      }\n    } else {\n      const error = response.data;\n      GamePageUtils.showGameError(game_id, navigate, error.message);\n    }\n  }\n\n  async function joinGame() {\n    const response = await State.joinGame(game_id);\n\n    if (response.success) {\n      const remoteGame = response.data;\n      const clientType = GamePageUtils.calcClientType(remoteGame, username);\n\n      if (clientType == CLIENT_TYPE.PLAYER_BLACK) {\n        // Tell the server i am the PLAYER_BLACK\n        Server.connectToGame(game_id).then(res => {\n          if (res.success) {\n            serverResponseToLocalGame(res, clientType);\n          } else {\n            Alerts.showNotification(res.data.message);\n          }\n        });\n      } else {\n        serverResponseToLocalGame(response, clientType);\n      }\n    } else {\n      const errorResponse = response.data;\n      GamePageUtils.showGameError(game_id, navigate, errorResponse.message);\n    }\n  }\n\n  function handleBoardError(err) {\n    GamePageUtils.showGameError(game_id, navigate, err.message);\n  }\n\n  function serverResponseToLocalGame(serverResponseWithGame) {\n    let clientType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : gameState.client_type;\n    setGameState(GamePageUtils.getInternalGameStateFromRemote(clientType, serverResponseWithGame.data));\n  }\n\n  async function handleMakeMove(move) {\n    // Validate Local\n    try {\n      var _gameState$game3;\n\n      (_gameState$game3 = gameState.game) === null || _gameState$game3 === void 0 ? void 0 : _gameState$game3.simBoard.makeMove(move);\n    } catch (err) {\n      const boardErr = err;\n      Alerts.showNotification(boardErr.message);\n      return;\n    } // Validate with server\n\n\n    const response = await Server.makeMove(game_id, move); // Change local state from server game response\n\n    serverResponseToLocalGame(response);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global-container\",\n    children: gameState.game == null ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"game-header id\",\n          children: [\"Game ID : \", game_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"game-header state\",\n          children: [\"(\", gameState.game.winner_username == null ? \"ongoing\" : \"over\", \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"go-to-main-page-btn\",\n            children: \"Main Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameVS, {\n          local_player_username: gameState.game.local_player_username,\n          local_player_pieces: gameState.game.local_player_pieces,\n          opponent_username: gameState.game.opponent_username,\n          opponent_pieces: gameState.game.opponent_pieces\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameCountdown, {\n          initalTime: 60\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          board: gameState.game.simBoard,\n          local_player_pieces: gameState.game.local_player_pieces,\n          turn: gameState.game.turn_pieces,\n          gameOver: gameState.game.winner_username != null,\n          onMakeMove: handleMakeMove,\n          onError: handleBoardError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameChat, {\n          game_id: game_id,\n          local_player_username: gameState.game.local_player_username,\n          opponent_username: gameState.game.opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container-row\",\n        children: [/*#__PURE__*/_jsxDEV(GameInfo, {\n          turn_username: gameState.game.turn_username,\n          winner_username: gameState.game.winner_username,\n          opponent_username: gameState.game.opponent_username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(GameButtons, {\n          gameOver: gameState.game.winner_username != null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamePage, \"ymCQ64VWQPm2Pzz0pt/l4ijJxhA=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = GamePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/jesus/Desktop/PG/Personal/1-Web/TS/OnlineChess/onlinechess/src/pages/GamePage/GamePage.tsx"],"names":["GameVS","GameInfo","GameCountdown","GameChat","GameButtons","Board","State","useParams","useNavigate","Link","useEffect","useState","Alerts","Server","GamePageUtils","CLIENT_TYPE","initialGameState","game","client_type","VIEWER","UPDATE_GAME_TIMEOUT","GamePage","props","navigate","game_id","gameState","setGameState","username","GetAppState","authentication","singlePlayer","console","log","joinGame","rr","setrr","forceRR","winner_username","timer","setTimeout","updateFromRemote","clearTimeout","id","turn_username","opponent_username","response","getGame","success","updatedGame","getInternalGameStateFromRemote","data","areGamesEqual","error","showGameError","message","remoteGame","clientType","calcClientType","PLAYER_BLACK","connectToGame","then","res","serverResponseToLocalGame","showNotification","errorResponse","handleBoardError","err","serverResponseWithGame","handleMakeMove","move","simBoard","makeMove","boardErr","local_player_username","local_player_pieces","opponent_pieces","turn_pieces"],"mappings":"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","sourcesContent":["import './GamePage.css'\r\n\r\nimport GameVS from '../../components/GameVS/GameVS'\r\nimport GameInfo from '../../components/GameInfo/GameInfo'\r\nimport GameCountdown from '../../components/GameCountdown/GameCountdown'\r\nimport GameChat from '../../components/GameChat/GameChat'\r\nimport GameButtons from '../../components/GameButtons/GameButtons'\r\nimport Board from '../../components/ChessBoard/Board/Board'\r\n\r\nimport { RemoteGame } from '../../state/reducers/root'\r\nimport State from '../../state/State'\r\n\r\nimport { useParams, useNavigate, NavigateFunction, Link } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport Alerts from '../../components/Alerts/sa-alerts'\r\nimport { PieceColor } from '../../domain/piece'\r\nimport Server, { ServerResponse, ServerError } from '../../server/server'\r\n\r\nimport GamePageUtils from './utils'\r\nimport { BoardError } from '../../domain/errors'\r\nimport { BoardObject, stringToBoard } from '../../domain/board'\r\n\r\n\r\nexport interface InternalGameState {\r\n  id: string | null\r\n  local_player_username: string\r\n  local_player_pieces: PieceColor\r\n\r\n  opponent_username: string | null\r\n  opponent_pieces: PieceColor | null\r\n\r\n  winner_username: string | null\r\n  winner_pieces: PieceColor | null\r\n\r\n  boardStr: string\r\n  simBoard: BoardObject\r\n\r\n  turn_username: string\r\n  turn_pieces: PieceColor\r\n}\r\n\r\nexport enum CLIENT_TYPE {\r\n  PLAYER_WHITE,\r\n  PLAYER_BLACK,\r\n  VIEWER,\r\n  UNKNOWN\r\n}\r\n\r\nexport interface InternalGameStateWrapper {\r\n  client_type: CLIENT_TYPE\r\n  game: InternalGameState | null\r\n}\r\n\r\nconst initialGameState: InternalGameStateWrapper = {\r\n  game: null,\r\n  client_type: CLIENT_TYPE.VIEWER\r\n}\r\n\r\n// LOW TIME BECAUSE ON DEVELOPMENT\r\nconst UPDATE_GAME_TIMEOUT = 1000\r\n\r\nexport default function GamePage(props: any) {\r\n  const navigate = useNavigate()\r\n  // NEVER NULL BECAUSE OF THE ROUTE POINTING TO THIS COMPONENT \r\n  const game_id = useParams().game_id!!\r\n  const [gameState, setGameState] = useState(initialGameState)\r\n  const username = State.GetAppState().authentication.username\r\n  const singlePlayer = game_id == \"sp\"\r\n\r\n  console.log(gameState.game)\r\n\r\n  // FIRST RENDER\r\n  useEffect(() => {\r\n    joinGame()\r\n    return () => { }\r\n  }, [])\r\n\r\n  // AUTO-REFRESH CALLS\r\n  const [rr, setrr] = useState(true)\r\n  const forceRR = () => { setrr(!rr) }\r\n  useEffect(() => {\r\n    if (gameState.game?.winner_username != null)\r\n      return\r\n    const timer = setTimeout(() => { updateFromRemote() }, UPDATE_GAME_TIMEOUT)\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [gameState.game, rr])\r\n\r\n  async function updateFromRemote() {\r\n    if (gameState.game?.id == null)\r\n      return\r\n    // Do not auto-refresh if there is an OPPONENT AND it's MY turn. If no opponent wait for him to join\r\n    if (gameState.game.turn_username == username && gameState.game.opponent_username != null)\r\n      return\r\n\r\n    forceRR()\r\n\r\n    const response = await Server.getGame(game_id)\r\n\r\n    if (response.success) {\r\n      const updatedGame = GamePageUtils.getInternalGameStateFromRemote(gameState.client_type, response.data as RemoteGame)\r\n\r\n      if (!GamePageUtils.areGamesEqual(gameState.game, updatedGame.game!!)) {\r\n        setGameState(updatedGame)\r\n      }\r\n    } else {\r\n      const error = response.data as ServerError\r\n      GamePageUtils.showGameError(game_id, navigate, error.message)\r\n    }\r\n  }\r\n\r\n  async function joinGame() {\r\n    const response = await State.joinGame(game_id)\r\n\r\n    if (response.success) {\r\n      const remoteGame = response.data as RemoteGame\r\n      const clientType = GamePageUtils.calcClientType(remoteGame, username)\r\n\r\n      if (clientType == CLIENT_TYPE.PLAYER_BLACK) {\r\n        // Tell the server i am the PLAYER_BLACK\r\n        Server.connectToGame(game_id)\r\n          .then(res => {\r\n            if (res.success) {\r\n              serverResponseToLocalGame(res, clientType)\r\n            } else {\r\n              Alerts.showNotification((res.data as ServerError).message)\r\n            }\r\n          })\r\n      } else {\r\n        serverResponseToLocalGame(response, clientType)\r\n      }\r\n    } else {\r\n      const errorResponse = response.data as ServerError\r\n      GamePageUtils.showGameError(game_id, navigate, errorResponse.message)\r\n    }\r\n  }\r\n\r\n  function handleBoardError(err: BoardError) {\r\n    GamePageUtils.showGameError(game_id, navigate, err.message)\r\n  }\r\n\r\n  function serverResponseToLocalGame(serverResponseWithGame: ServerResponse, clientType: CLIENT_TYPE = gameState.client_type) {\r\n    setGameState(GamePageUtils.getInternalGameStateFromRemote(clientType, serverResponseWithGame.data as RemoteGame))\r\n  }\r\n\r\n  async function handleMakeMove(move: string) {\r\n    // Validate Local\r\n    try {\r\n      gameState.game?.simBoard.makeMove(move)\r\n    } catch (err) {\r\n      const boardErr = err as BoardError\r\n      Alerts.showNotification(boardErr.message)\r\n      return\r\n    }\r\n\r\n    // Validate with server\r\n    const response = await Server.makeMove(game_id, move)\r\n    // Change local state from server game response\r\n    serverResponseToLocalGame(response)\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      {\r\n        gameState.game == null ? (\r\n          null\r\n        ) : (\r\n          <div className=\"game-container\">\r\n            <div className=\"game-container-row\">\r\n              <h1 className=\"game-header id\">Game ID : {game_id}</h1>\r\n              <h3 className=\"game-header state\">({gameState.game.winner_username == null ? \"ongoing\" : \"over\"})</h3>\r\n              <Link to=\"/\">\r\n                <button className=\"go-to-main-page-btn\">Main Page</button>\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"game-container-row\">\r\n              <GameVS\r\n                local_player_username={gameState.game.local_player_username} local_player_pieces={gameState.game.local_player_pieces}\r\n                opponent_username={gameState.game.opponent_username} opponent_pieces={gameState.game.opponent_pieces}\r\n              />\r\n              <GameCountdown initalTime={60} />\r\n            </div>\r\n\r\n            <div className=\"game-container-row\">\r\n\r\n              <Board\r\n                board={gameState.game.simBoard}\r\n                local_player_pieces={gameState.game.local_player_pieces}\r\n\r\n                turn={gameState.game.turn_pieces}\r\n\r\n                gameOver={gameState.game.winner_username != null}\r\n\r\n                onMakeMove={handleMakeMove}\r\n                onError={handleBoardError}\r\n              />\r\n\r\n              <GameChat game_id={game_id} local_player_username={gameState.game.local_player_username} opponent_username={gameState.game.opponent_username} />\r\n            </div>\r\n\r\n            <div className=\"game-container-row\">\r\n              <GameInfo\r\n                turn_username={gameState.game.turn_username}\r\n\r\n                winner_username={gameState.game.winner_username}\r\n\r\n                opponent_username={gameState.game.opponent_username} />\r\n              <GameButtons gameOver={gameState.game.winner_username != null} />\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    </div >\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}